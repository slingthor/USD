-- glslfx version 0.1

//
// Copyright 2018 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

--- This is what an import might look like.
--- #import $TOOLS/hdSt/shaders/edgeId.glslfx

--- --------------------------------------------------------------------------
-- glsl EdgeId.Geometry.None

// called from Mesh.Geometry.*
void ProcessEdgeId(int index, vec2 faceUV)
{
    // do nothing
}

--- --------------------------------------------------------------------------
-- glsl EdgeId.Geometry.EdgeParam

// Interpolate linearly since we want to be able to
// reason about the distance from the edge in fragment space.
noperspective out vec2 gsEdgeParam;

// called from Mesh.Geometry.*
void ProcessEdgeId(int index, vec2 faceUV)
{
    // The local triangular parameterization is a subset of the
    // local rectangular parameterization, so for both cases
    // we just record the uv parameterization at the face vertex
    // and can reconstruct the third coordinate when necessary.
    gsEdgeParam = faceUV;
}

--- --------------------------------------------------------------------------
-- glsl EdgeId.Fragment.Fallback
// Mixin version to use when the geometry shader stage is inactive.

int GetPrimitiveEdgeId() {
    return -1;
}

bool IsFragmentOnEdge() {
    return false;
}

--- --------------------------------------------------------------------------
-- glsl EdgeId.Fragment.TriangleParam

noperspective in vec2 gsEdgeParam;

vec3 ExpandBarycentricCoord(vec2 bc)
{
    return vec3(bc.x, bc.y, 1 - bc.x - bc.y);
}

// XXX: The constant used below is in parametric space. We should expose this
// in viewport pixel space. We'll need the edge distances to convert the
// interpolated parametric coordinates to viewport pixels for comparison.
const float pickRadius = 0.02;

// called from hdSt/codeGen.cpp
int GetPrimitiveEdgeId()
{
    vec3 baryCoord = ExpandBarycentricCoord(gsEdgeParam.xy);

    //              2 (0,1,0)
    //              ^
    //         e2 /   \ e1
    //           /     \
    // (0,0,1)  0 ----- 1 (1,0,0) 
    //              e0

    int edgeId = -1;
    if (baryCoord.y < pickRadius) {
        edgeId = 0;
    } else if (baryCoord.z < pickRadius) {
        edgeId = 1;
    } else if (baryCoord.x < pickRadius) {
        edgeId = 2;
    }

    return edgeId;
}

bool IsFragmentOnEdge()
{
    vec3 bc = ExpandBarycentricCoord(gsEdgeParam.xy);
    return any( lessThan(bc, vec3(pickRadius)) );
}

--- --------------------------------------------------------------------------
-- glsl EdgeId.Fragment.RectangleParam

noperspective in vec2 gsEdgeParam;

// XXX: The constant used below is in parametric space. We should expose this
// in viewport pixel space. We'll need the edge distances to convert the
// interpolated parametric coordinates to viewport pixels for comparison.
const float pickRadius = 0.02;

// called from hdSt/codeGen.cpp
int GetPrimitiveEdgeId()
{
//              e2
//     (0,1) 3 ------ 2 (1,1)
//           |        |
//       e3  |        |  e1
//           |        |
//     (0,0) 0 ------ 1 (1,0)
//               e0

    int edgeId = -1;
    const float delLow = pickRadius, delHigh = 1 - delLow;
    vec2 uv = gsEdgeParam.xy;

    if (uv.y < delLow) {
        edgeId = 0;
    } else if (uv.x > delHigh) {
        edgeId = 1;
    } else if (uv.y > delHigh) {
        edgeId = 2;
    } else if (uv.x < delLow) {
        edgeId = 3;
    }

    return edgeId;
}

bool IsFragmentOnEdge()
{
    vec2 uv = gsEdgeParam.xy;
    bool e0_e3 = any( lessThan(uv, vec2(pickRadius)) );
    bool e1_e2 = any( greaterThan(uv, vec2(1 - pickRadius)) );
    return e0_e3 || e1_e2;
}
