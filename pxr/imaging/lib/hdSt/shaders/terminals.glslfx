-- glslfx version 0.1

//
// Copyright 2017 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

--- This is what an import might look like.
--- #import $TOOLS/hdSt/shaders/terminals.glslfx

--- --------------------------------------------------------------------------
-- glsl Geometry.CustomDisplacement

vec4 displacementShader(int index, vec4 Peye, vec3 Neye, vec4 patchCoord);

vec4 DisplacementTerminal(int index, vec4 Peye, vec3 Neye, vec4 patchCoord)
{
    return displacementShader(index, Peye, Neye, patchCoord);
}

--- --------------------------------------------------------------------------
-- glsl Geometry.NoCustomDisplacement

vec4 DisplacementTerminal(int index, vec4 Peye, vec3 Neye, vec4 patchCoord)
{
    return Peye;
}

--- --------------------------------------------------------------------------
-- glsl Fragment.CommonTerminals

vec4 ShadingTerminal(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    color.rgb = ApplyColorOverrides(color).rgb;

#if defined(HD_HAS_scalarOverride)
    return color;
#else
    vec4 litColor = mix(color,
                        _ShadingTerminal(Peye, Neye, color, patchCoord),
                        GetLightingBlendAmount());

    return ApplyColorOverridesPostLighting(litColor);
#endif
}

--- --------------------------------------------------------------------------
-- glsl Fragment.Surface

#ifdef HD_HAS_integrateLights
#ifndef HD_HAS_definedIntegrateLights
#define HD_HAS_definedIntegrateLights

LightingContribution
integrateLights(vec4 Peye, vec3 Neye, LightingInterfaceProperties props)
{
    return integrateLightsDefault(Peye, Neye, props);
}

#endif // HD_HAS_definedIntegrateLights
#endif

#if !defined(ARCH_GFX_METAL)
vec4 surfaceShader(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord);
#endif

vec4 _ShadingTerminal(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    return surfaceShader(Peye, Neye, color, patchCoord);
}

--- --------------------------------------------------------------------------
-- glsl Fragment.SurfaceUnlit

#ifdef HD_HAS_integrateLights
#ifndef HD_HAS_definedIntegrateLights
#define HD_HAS_definedIntegrateLights

LightingContribution
integrateLights(vec4 Peye, vec3 Neye, LightingInterfaceProperties props)
{
    return integrateLightsConstant(Peye, Neye, props);
}

#endif // HD_HAS_definedIntegrateLights
#endif

#if !defined(ARCH_GFX_METAL)
vec4 surfaceShader(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord);
#endif

vec4 _ShadingTerminal(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    return surfaceShader(Peye, Neye, color, patchCoord);
}

--- --------------------------------------------------------------------------
-- glsl Fragment.SurfaceSheer

#ifdef HD_HAS_integrateLights
#ifndef HD_HAS_definedIntegrateLights
#define HD_HAS_definedIntegrateLights

LightingContribution
integrateLights(vec4 Peye, vec3 Neye, LightingInterfaceProperties props)
{
    return integrateLightsConstant(Peye, Neye, props);
}

#endif // HD_HAS_definedIntegrateLights
#endif

#if !defined(ARCH_GFX_METAL)
vec4 surfaceShader(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord);
#endif

vec4 _ShadingTerminal(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    vec4 surf = surfaceShader(Peye, Neye, color, patchCoord);

    // shade only every 2nd pixel in x and y
    // creating a thin stippled mesh grid 
    float factor = step(0.5, fract((gl_FragCoord.x + 1.0) * 0.5))
                 * step(0.5, fract((gl_FragCoord.y + 0.0) * 0.5));
    
    // make the surface translucent so that the lines of
    // the mesh edges are visible even from the back faces.
    surf.a = 0.2 * (1.0 - factor);
    return surf;
}

--- --------------------------------------------------------------------------
-- glsl Fragment.SurfaceOutline

#ifdef HD_HAS_integrateLights
#ifndef HD_HAS_definedIntegrateLights
#define HD_HAS_definedIntegrateLights

LightingContribution
integrateLights(vec4 Peye, vec3 Neye, LightingInterfaceProperties props)
{
    return integrateLightsConstant(Peye, Neye, props);
}

#endif // HD_HAS_definedIntegrateLights
#endif

#if !defined(ARCH_GFX_METAL)
vec4 surfaceShader(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord);
#endif

vec4 _ShadingTerminal(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    return vec4(0.0, 0.0, 0.0, 1.0);
}

--- --------------------------------------------------------------------------
-- glsl Fragment.ConstantColor

vec4 _ShadingTerminal(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    return ApplyColorOverrides(color);
}

--- --------------------------------------------------------------------------
-- glsl Fragment.HullColor

vec4 _ShadingTerminal(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    vec4 hullColor = vec4(vec3(0.18), 1.0);

#if defined(HD_HAS_selectedWeight)
    float weight = clamp(HdGet_selectedWeight(), 0.0, 1.0);

    if (weight <= 0.0) {
        discard;
    }

    // The three control points of the quadratic curve for the selection color
    // with the binomial coefficient premultiplied in.
    // constant  :      1
    // linear    :    1   1
    // quadratic :  1   2   1
    vec3 c0 = vec3(0.0, 0.0, 0.0); // 1.0 * Black
    vec3 c1 = vec3(2.0, 0.0, 0.0); // 2.0 * Red
    vec3 c2 = vec3(1.0, 1.0, 0.0); // 1.0 * Yellow
    
    // de Casteljau quadratic curve interpolation
    // A recursive application of lerp ('mix' in glsl) reducing the order each
    // step of the recursion. 
    //  at weight = 0.0  we get c0
    //  at weight = 0.5  we get c0 * .25 + c1 * 0.5 + c2 *.25
    //  at weight = 1.0  we get c2
    // Thus it is a smooth curve going from c0 to c2 bending towards c1
    hullColor.rgb = mix(mix(c0, c1, weight),
                        mix(c1, c2, weight), weight);

#elif defined(HD_HAS_hullColor)
    hullColor = HdGet_hullColor();
#endif

    return ApplyColorOverrides(hullColor);
}

--- --------------------------------------------------------------------------
-- glsl Fragment.PointColor

vec4 _ShadingTerminal(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    vec4 pointColor = vec4(vec3(0.18), 1.0);
#if defined(HD_HAS_pointColor)
    pointColor = HdGet_pointColor();
#endif
    return ApplyColorOverrides(pointColor);
}
