# This Python file uses the following encoding: utf-8
#############################################################################
##
## Copyright (C) 2019 The Qt Company Ltd.
## Contact: https://www.qt.io/licensing/
##
## This file is part of Qt for Python.
##
## $QT_BEGIN_LICENSE:LGPL$
## Commercial License Usage
## Licensees holding valid commercial Qt licenses may use this file in
## accordance with the commercial license agreement provided with the
## Software or, alternatively, in accordance with the terms contained in
## a written agreement between you and The Qt Company. For licensing terms
## and conditions see https://www.qt.io/terms-conditions. For further
## information use the contact form at https://www.qt.io/contact-us.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 3 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL3 included in the
## packaging of this file. Please review the following information to
## ensure the GNU Lesser General Public License version 3 requirements
## will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU
## General Public License version 2.0 or (at your option) the GNU General
## Public license version 3 or any later version approved by the KDE Free
## Qt Foundation. The licenses are as published by the Free Software
## Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
## included in the packaging of this file. Please review the following
## information to ensure the GNU General Public License requirements will
## be met: https://www.gnu.org/licenses/gpl-2.0.html and
## https://www.gnu.org/licenses/gpl-3.0.html.
##
## $QT_END_LICENSE$
##
#############################################################################

"""
This file contains the exact signatures for all functions in module
PySide2.QtCore, except for defaults which are replaced by "...".
"""

# Module PySide2.QtCore
import PySide2
from PySide2.support.signature import typing
from PySide2.support.signature.mapping import (
    Virtual, Missing, Invalid, Default, Instance)

class Object(object): pass

import shiboken2 as Shiboken
Shiboken.Object = Object

import PySide2.QtCore


class ClassInfo(object):

    def __init__(self, **info: Dict[str, str]): ...


class MetaFunction(object):
    def __call__(self, *args: Any) -> Any: ...


class MetaSignal(type):
    @staticmethod
    def __instancecheck__(object: object) -> bool: ...


class Property(object):

    def __init__(self, type: type, fget: Optional[Callable]=..., fset: Optional[Callable]=..., freset: Optional[Callable]=..., fdel: Optional[Callable]=..., doc: str=..., notify: Optional[Callable]=..., designable: bool=..., scriptable: bool=..., stored: bool=..., user: bool=..., constant: bool=..., final: bool=...): ...

    def getter(self, func: Callable): ...
    def read(self, func: Callable): ...
    def setter(self, func: Callable): ...
    def write(self, func: Callable): ...


class QAbstractAnimation(PySide2.QtCore.QObject):

    class DeletionPolicy(object): ...
    KeepWhenStopped          : DeletionPolicy = ... # 0x0
    DeleteWhenStopped        : DeletionPolicy = ... # 0x1

    class Direction(object): ...
    Backward                 : Direction = ... # 0x1
    Forward                  : Direction = ... # 0x0

    class State(object): ...
    Paused                   : State = ... # 0x1
    Running                  : State = ... # 0x2
    Stopped                  : State = ... # 0x0

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def currentLoop(self) -> int: ...
    def currentLoopTime(self) -> int: ...
    def currentTime(self) -> int: ...
    def direction(self) -> PySide2.QtCore.QAbstractAnimation.Direction: ...
    def duration(self) -> int: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def group(self) -> PySide2.QtCore.QAnimationGroup: ...
    def loopCount(self) -> int: ...
    def pause(self): ...
    def resume(self): ...
    def setCurrentTime(self, msecs: int): ...
    def setDirection(self, direction: PySide2.QtCore.QAbstractAnimation.Direction): ...
    def setLoopCount(self, loopCount: int): ...
    def setPaused(self, arg__1: bool): ...
    def start(self, policy: PySide2.QtCore.QAbstractAnimation.DeletionPolicy=...): ...
    def state(self) -> PySide2.QtCore.QAbstractAnimation.State: ...
    def stop(self): ...
    def totalDuration(self) -> int: ...
    def updateCurrentTime(self, currentTime: int): ...
    def updateDirection(self, direction: PySide2.QtCore.QAbstractAnimation.Direction): ...
    def updateState(self, newState: PySide2.QtCore.QAbstractAnimation.State, oldState: PySide2.QtCore.QAbstractAnimation.State): ...


class QAbstractEventDispatcher(PySide2.QtCore.QObject):

    class TimerInfo(Shiboken.Object):

        def __init__(self, id: int, i: int, t: PySide2.QtCore.Qt.TimerType): ...


    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def closingDown(self): ...
    def filterNativeEvent(self, eventType: PySide2.QtCore.QByteArray, message: int, result: int) -> bool: ...
    def flush(self): ...
    def hasPendingEvents(self) -> bool: ...
    def installNativeEventFilter(self, filterObj: PySide2.QtCore.QAbstractNativeEventFilter): ...
    @staticmethod
    def instance(thread: Optional[PySide2.QtCore.QThread]=...) -> PySide2.QtCore.QAbstractEventDispatcher: ...
    def interrupt(self): ...
    def processEvents(self, flags: PySide2.QtCore.QEventLoop.ProcessEventsFlags) -> bool: ...
    def registerSocketNotifier(self, notifier: PySide2.QtCore.QSocketNotifier): ...
    @typing.overload
    def registerTimer(self, interval: int, timerType: PySide2.QtCore.Qt.TimerType, object: PySide2.QtCore.QObject) -> int: ...
    @typing.overload
    def registerTimer(self, timerId: int, interval: int, timerType: PySide2.QtCore.Qt.TimerType, object: PySide2.QtCore.QObject): ...
    def registeredTimers(self, object: PySide2.QtCore.QObject) -> List[PySide2.QtCore.QAbstractEventDispatcher.TimerInfo]: ...
    def remainingTime(self, timerId: int) -> int: ...
    def removeNativeEventFilter(self, filterObj: PySide2.QtCore.QAbstractNativeEventFilter): ...
    def startingUp(self): ...
    def unregisterSocketNotifier(self, notifier: PySide2.QtCore.QSocketNotifier): ...
    def unregisterTimer(self, timerId: int) -> bool: ...
    def unregisterTimers(self, object: PySide2.QtCore.QObject) -> bool: ...
    def wakeUp(self): ...


class QAbstractItemModel(PySide2.QtCore.QObject):

    class CheckIndexOption(object): ...
    NoOption                 : CheckIndexOption = ... # 0x0
    DoNotUseParent           : CheckIndexOption = ... # 0x2
    ParentIsInvalid          : CheckIndexOption = ... # 0x4
    IndexIsValid             : CheckIndexOption = ... # 0x1

    class CheckIndexOptions(object): ...

    class LayoutChangeHint(object): ...
    HorizontalSortHint       : LayoutChangeHint = ... # 0x2
    NoLayoutChangeHint       : LayoutChangeHint = ... # 0x0
    VerticalSortHint         : LayoutChangeHint = ... # 0x1

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def beginInsertColumns(self, parent: PySide2.QtCore.QModelIndex, first: int, last: int): ...
    def beginInsertRows(self, parent: PySide2.QtCore.QModelIndex, first: int, last: int): ...
    def beginMoveColumns(self, sourceParent: PySide2.QtCore.QModelIndex, sourceFirst: int, sourceLast: int, destinationParent: PySide2.QtCore.QModelIndex, destinationColumn: int) -> bool: ...
    def beginMoveRows(self, sourceParent: PySide2.QtCore.QModelIndex, sourceFirst: int, sourceLast: int, destinationParent: PySide2.QtCore.QModelIndex, destinationRow: int) -> bool: ...
    def beginRemoveColumns(self, parent: PySide2.QtCore.QModelIndex, first: int, last: int): ...
    def beginRemoveRows(self, parent: PySide2.QtCore.QModelIndex, first: int, last: int): ...
    def beginResetModel(self): ...
    def buddy(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def canDropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def canFetchMore(self, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def changePersistentIndex(self, from_: PySide2.QtCore.QModelIndex, to: PySide2.QtCore.QModelIndex): ...
    def changePersistentIndexList(self, from_: List[int], to: List[int]): ...
    def checkIndex(self, index: PySide2.QtCore.QModelIndex, options: PySide2.QtCore.QAbstractItemModel.CheckIndexOptions=...) -> bool: ...
    def columnCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    @typing.overload
    def createIndex(self, row: int, column: int, id: int=...) -> PySide2.QtCore.QModelIndex: ...
    @typing.overload
    def createIndex(self, row: int, column: int, ptr: object) -> PySide2.QtCore.QModelIndex: ...
    def data(self, index: PySide2.QtCore.QModelIndex, role: int=...) -> Any: ...
    def decodeData(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex, stream: PySide2.QtCore.QDataStream) -> bool: ...
    def dropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def encodeData(self, indexes: List[int], stream: PySide2.QtCore.QDataStream): ...
    def endInsertColumns(self): ...
    def endInsertRows(self): ...
    def endMoveColumns(self): ...
    def endMoveRows(self): ...
    def endRemoveColumns(self): ...
    def endRemoveRows(self): ...
    def endResetModel(self): ...
    def fetchMore(self, parent: PySide2.QtCore.QModelIndex): ...
    def flags(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.Qt.ItemFlags: ...
    def hasChildren(self, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def hasIndex(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def headerData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, role: int=...) -> Any: ...
    def index(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex=...) -> PySide2.QtCore.QModelIndex: ...
    def insertColumn(self, column: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def insertColumns(self, column: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def insertRow(self, row: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def insertRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def itemData(self, index: PySide2.QtCore.QModelIndex) -> Dict: ...
    def match(self, start: PySide2.QtCore.QModelIndex, role: int, value: Any, hits: int=..., flags: PySide2.QtCore.Qt.MatchFlags=...) -> List[int]: ...
    def mimeData(self, indexes: List[int]) -> PySide2.QtCore.QMimeData: ...
    def mimeTypes(self) -> List[str]: ...
    def moveColumn(self, sourceParent: PySide2.QtCore.QModelIndex, sourceColumn: int, destinationParent: PySide2.QtCore.QModelIndex, destinationChild: int) -> bool: ...
    def moveColumns(self, sourceParent: PySide2.QtCore.QModelIndex, sourceColumn: int, count: int, destinationParent: PySide2.QtCore.QModelIndex, destinationChild: int) -> bool: ...
    def moveRow(self, sourceParent: PySide2.QtCore.QModelIndex, sourceRow: int, destinationParent: PySide2.QtCore.QModelIndex, destinationChild: int) -> bool: ...
    def moveRows(self, sourceParent: PySide2.QtCore.QModelIndex, sourceRow: int, count: int, destinationParent: PySide2.QtCore.QModelIndex, destinationChild: int) -> bool: ...
    @typing.overload
    def parent(self) -> PySide2.QtCore.QObject: ...
    @typing.overload
    def parent(self, child: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def persistentIndexList(self) -> List[int]: ...
    def removeColumn(self, column: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def removeColumns(self, column: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def removeRow(self, row: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def removeRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def resetInternalData(self): ...
    def revert(self): ...
    def roleNames(self) -> Dict: ...
    def rowCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    def setData(self, index: PySide2.QtCore.QModelIndex, value: Any, role: int=...) -> bool: ...
    def setHeaderData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, value: Any, role: int=...) -> bool: ...
    def setItemData(self, index: PySide2.QtCore.QModelIndex, roles: Dict) -> bool: ...
    def sibling(self, row: int, column: int, idx: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def sort(self, column: int, order: PySide2.QtCore.Qt.SortOrder=...): ...
    def span(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QSize: ...
    def submit(self) -> bool: ...
    def supportedDragActions(self) -> PySide2.QtCore.Qt.DropActions: ...
    def supportedDropActions(self) -> PySide2.QtCore.Qt.DropActions: ...


class QAbstractListModel(PySide2.QtCore.QAbstractItemModel):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def columnCount(self, parent: PySide2.QtCore.QModelIndex) -> int: ...
    def dropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def flags(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.Qt.ItemFlags: ...
    def hasChildren(self, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def index(self, row: int, column: int=..., parent: PySide2.QtCore.QModelIndex=...) -> PySide2.QtCore.QModelIndex: ...
    @typing.overload
    def parent(self) -> PySide2.QtCore.QObject: ...
    @typing.overload
    def parent(self, child: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def sibling(self, row: int, column: int, idx: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...


class QAbstractNativeEventFilter(Shiboken.Object):

    def __init__(self): ...

    def nativeEventFilter(self, eventType: PySide2.QtCore.QByteArray, message: int, result: int) -> bool: ...


class QAbstractProxyModel(PySide2.QtCore.QAbstractItemModel):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def buddy(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def canDropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def canFetchMore(self, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def data(self, proxyIndex: PySide2.QtCore.QModelIndex, role: int=...) -> Any: ...
    def dropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def fetchMore(self, parent: PySide2.QtCore.QModelIndex): ...
    def flags(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.Qt.ItemFlags: ...
    def hasChildren(self, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def headerData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, role: int=...) -> Any: ...
    def itemData(self, index: PySide2.QtCore.QModelIndex) -> Dict: ...
    def mapFromSource(self, sourceIndex: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def mapSelectionFromSource(self, selection: PySide2.QtCore.QItemSelection) -> PySide2.QtCore.QItemSelection: ...
    def mapSelectionToSource(self, selection: PySide2.QtCore.QItemSelection) -> PySide2.QtCore.QItemSelection: ...
    def mapToSource(self, proxyIndex: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def mimeData(self, indexes: List[int]) -> PySide2.QtCore.QMimeData: ...
    def mimeTypes(self) -> List[str]: ...
    def resetInternalData(self): ...
    def revert(self): ...
    def setData(self, index: PySide2.QtCore.QModelIndex, value: Any, role: int=...) -> bool: ...
    def setHeaderData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, value: Any, role: int=...) -> bool: ...
    def setItemData(self, index: PySide2.QtCore.QModelIndex, roles: Dict) -> bool: ...
    def setSourceModel(self, sourceModel: PySide2.QtCore.QAbstractItemModel): ...
    def sibling(self, row: int, column: int, idx: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def sort(self, column: int, order: PySide2.QtCore.Qt.SortOrder=...): ...
    def sourceModel(self) -> PySide2.QtCore.QAbstractItemModel: ...
    def span(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QSize: ...
    def submit(self) -> bool: ...
    def supportedDragActions(self) -> PySide2.QtCore.Qt.DropActions: ...
    def supportedDropActions(self) -> PySide2.QtCore.Qt.DropActions: ...


class QAbstractState(PySide2.QtCore.QObject):

    def __init__(self, parent: Optional[PySide2.QtCore.QState]=...): ...

    def active(self) -> bool: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def machine(self) -> PySide2.QtCore.QStateMachine: ...
    def onEntry(self, event: PySide2.QtCore.QEvent): ...
    def onExit(self, event: PySide2.QtCore.QEvent): ...
    def parentState(self) -> PySide2.QtCore.QState: ...


class QAbstractTableModel(PySide2.QtCore.QAbstractItemModel):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def dropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def flags(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.Qt.ItemFlags: ...
    def hasChildren(self, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def index(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex=...) -> PySide2.QtCore.QModelIndex: ...
    @typing.overload
    def parent(self) -> PySide2.QtCore.QObject: ...
    @typing.overload
    def parent(self, child: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def sibling(self, row: int, column: int, idx: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...


class QAbstractTransition(PySide2.QtCore.QObject):

    class TransitionType(object): ...
    ExternalTransition       : TransitionType = ... # 0x0
    InternalTransition       : TransitionType = ... # 0x1

    def __init__(self, sourceState: Optional[PySide2.QtCore.QState]=...): ...

    def addAnimation(self, animation: PySide2.QtCore.QAbstractAnimation): ...
    def animations(self) -> List[PySide2.QtCore.QAbstractAnimation]: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def eventTest(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def machine(self) -> PySide2.QtCore.QStateMachine: ...
    def onTransition(self, event: PySide2.QtCore.QEvent): ...
    def removeAnimation(self, animation: PySide2.QtCore.QAbstractAnimation): ...
    def setTargetState(self, target: PySide2.QtCore.QAbstractState): ...
    def setTargetStates(self, targets: List[PySide2.QtCore.QAbstractState]): ...
    def setTransitionType(self, type: PySide2.QtCore.QAbstractTransition.TransitionType): ...
    def sourceState(self) -> PySide2.QtCore.QState: ...
    def targetState(self) -> PySide2.QtCore.QAbstractState: ...
    def targetStates(self) -> List[PySide2.QtCore.QAbstractState]: ...
    def transitionType(self) -> PySide2.QtCore.QAbstractTransition.TransitionType: ...


class QAnimationGroup(PySide2.QtCore.QAbstractAnimation):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def addAnimation(self, animation: PySide2.QtCore.QAbstractAnimation): ...
    def animationAt(self, index: int) -> PySide2.QtCore.QAbstractAnimation: ...
    def animationCount(self) -> int: ...
    def clear(self): ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def indexOfAnimation(self, animation: PySide2.QtCore.QAbstractAnimation) -> int: ...
    def insertAnimation(self, index: int, animation: PySide2.QtCore.QAbstractAnimation): ...
    def removeAnimation(self, animation: PySide2.QtCore.QAbstractAnimation): ...
    def takeAnimation(self, index: int) -> PySide2.QtCore.QAbstractAnimation: ...


class QBasicMutex(Shiboken.Object):

    def __init__(self): ...

    def isRecursive(self) -> bool: ...
    def lock(self): ...
    def tryLock(self) -> bool: ...
    def try_lock(self) -> bool: ...
    def unlock(self): ...


class QBasicTimer(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QBasicTimer: PySide2.QtCore.QBasicTimer): ...

    def __copy__(self): ...
    def isActive(self) -> bool: ...
    @typing.overload
    def start(self, msec: int, obj: PySide2.QtCore.QObject): ...
    @typing.overload
    def start(self, msec: int, timerType: PySide2.QtCore.Qt.TimerType, obj: PySide2.QtCore.QObject): ...
    def stop(self): ...
    def timerId(self) -> int: ...


class QBitArray(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QBitArray): ...
    @typing.overload
    def __init__(self, size: int, val: bool=...): ...

    def __and__(self, arg__2: PySide2.QtCore.QBitArray) -> PySide2.QtCore.QBitArray: ...
    def __copy__(self): ...
    def __iand__(self, arg__1: PySide2.QtCore.QBitArray) -> PySide2.QtCore.QBitArray: ...
    def __invert__(self) -> PySide2.QtCore.QBitArray: ...
    def __ior__(self, arg__1: PySide2.QtCore.QBitArray) -> PySide2.QtCore.QBitArray: ...
    def __ixor__(self, arg__1: PySide2.QtCore.QBitArray) -> PySide2.QtCore.QBitArray: ...
    def __or__(self, arg__2: PySide2.QtCore.QBitArray) -> PySide2.QtCore.QBitArray: ...
    def __xor__(self, arg__2: PySide2.QtCore.QBitArray) -> PySide2.QtCore.QBitArray: ...
    def at(self, i: int) -> bool: ...
    def bits(self) -> str: ...
    def clear(self): ...
    def clearBit(self, i: int): ...
    @typing.overload
    def count(self) -> int: ...
    @typing.overload
    def count(self, on: bool) -> int: ...
    @typing.overload
    def fill(self, val: bool, first: int, last: int): ...
    @typing.overload
    def fill(self, val: bool, size: int=...) -> bool: ...
    @staticmethod
    def fromBits(data: str, len: int) -> PySide2.QtCore.QBitArray: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    def resize(self, size: int): ...
    @typing.overload
    def setBit(self, i: int): ...
    @typing.overload
    def setBit(self, i: int, val: bool): ...
    def size(self) -> int: ...
    def swap(self, other: PySide2.QtCore.QBitArray): ...
    def testBit(self, i: int) -> bool: ...
    def toggleBit(self, i: int) -> bool: ...
    def truncate(self, pos: int): ...


class QBuffer(PySide2.QtCore.QIODevice):

    @typing.overload
    def __init__(self, buf: PySide2.QtCore.QByteArray, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def atEnd(self) -> bool: ...
    def buffer(self) -> PySide2.QtCore.QByteArray: ...
    def canReadLine(self) -> bool: ...
    def close(self): ...
    def connectNotify(self, arg__1: PySide2.QtCore.QMetaMethod): ...
    def data(self) -> PySide2.QtCore.QByteArray: ...
    def disconnectNotify(self, arg__1: PySide2.QtCore.QMetaMethod): ...
    def open(self, openMode: PySide2.QtCore.QIODevice.OpenMode) -> bool: ...
    def pos(self) -> int: ...
    def readData(self, data: str, maxlen: int) -> int: ...
    def seek(self, off: int) -> bool: ...
    def setBuffer(self, a: PySide2.QtCore.QByteArray): ...
    def setData(self, data: PySide2.QtCore.QByteArray): ...
    def size(self) -> int: ...
    def writeData(self, data: str, len: int) -> int: ...


class QByteArray(Shiboken.Object):

    class Base64Option(object): ...
    OmitTrailingEquals       : Base64Option = ... # 0x2
    Base64UrlEncoding        : Base64Option = ... # 0x1
    KeepTrailingEquals       : Base64Option = ... # 0x0
    Base64Encoding           : Base64Option = ... # 0x0

    class Base64Options(object): ...

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1: bytearray): ...
    @typing.overload
    def __init__(self, arg__1: str): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, size: int, c: Char): ...

    @typing.overload
    def __add__(self, a2: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def __add__(self, a2: Char) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def __add__(self, arg__1: bytearray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def __add__(self, arg__1: str): ...
    def __copy__(self): ...
    @typing.overload
    def __iadd__(self, a: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def __iadd__(self, arg__1: bytearray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def __iadd__(self, c: Char) -> PySide2.QtCore.QByteArray: ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def __str__(self) -> object: ...
    @typing.overload
    def append(self, a: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def append(self, c: Char) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def append(self, count: int, c: Char) -> PySide2.QtCore.QByteArray: ...
    def at(self, i: int) -> Char: ...
    def back(self) -> Char: ...
    def capacity(self) -> int: ...
    def cbegin(self) -> str: ...
    def cend(self) -> str: ...
    def chop(self, n: int): ...
    def chopped(self, len: int) -> PySide2.QtCore.QByteArray: ...
    def clear(self): ...
    @typing.overload
    def compare(self, a: PySide2.QtCore.QByteArray, cs: PySide2.QtCore.Qt.CaseSensitivity=...) -> int: ...
    @typing.overload
    def compare(self, c: str, cs: PySide2.QtCore.Qt.CaseSensitivity=...) -> int: ...
    @typing.overload
    def contains(self, a: PySide2.QtCore.QByteArray) -> bool: ...
    @typing.overload
    def contains(self, c: Char) -> bool: ...
    @typing.overload
    def count(self) -> int: ...
    @typing.overload
    def count(self, a: PySide2.QtCore.QByteArray) -> int: ...
    @typing.overload
    def count(self, c: Char) -> int: ...
    def data(self) -> str: ...
    @typing.overload
    def endsWith(self, a: PySide2.QtCore.QByteArray) -> bool: ...
    @typing.overload
    def endsWith(self, c: Char) -> bool: ...
    def fill(self, c: Char, size: int=...) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    @staticmethod
    def fromBase64(base64: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    @staticmethod
    def fromBase64(base64: PySide2.QtCore.QByteArray, options: PySide2.QtCore.QByteArray.Base64Options) -> PySide2.QtCore.QByteArray: ...
    @staticmethod
    def fromHex(hexEncoded: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @staticmethod
    def fromPercentEncoding(pctEncoded: PySide2.QtCore.QByteArray, percent: Char=...) -> PySide2.QtCore.QByteArray: ...
    @staticmethod
    def fromRawData(arg__1: str, size: int) -> PySide2.QtCore.QByteArray: ...
    def front(self) -> Char: ...
    def indexOf(self, a: PySide2.QtCore.QByteArray, from_: int=...) -> int: ...
    @typing.overload
    def insert(self, i: int, a: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def insert(self, i: int, count: int, c: Char) -> PySide2.QtCore.QByteArray: ...
    def isEmpty(self) -> bool: ...
    def isLower(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isSharedWith(self, other: PySide2.QtCore.QByteArray) -> bool: ...
    def isUpper(self) -> bool: ...
    def lastIndexOf(self, a: PySide2.QtCore.QByteArray, from_: int=...) -> int: ...
    def left(self, len: int) -> PySide2.QtCore.QByteArray: ...
    def leftJustified(self, width: int, fill: Char=..., truncate: bool=...) -> PySide2.QtCore.QByteArray: ...
    def length(self) -> int: ...
    def mid(self, index: int, len: int=...) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    @staticmethod
    def number(arg__1: float, f: Char=..., prec: int=...) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    @staticmethod
    def number(arg__1: int, base: int=...) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    @staticmethod
    def number(arg__1: int, base: int=...) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def prepend(self, a: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def prepend(self, c: Char) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def prepend(self, count: int, c: Char) -> PySide2.QtCore.QByteArray: ...
    def remove(self, index: int, len: int) -> PySide2.QtCore.QByteArray: ...
    def repeated(self, times: int) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def replace(self, before: PySide2.QtCore.QByteArray, after: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def replace(self, before: str, after: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def replace(self, before: Char, after: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def replace(self, before: Char, after: Char) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def replace(self, index: int, len: int, s: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    def reserve(self, size: int): ...
    def resize(self, size: int): ...
    def right(self, len: int) -> PySide2.QtCore.QByteArray: ...
    def rightJustified(self, width: int, fill: Char=..., truncate: bool=...) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def setNum(self, arg__1: float, f: Char=..., prec: int=...) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def setNum(self, arg__1: int, base: int=...) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def setNum(self, arg__1: int, base: int=...) -> PySide2.QtCore.QByteArray: ...
    def setRawData(self, a: str, n: int) -> PySide2.QtCore.QByteArray: ...
    def shrink_to_fit(self): ...
    def simplified(self) -> PySide2.QtCore.QByteArray: ...
    def size(self) -> int: ...
    def split(self, sep: Char) -> List[PySide2.QtCore.QByteArray]: ...
    def squeeze(self): ...
    @typing.overload
    def startsWith(self, a: PySide2.QtCore.QByteArray) -> bool: ...
    @typing.overload
    def startsWith(self, c: Char) -> bool: ...
    def swap(self, other: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def toBase64(self) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def toBase64(self, options: PySide2.QtCore.QByteArray.Base64Options) -> PySide2.QtCore.QByteArray: ...
    def toDouble(self, ok: Optional[bool]=...) -> float: ...
    def toFloat(self, ok: Optional[bool]=...) -> float: ...
    @typing.overload
    def toHex(self) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def toHex(self, separator: Char) -> PySide2.QtCore.QByteArray: ...
    def toInt(self, ok: Optional[bool]=..., base: int=...) -> int: ...
    def toLong(self, ok: Optional[bool]=..., base: int=...) -> int: ...
    def toLongLong(self, ok: Optional[bool]=..., base: int=...) -> int: ...
    def toLower(self) -> PySide2.QtCore.QByteArray: ...
    def toPercentEncoding(self, exclude: PySide2.QtCore.QByteArray=..., include: PySide2.QtCore.QByteArray=..., percent: Char=...) -> PySide2.QtCore.QByteArray: ...
    def toShort(self, ok: Optional[bool]=..., base: int=...) -> int: ...
    def toUInt(self, ok: Optional[bool]=..., base: int=...) -> int: ...
    def toULong(self, ok: Optional[bool]=..., base: int=...) -> int: ...
    def toULongLong(self, ok: Optional[bool]=..., base: int=...) -> int: ...
    def toUShort(self, ok: Optional[bool]=..., base: int=...) -> int: ...
    def toUpper(self) -> PySide2.QtCore.QByteArray: ...
    def trimmed(self) -> PySide2.QtCore.QByteArray: ...
    def truncate(self, pos: int): ...


class QByteArrayMatcher(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QByteArrayMatcher): ...
    @typing.overload
    def __init__(self, pattern: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, pattern: str, length: int): ...

    def __copy__(self): ...
    @typing.overload
    def indexIn(self, ba: PySide2.QtCore.QByteArray, from_: int=...) -> int: ...
    @typing.overload
    def indexIn(self, str: str, len: int, from_: int=...) -> int: ...
    def pattern(self) -> PySide2.QtCore.QByteArray: ...
    def setPattern(self, pattern: PySide2.QtCore.QByteArray): ...


class QCborArray(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QCborArray): ...

    def __add__(self, v: PySide2.QtCore.QCborValue) -> PySide2.QtCore.QCborArray: ...
    def __copy__(self): ...
    def __iadd__(self, v: PySide2.QtCore.QCborValue) -> PySide2.QtCore.QCborArray: ...
    def __lshift__(self, v: PySide2.QtCore.QCborValue) -> PySide2.QtCore.QCborArray: ...
    def append(self, value: PySide2.QtCore.QCborValue): ...
    def at(self, i: int) -> PySide2.QtCore.QCborValue: ...
    def clear(self): ...
    def compare(self, other: PySide2.QtCore.QCborArray) -> int: ...
    def contains(self, value: PySide2.QtCore.QCborValue) -> bool: ...
    def empty(self) -> bool: ...
    def first(self) -> PySide2.QtCore.QCborValue: ...
    @staticmethod
    def fromJsonArray(array: PySide2.QtCore.QJsonArray) -> PySide2.QtCore.QCborArray: ...
    @staticmethod
    def fromStringList(list: List[str]) -> PySide2.QtCore.QCborArray: ...
    @staticmethod
    def fromVariantList(list: List[Any]) -> PySide2.QtCore.QCborArray: ...
    def insert(self, i: int, value: PySide2.QtCore.QCborValue): ...
    def isEmpty(self) -> bool: ...
    def last(self) -> PySide2.QtCore.QCborValue: ...
    def pop_back(self): ...
    def pop_front(self): ...
    def prepend(self, value: PySide2.QtCore.QCborValue): ...
    def push_back(self, t: PySide2.QtCore.QCborValue): ...
    def push_front(self, t: PySide2.QtCore.QCborValue): ...
    def removeAt(self, i: int): ...
    def removeFirst(self): ...
    def removeLast(self): ...
    def size(self) -> int: ...
    def swap(self, other: PySide2.QtCore.QCborArray): ...
    def takeAt(self, i: int) -> PySide2.QtCore.QCborValue: ...
    def takeFirst(self) -> PySide2.QtCore.QCborValue: ...
    def takeLast(self) -> PySide2.QtCore.QCborValue: ...
    def toCborValue(self) -> PySide2.QtCore.QCborValue: ...
    def toJsonArray(self) -> PySide2.QtCore.QJsonArray: ...
    def toVariantList(self) -> List[Any]: ...


class QCborError(Shiboken.Object):

    class Code(object): ...
    UnknownType              : Code = ... # 0x103
    IllegalType              : Code = ... # 0x104
    UnknownError             : Code = ... # 0x1
    IllegalNumber            : Code = ... # 0x105
    InvalidUtf8String        : Code = ... # 0x204
    AdvancePastEnd           : Code = ... # 0x3
    GarbageAtEnd             : Code = ... # 0x100
    NestingTooDeep           : Code = ... # 0x401
    UnsupportedType          : Code = ... # 0x402
    EndOfFile                : Code = ... # 0x101
    UnexpectedBreak          : Code = ... # 0x102
    IllegalSimpleType        : Code = ... # 0x106
    DataTooLarge             : Code = ... # 0x400
    NoError                  : Code = ... # 0x0
    InputOutputError         : Code = ... # 0x4

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QCborError: PySide2.QtCore.QCborError): ...

    def __copy__(self): ...
    def toString(self) -> str: ...


class QCborKnownTags(object): ...


class QCborMap(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QCborMap): ...

    def __copy__(self): ...
    def clear(self): ...
    def compare(self, other: PySide2.QtCore.QCborMap) -> int: ...
    @typing.overload
    def contains(self, key: PySide2.QtCore.QCborValue) -> bool: ...
    @typing.overload
    def contains(self, key: str) -> bool: ...
    @typing.overload
    def contains(self, key: int) -> bool: ...
    def empty(self) -> bool: ...
    @staticmethod
    def fromJsonObject(o: Dict[str, PySide2.QtCore.QJsonValue]) -> PySide2.QtCore.QCborMap: ...
    @staticmethod
    def fromVariantHash(hash: Dict) -> PySide2.QtCore.QCborMap: ...
    @staticmethod
    def fromVariantMap(map: Dict) -> PySide2.QtCore.QCborMap: ...
    def isEmpty(self) -> bool: ...
    def keys(self) -> List[PySide2.QtCore.QCborValue]: ...
    @typing.overload
    def remove(self, key: PySide2.QtCore.QCborValue): ...
    @typing.overload
    def remove(self, key: str): ...
    @typing.overload
    def remove(self, key: int): ...
    def size(self) -> int: ...
    def swap(self, other: PySide2.QtCore.QCborMap): ...
    @typing.overload
    def take(self, key: PySide2.QtCore.QCborValue) -> PySide2.QtCore.QCborValue: ...
    @typing.overload
    def take(self, key: str) -> PySide2.QtCore.QCborValue: ...
    @typing.overload
    def take(self, key: int) -> PySide2.QtCore.QCborValue: ...
    def toCborValue(self) -> PySide2.QtCore.QCborValue: ...
    def toJsonObject(self) -> Dict[str, PySide2.QtCore.QJsonValue]: ...
    def toVariantHash(self) -> Dict: ...
    def toVariantMap(self) -> Dict: ...
    @typing.overload
    def value(self, key: PySide2.QtCore.QCborValue) -> PySide2.QtCore.QCborValue: ...
    @typing.overload
    def value(self, key: str) -> PySide2.QtCore.QCborValue: ...
    @typing.overload
    def value(self, key: int) -> PySide2.QtCore.QCborValue: ...


class QCborParserError(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QCborParserError: PySide2.QtCore.QCborParserError): ...

    def __copy__(self): ...
    def errorString(self) -> str: ...


class QCborSimpleType(object): ...


class QCborStreamReader(Shiboken.Object):

    class StringResultCode(object): ...
    Error                    : StringResultCode = ... # -0x1
    EndOfString              : StringResultCode = ... # 0x0
    Ok                       : StringResultCode = ... # 0x1

    class Type(object): ...
    ByteArray                : Type = ... # 0x40
    Float16                  : Type = ... # 0xf9
    Invalid                  : Type = ... # 0xff
    SimpleType               : Type = ... # 0xe0
    TextString               : Type = ... # 0x60
    Array                    : Type = ... # 0x80
    Tag                      : Type = ... # 0xc0
    Map                      : Type = ... # 0xa0
    Double                   : Type = ... # 0xfb
    UnsignedInteger          : Type = ... # 0x0
    HalfFloat                : Type = ... # 0xf9
    String                   : Type = ... # 0x60
    NegativeInteger          : Type = ... # 0x20
    Float                    : Type = ... # 0xfa
    ByteString               : Type = ... # 0x40

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, data: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, data: int, len: int): ...
    @typing.overload
    def __init__(self, data: str, len: int): ...
    @typing.overload
    def __init__(self, device: PySide2.QtCore.QIODevice): ...

    @typing.overload
    def addData(self, data: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def addData(self, data: int, len: int): ...
    @typing.overload
    def addData(self, data: str, len: int): ...
    def clear(self): ...
    def containerDepth(self) -> int: ...
    def currentOffset(self) -> int: ...
    def currentStringChunkSize(self) -> int: ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def enterContainer(self) -> bool: ...
    def hasNext(self) -> bool: ...
    def isArray(self) -> bool: ...
    def isBool(self) -> bool: ...
    def isByteArray(self) -> bool: ...
    def isContainer(self) -> bool: ...
    def isDouble(self) -> bool: ...
    def isFalse(self) -> bool: ...
    def isFloat(self) -> bool: ...
    def isFloat16(self) -> bool: ...
    def isInteger(self) -> bool: ...
    def isInvalid(self) -> bool: ...
    def isLengthKnown(self) -> bool: ...
    def isMap(self) -> bool: ...
    def isNegativeInteger(self) -> bool: ...
    def isNull(self) -> bool: ...
    @typing.overload
    def isSimpleType(self) -> bool: ...
    @typing.overload
    def isSimpleType(self, st: PySide2.QtCore.QCborSimpleType) -> bool: ...
    def isString(self) -> bool: ...
    def isTag(self) -> bool: ...
    def isTrue(self) -> bool: ...
    def isUndefined(self) -> bool: ...
    def isUnsignedInteger(self) -> bool: ...
    def isValid(self) -> bool: ...
    def lastError(self) -> PySide2.QtCore.QCborError: ...
    def leaveContainer(self) -> bool: ...
    def length(self) -> int: ...
    def next(self, maxRecursion: int=...) -> bool: ...
    def parentContainerType(self) -> PySide2.QtCore.QCborStreamReader.Type: ...
    def readByteArray(self) -> AnyStr: ...
    def readString(self) -> AnyStr: ...
    def reparse(self): ...
    def reset(self): ...
    def setDevice(self, device: PySide2.QtCore.QIODevice): ...
    def toBool(self) -> bool: ...
    def toDouble(self) -> float: ...
    def toFloat(self) -> float: ...
    def toInteger(self) -> int: ...
    def toSimpleType(self) -> PySide2.QtCore.QCborSimpleType: ...
    def toUnsignedInteger(self) -> int: ...
    def type(self) -> PySide2.QtCore.QCborStreamReader.Type: ...


class QCborStreamWriter(Shiboken.Object):

    @typing.overload
    def __init__(self, data: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, device: PySide2.QtCore.QIODevice): ...

    @typing.overload
    def append(self, b: bool): ...
    @typing.overload
    def append(self, ba: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def append(self, d: float): ...
    @typing.overload
    def append(self, f: float): ...
    @typing.overload
    def append(self, i: int): ...
    @typing.overload
    def append(self, i: int): ...
    @typing.overload
    def append(self, st: PySide2.QtCore.QCborSimpleType): ...
    @typing.overload
    def append(self, str: str, size: int=...): ...
    @typing.overload
    def append(self, tag: PySide2.QtCore.QCborKnownTags): ...
    @typing.overload
    def append(self, u: int): ...
    @typing.overload
    def append(self, u: int): ...
    def appendByteString(self, data: str, len: int): ...
    def appendNull(self): ...
    def appendTextString(self, utf8: str, len: int): ...
    def appendUndefined(self): ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def endArray(self) -> bool: ...
    def endMap(self) -> bool: ...
    def setDevice(self, device: PySide2.QtCore.QIODevice): ...
    @typing.overload
    def startArray(self): ...
    @typing.overload
    def startArray(self, count: int): ...
    @typing.overload
    def startMap(self): ...
    @typing.overload
    def startMap(self, count: int): ...


class QCborStringResultByteArray(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QCborStringResultByteArray: PySide2.QtCore.QCborStringResultByteArray): ...

    def __copy__(self): ...


class QCborStringResultString(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QCborStringResultString: PySide2.QtCore.QCborStringResultString): ...

    def __copy__(self): ...


class QCborValue(Shiboken.Object):

    class DiagnosticNotationOption(object): ...
    Compact                  : DiagnosticNotationOption = ... # 0x0
    LineWrapped              : DiagnosticNotationOption = ... # 0x1
    ExtendedFormat           : DiagnosticNotationOption = ... # 0x2

    class DiagnosticNotationOptions(object): ...

    class EncodingOption(object): ...
    NoTransformation         : EncodingOption = ... # 0x0
    SortKeysInMaps           : EncodingOption = ... # 0x1
    UseFloat16               : EncodingOption = ... # 0x6
    UseFloat                 : EncodingOption = ... # 0x2
    UseIntegers              : EncodingOption = ... # 0x8

    class EncodingOptions(object): ...

    class Type(object): ...
    ByteArray                : Type = ... # 0x40
    Uuid                     : Type = ... # 0x10025
    Invalid                  : Type = ... # -0x1
    SimpleType               : Type = ... # 0x100
    RegularExpression        : Type = ... # 0x10023
    True_                    : Type = ... # 0x115
    Array                    : Type = ... # 0x80
    Integer                  : Type = ... # 0x0
    False_                   : Type = ... # 0x114
    Tag                      : Type = ... # 0xc0
    Undefined                : Type = ... # 0x117
    Map                      : Type = ... # 0xa0
    Url                      : Type = ... # 0x10020
    Double                   : Type = ... # 0x202
    DateTime                 : Type = ... # 0x10000
    String                   : Type = ... # 0x60
    Null                     : Type = ... # 0x116

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, a: PySide2.QtCore.QCborArray): ...
    @typing.overload
    def __init__(self, b_: bool): ...
    @typing.overload
    def __init__(self, ba: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, dt: PySide2.QtCore.QDateTime): ...
    @typing.overload
    def __init__(self, i: int): ...
    @typing.overload
    def __init__(self, i: int): ...
    @typing.overload
    def __init__(self, m: PySide2.QtCore.QCborMap): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QCborValue): ...
    @typing.overload
    def __init__(self, rx: PySide2.QtCore.QRegularExpression): ...
    @typing.overload
    def __init__(self, s: str): ...
    @typing.overload
    def __init__(self, s: str): ...
    @typing.overload
    def __init__(self, st: PySide2.QtCore.QCborSimpleType): ...
    @typing.overload
    def __init__(self, t_: PySide2.QtCore.QCborKnownTags, tv: PySide2.QtCore.QCborValue=...): ...
    @typing.overload
    def __init__(self, t_: PySide2.QtCore.QCborValue.Type): ...
    @typing.overload
    def __init__(self, u: int): ...
    @typing.overload
    def __init__(self, url: PySide2.QtCore.QUrl): ...
    @typing.overload
    def __init__(self, uuid: PySide2.QtCore.QUuid): ...
    @typing.overload
    def __init__(self, v: float): ...

    def __copy__(self): ...
    def compare(self, other: PySide2.QtCore.QCborValue) -> int: ...
    @typing.overload
    @staticmethod
    def fromCbor(ba: PySide2.QtCore.QByteArray, error: Optional[PySide2.QtCore.QCborParserError]=...) -> PySide2.QtCore.QCborValue: ...
    @typing.overload
    @staticmethod
    def fromCbor(data: int, len: int, error: Optional[PySide2.QtCore.QCborParserError]=...) -> PySide2.QtCore.QCborValue: ...
    @typing.overload
    @staticmethod
    def fromCbor(data: str, len: int, error: Optional[PySide2.QtCore.QCborParserError]=...) -> PySide2.QtCore.QCborValue: ...
    @typing.overload
    @staticmethod
    def fromCbor(reader: PySide2.QtCore.QCborStreamReader) -> PySide2.QtCore.QCborValue: ...
    @staticmethod
    def fromJsonValue(v: PySide2.QtCore.QJsonValue) -> PySide2.QtCore.QCborValue: ...
    @staticmethod
    def fromVariant(variant: Any) -> PySide2.QtCore.QCborValue: ...
    def isArray(self) -> bool: ...
    def isBool(self) -> bool: ...
    def isByteArray(self) -> bool: ...
    def isContainer(self) -> bool: ...
    def isDateTime(self) -> bool: ...
    def isDouble(self) -> bool: ...
    def isFalse(self) -> bool: ...
    def isInteger(self) -> bool: ...
    def isInvalid(self) -> bool: ...
    def isMap(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isRegularExpression(self) -> bool: ...
    @typing.overload
    def isSimpleType(self) -> bool: ...
    @typing.overload
    def isSimpleType(self, st: PySide2.QtCore.QCborSimpleType) -> bool: ...
    def isString(self) -> bool: ...
    def isTag(self) -> bool: ...
    def isTrue(self) -> bool: ...
    def isUndefined(self) -> bool: ...
    def isUrl(self) -> bool: ...
    def isUuid(self) -> bool: ...
    def swap(self, other: PySide2.QtCore.QCborValue): ...
    def taggedValue(self, defaultValue: PySide2.QtCore.QCborValue=...) -> PySide2.QtCore.QCborValue: ...
    @typing.overload
    def toArray(self) -> PySide2.QtCore.QCborArray: ...
    @typing.overload
    def toArray(self, defaultValue: PySide2.QtCore.QCborArray) -> PySide2.QtCore.QCborArray: ...
    def toBool(self, defaultValue: bool=...) -> bool: ...
    def toByteArray(self, defaultValue: PySide2.QtCore.QByteArray=...) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def toCbor(self, opt: PySide2.QtCore.QCborValue.EncodingOptions=...) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def toCbor(self, writer: PySide2.QtCore.QCborStreamWriter, opt: PySide2.QtCore.QCborValue.EncodingOptions=...): ...
    def toDateTime(self, defaultValue: PySide2.QtCore.QDateTime=...) -> PySide2.QtCore.QDateTime: ...
    def toDiagnosticNotation(self, opts: PySide2.QtCore.QCborValue.DiagnosticNotationOptions=...) -> str: ...
    def toDouble(self, defaultValue: float=...) -> float: ...
    def toInteger(self, defaultValue: int=...) -> int: ...
    def toJsonValue(self) -> PySide2.QtCore.QJsonValue: ...
    @typing.overload
    def toMap(self) -> PySide2.QtCore.QCborMap: ...
    @typing.overload
    def toMap(self, defaultValue: PySide2.QtCore.QCborMap) -> PySide2.QtCore.QCborMap: ...
    def toRegularExpression(self, defaultValue: PySide2.QtCore.QRegularExpression=...) -> PySide2.QtCore.QRegularExpression: ...
    def toSimpleType(self, defaultValue: PySide2.QtCore.QCborSimpleType=...) -> PySide2.QtCore.QCborSimpleType: ...
    def toString(self, defaultValue: str=...) -> str: ...
    def toUrl(self, defaultValue: PySide2.QtCore.QUrl=...) -> PySide2.QtCore.QUrl: ...
    def toUuid(self, defaultValue: PySide2.QtCore.QUuid=...) -> PySide2.QtCore.QUuid: ...
    def toVariant(self) -> Any: ...
    def type(self) -> PySide2.QtCore.QCborValue.Type: ...


class QChildEvent(PySide2.QtCore.QEvent):

    def __init__(self, type: PySide2.QtCore.QEvent.Type, child: PySide2.QtCore.QObject): ...

    def added(self) -> bool: ...
    def child(self) -> PySide2.QtCore.QObject: ...
    def polished(self) -> bool: ...
    def removed(self) -> bool: ...


class QCollator(Shiboken.Object):

    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QCollator): ...
    @typing.overload
    def __init__(self, locale: PySide2.QtCore.QLocale=...): ...

    def __call__(self, s1: str, s2: str) -> bool: ...
    def caseSensitivity(self) -> PySide2.QtCore.Qt.CaseSensitivity: ...
    @typing.overload
    def compare(self, s1: Char, len1: int, s2: Char, len2: int) -> int: ...
    @typing.overload
    def compare(self, s1: str, s2: str) -> int: ...
    @typing.overload
    def compare(self, s1: str, s2: str) -> int: ...
    def ignorePunctuation(self) -> bool: ...
    def locale(self) -> PySide2.QtCore.QLocale: ...
    def numericMode(self) -> bool: ...
    def setCaseSensitivity(self, cs: PySide2.QtCore.Qt.CaseSensitivity): ...
    def setIgnorePunctuation(self, on: bool): ...
    def setLocale(self, locale: PySide2.QtCore.QLocale): ...
    def setNumericMode(self, on: bool): ...
    def sortKey(self, string: str) -> PySide2.QtCore.QCollatorSortKey: ...
    def swap(self, other: PySide2.QtCore.QCollator): ...


class QCollatorSortKey(Shiboken.Object):

    def __init__(self, other: PySide2.QtCore.QCollatorSortKey): ...

    def compare(self, key: PySide2.QtCore.QCollatorSortKey) -> int: ...
    def swap(self, other: PySide2.QtCore.QCollatorSortKey): ...


class QCommandLineOption(Shiboken.Object):

    class Flag(object): ...
    ShortOptionStyle         : Flag = ... # 0x2
    HiddenFromHelp           : Flag = ... # 0x1

    class Flags(object): ...

    @typing.overload
    def __init__(self, name: str): ...
    @typing.overload
    def __init__(self, name: str, description: str, valueName: str=..., defaultValue: str=...): ...
    @typing.overload
    def __init__(self, names: List[str]): ...
    @typing.overload
    def __init__(self, names: List[str], description: str, valueName: str=..., defaultValue: str=...): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QCommandLineOption): ...

    def defaultValues(self) -> List[str]: ...
    def description(self) -> str: ...
    def flags(self) -> PySide2.QtCore.QCommandLineOption.Flags: ...
    def isHidden(self) -> bool: ...
    def names(self) -> List[str]: ...
    def setDefaultValue(self, defaultValue: str): ...
    def setDefaultValues(self, defaultValues: List[str]): ...
    def setDescription(self, description: str): ...
    def setFlags(self, aflags: PySide2.QtCore.QCommandLineOption.Flags): ...
    def setHidden(self, hidden: bool): ...
    def setValueName(self, name: str): ...
    def swap(self, other: PySide2.QtCore.QCommandLineOption): ...
    def valueName(self) -> str: ...


class QCommandLineParser(Shiboken.Object):

    class OptionsAfterPositionalArgumentsMode(object): ...
    ParseAsOptions           : OptionsAfterPositionalArgumentsMode = ... # 0x0
    ParseAsPositionalArguments: OptionsAfterPositionalArgumentsMode = ... # 0x1

    class SingleDashWordOptionMode(object): ...
    ParseAsCompactedShortOptions: SingleDashWordOptionMode = ... # 0x0
    ParseAsLongOptions       : SingleDashWordOptionMode = ... # 0x1

    def __init__(self): ...

    def addHelpOption(self) -> PySide2.QtCore.QCommandLineOption: ...
    def addOption(self, commandLineOption: PySide2.QtCore.QCommandLineOption) -> bool: ...
    def addOptions(self, options: List[PySide2.QtCore.QCommandLineOption]) -> bool: ...
    def addPositionalArgument(self, name: str, description: str, syntax: str=...): ...
    def addVersionOption(self) -> PySide2.QtCore.QCommandLineOption: ...
    def applicationDescription(self) -> str: ...
    def clearPositionalArguments(self): ...
    def errorText(self) -> str: ...
    def helpText(self) -> str: ...
    @typing.overload
    def isSet(self, name: str) -> bool: ...
    @typing.overload
    def isSet(self, option: PySide2.QtCore.QCommandLineOption) -> bool: ...
    def optionNames(self) -> List[str]: ...
    def parse(self, arguments: List[str]) -> bool: ...
    def positionalArguments(self) -> List[str]: ...
    @typing.overload
    def process(self, app: PySide2.QtCore.QCoreApplication): ...
    @typing.overload
    def process(self, arguments: List[str]): ...
    def setApplicationDescription(self, description: str): ...
    def setOptionsAfterPositionalArgumentsMode(self, mode: PySide2.QtCore.QCommandLineParser.OptionsAfterPositionalArgumentsMode): ...
    def setSingleDashWordOptionMode(self, parsingMode: PySide2.QtCore.QCommandLineParser.SingleDashWordOptionMode): ...
    def showHelp(self, exitCode: int=...): ...
    def showVersion(self): ...
    def unknownOptionNames(self) -> List[str]: ...
    @typing.overload
    def value(self, name: str) -> str: ...
    @typing.overload
    def value(self, option: PySide2.QtCore.QCommandLineOption) -> str: ...
    @typing.overload
    def values(self, name: str) -> List[str]: ...
    @typing.overload
    def values(self, option: PySide2.QtCore.QCommandLineOption) -> List[str]: ...


class QConcatenateTablesProxyModel(PySide2.QtCore.QAbstractItemModel):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def addSourceModel(self, sourceModel: PySide2.QtCore.QAbstractItemModel): ...
    def canDropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def columnCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    def data(self, index: PySide2.QtCore.QModelIndex, role: int=...) -> Any: ...
    def dropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def flags(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.Qt.ItemFlags: ...
    def headerData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, role: int=...) -> Any: ...
    def index(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex=...) -> PySide2.QtCore.QModelIndex: ...
    def itemData(self, proxyIndex: PySide2.QtCore.QModelIndex) -> Dict: ...
    def mapFromSource(self, sourceIndex: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def mapToSource(self, proxyIndex: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def mimeData(self, indexes: List[int]) -> PySide2.QtCore.QMimeData: ...
    def mimeTypes(self) -> List[str]: ...
    @typing.overload
    def parent(self) -> PySide2.QtCore.QObject: ...
    @typing.overload
    def parent(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def removeSourceModel(self, sourceModel: PySide2.QtCore.QAbstractItemModel): ...
    def rowCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    def setData(self, index: PySide2.QtCore.QModelIndex, value: Any, role: int=...) -> bool: ...
    def setItemData(self, index: PySide2.QtCore.QModelIndex, roles: Dict) -> bool: ...
    def span(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QSize: ...


class QCoreApplication(PySide2.QtCore.QObject):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1: List[str]): ...

    @staticmethod
    def addLibraryPath(arg__1: str): ...
    @staticmethod
    def applicationDirPath() -> str: ...
    @staticmethod
    def applicationFilePath() -> str: ...
    @staticmethod
    def applicationName() -> str: ...
    @staticmethod
    def applicationPid() -> int: ...
    @staticmethod
    def applicationVersion() -> str: ...
    @staticmethod
    def arguments() -> List[str]: ...
    @staticmethod
    def closingDown() -> bool: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    @staticmethod
    def eventDispatcher() -> PySide2.QtCore.QAbstractEventDispatcher: ...
    @staticmethod
    def exec_() -> int: ...
    @staticmethod
    def exit(retcode: int=...): ...
    @staticmethod
    def flush(): ...
    @staticmethod
    def hasPendingEvents() -> bool: ...
    def installNativeEventFilter(self, filterObj: PySide2.QtCore.QAbstractNativeEventFilter): ...
    @staticmethod
    def installTranslator(messageFile: PySide2.QtCore.QTranslator) -> bool: ...
    @staticmethod
    def instance() -> PySide2.QtCore.QCoreApplication: ...
    @staticmethod
    def isQuitLockEnabled() -> bool: ...
    @staticmethod
    def isSetuidAllowed() -> bool: ...
    @staticmethod
    def libraryPaths() -> List[str]: ...
    def notify(self, arg__1: PySide2.QtCore.QObject, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    @staticmethod
    def organizationDomain() -> str: ...
    @staticmethod
    def organizationName() -> str: ...
    @staticmethod
    def postEvent(receiver: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent, priority: int=...): ...
    @typing.overload
    @staticmethod
    def processEvents(flags: PySide2.QtCore.QEventLoop.ProcessEventsFlags, maxtime: int): ...
    @typing.overload
    @staticmethod
    def processEvents(flags: PySide2.QtCore.QEventLoop.ProcessEventsFlags=...): ...
    @staticmethod
    def quit(): ...
    @staticmethod
    def removeLibraryPath(arg__1: str): ...
    def removeNativeEventFilter(self, filterObj: PySide2.QtCore.QAbstractNativeEventFilter): ...
    @staticmethod
    def removePostedEvents(receiver: PySide2.QtCore.QObject, eventType: int=...): ...
    @staticmethod
    def removeTranslator(messageFile: PySide2.QtCore.QTranslator) -> bool: ...
    @staticmethod
    def sendEvent(receiver: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    @staticmethod
    def sendPostedEvents(receiver: Optional[PySide2.QtCore.QObject]=..., event_type: int=...): ...
    @staticmethod
    def setApplicationName(application: str): ...
    @staticmethod
    def setApplicationVersion(version: str): ...
    @staticmethod
    def setAttribute(attribute: PySide2.QtCore.Qt.ApplicationAttribute, on: bool=...): ...
    @staticmethod
    def setEventDispatcher(eventDispatcher: PySide2.QtCore.QAbstractEventDispatcher): ...
    @staticmethod
    def setLibraryPaths(arg__1: List[str]): ...
    @staticmethod
    def setOrganizationDomain(orgDomain: str): ...
    @staticmethod
    def setOrganizationName(orgName: str): ...
    @staticmethod
    def setQuitLockEnabled(enabled: bool): ...
    @staticmethod
    def setSetuidAllowed(allow: bool): ...
    @staticmethod
    def startingUp() -> bool: ...
    @staticmethod
    def testAttribute(attribute: PySide2.QtCore.Qt.ApplicationAttribute) -> bool: ...
    @staticmethod
    def translate(context: str, key: str, disambiguation: Optional[str]=..., n: int=...) -> str: ...


class QCryptographicHash(Shiboken.Object):

    class Algorithm(object): ...
    Sha3_512                 : Algorithm = ... # 0xe
    Sha384                   : Algorithm = ... # 0x5
    Sha256                   : Algorithm = ... # 0x4
    Sha512                   : Algorithm = ... # 0x6
    Sha3_256                 : Algorithm = ... # 0xc
    Keccak_256               : Algorithm = ... # 0x8
    Md4                      : Algorithm = ... # 0x0
    RealSha3_224             : Algorithm = ... # 0xb
    Sha1                     : Algorithm = ... # 0x2
    Sha224                   : Algorithm = ... # 0x3
    RealSha3_384             : Algorithm = ... # 0xd
    RealSha3_512             : Algorithm = ... # 0xe
    Sha3_224                 : Algorithm = ... # 0xb
    Keccak_512               : Algorithm = ... # 0xa
    Keccak_384               : Algorithm = ... # 0x9
    Sha3_384                 : Algorithm = ... # 0xd
    RealSha3_256             : Algorithm = ... # 0xc
    Md5                      : Algorithm = ... # 0x1
    Keccak_224               : Algorithm = ... # 0x7

    def __init__(self, method: PySide2.QtCore.QCryptographicHash.Algorithm): ...

    @typing.overload
    def addData(self, data: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def addData(self, data: str, length: int): ...
    @typing.overload
    def addData(self, device: PySide2.QtCore.QIODevice) -> bool: ...
    @staticmethod
    def hash(data: PySide2.QtCore.QByteArray, method: PySide2.QtCore.QCryptographicHash.Algorithm) -> PySide2.QtCore.QByteArray: ...
    @staticmethod
    def hashLength(method: PySide2.QtCore.QCryptographicHash.Algorithm) -> int: ...
    def reset(self): ...
    def result(self) -> PySide2.QtCore.QByteArray: ...


class QDataStream(Shiboken.Object):

    class ByteOrder(object): ...
    LittleEndian             : ByteOrder = ... # 0x1
    BigEndian                : ByteOrder = ... # 0x0

    class FloatingPointPrecision(object): ...
    SinglePrecision          : FloatingPointPrecision = ... # 0x0
    DoublePrecision          : FloatingPointPrecision = ... # 0x1

    class Status(object): ...
    WriteFailed              : Status = ... # 0x3
    ReadPastEnd              : Status = ... # 0x1
    Ok                       : Status = ... # 0x0
    ReadCorruptData          : Status = ... # 0x2

    class Version(object): ...
    Qt_5_13                  : Version = ... # 0x13
    Qt_4_3                   : Version = ... # 0x9
    Qt_4_2                   : Version = ... # 0x8
    Qt_5_3                   : Version = ... # 0xf
    Qt_5_8                   : Version = ... # 0x11
    Qt_2_1                   : Version = ... # 0x3
    Qt_2_0                   : Version = ... # 0x2
    Qt_5_4                   : Version = ... # 0x10
    Qt_4_9                   : Version = ... # 0xc
    Qt_5_6                   : Version = ... # 0x11
    Qt_5_7                   : Version = ... # 0x11
    Qt_5_0                   : Version = ... # 0xd
    Qt_5_1                   : Version = ... # 0xe
    Qt_5_2                   : Version = ... # 0xf
    Qt_4_8                   : Version = ... # 0xc
    Qt_5_12                  : Version = ... # 0x12
    Qt_3_0                   : Version = ... # 0x4
    Qt_1_0                   : Version = ... # 0x1
    Qt_DefaultCompiledVersion: Version = ... # 0x13
    Qt_5_11                  : Version = ... # 0x11
    Qt_4_5                   : Version = ... # 0xb
    Qt_4_4                   : Version = ... # 0xa
    Qt_4_7                   : Version = ... # 0xc
    Qt_4_6                   : Version = ... # 0xc
    Qt_4_1                   : Version = ... # 0x7
    Qt_5_9                   : Version = ... # 0x11
    Qt_3_3                   : Version = ... # 0x6
    Qt_5_10                  : Version = ... # 0x11
    Qt_5_5                   : Version = ... # 0x10
    Qt_3_1                   : Version = ... # 0x5
    Qt_4_0                   : Version = ... # 0x7

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QByteArray, flags: PySide2.QtCore.QIODevice.OpenMode): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QIODevice): ...

    @typing.overload
    def __lshift__(self, arg__1: str): ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QBitArray) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QCborArray) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QCborMap) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QCborValue) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QDate) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QDateTime) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QEasingCurve) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QJsonArray) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QJsonDocument) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QJsonValue) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QLine) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QLineF) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QLocale) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QMargins) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QPointF) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QRect) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QRectF) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QSize) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QSizeF) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QTime) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QUrl) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, arg__2: PySide2.QtCore.QUuid) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, re: PySide2.QtCore.QRegularExpression) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, regExp: PySide2.QtCore.QRegExp) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, tz: PySide2.QtCore.QTimeZone) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __lshift__(self, version: PySide2.QtCore.QVersionNumber) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QBitArray) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QCborArray) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QCborMap) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QCborValue) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QDate) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QDateTime) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QEasingCurve) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QJsonArray) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QJsonDocument) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QJsonValue) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QLine) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QLineF) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QLocale) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QMargins) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QPointF) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QRect) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QRectF) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QSize) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QSizeF) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QTime) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QUrl) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, arg__2: PySide2.QtCore.QUuid) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, re: PySide2.QtCore.QRegularExpression) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, regExp: PySide2.QtCore.QRegExp) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, tz: PySide2.QtCore.QTimeZone) -> PySide2.QtCore.QDataStream: ...
    @typing.overload
    def __rshift__(self, version: PySide2.QtCore.QVersionNumber) -> PySide2.QtCore.QDataStream: ...
    def abortTransaction(self): ...
    def atEnd(self) -> bool: ...
    def byteOrder(self) -> PySide2.QtCore.QDataStream.ByteOrder: ...
    def commitTransaction(self) -> bool: ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def floatingPointPrecision(self) -> PySide2.QtCore.QDataStream.FloatingPointPrecision: ...
    def readBool(self) -> bool: ...
    def readDouble(self) -> float: ...
    def readFloat(self) -> float: ...
    def readInt16(self) -> int: ...
    def readInt32(self) -> int: ...
    def readInt64(self) -> int: ...
    def readInt8(self) -> int: ...
    def readQChar(self) -> Char: ...
    def readQString(self) -> str: ...
    def readQStringList(self) -> List[str]: ...
    def readQVariant(self) -> Any: ...
    def readRawData(self, arg__1: str, len: int) -> int: ...
    def readString(self) -> str: ...
    def readUInt16(self) -> int: ...
    def readUInt32(self) -> int: ...
    def readUInt64(self) -> int: ...
    def readUInt8(self) -> int: ...
    def resetStatus(self): ...
    def rollbackTransaction(self): ...
    def setByteOrder(self, arg__1: PySide2.QtCore.QDataStream.ByteOrder): ...
    def setDevice(self, arg__1: PySide2.QtCore.QIODevice): ...
    def setFloatingPointPrecision(self, precision: PySide2.QtCore.QDataStream.FloatingPointPrecision): ...
    def setStatus(self, status: PySide2.QtCore.QDataStream.Status): ...
    def setVersion(self, arg__1: int): ...
    def skipRawData(self, len: int) -> int: ...
    def startTransaction(self): ...
    def status(self) -> PySide2.QtCore.QDataStream.Status: ...
    def unsetDevice(self): ...
    def version(self) -> int: ...
    def writeBool(self, arg__1: bool): ...
    def writeDouble(self, arg__1: float): ...
    def writeFloat(self, arg__1: float): ...
    def writeInt16(self, arg__1: int): ...
    def writeInt32(self, arg__1: int): ...
    def writeInt64(self, arg__1: int): ...
    def writeInt8(self, arg__1: Char): ...
    def writeQChar(self, arg__1: Char): ...
    def writeQString(self, arg__1: str): ...
    def writeQStringList(self, arg__1: List[str]): ...
    def writeQVariant(self, arg__1: Any): ...
    def writeRawData(self, arg__1: str, len: int) -> int: ...
    def writeString(self, arg__1: str): ...
    def writeUInt16(self, arg__1: int): ...
    def writeUInt32(self, arg__1: int): ...
    def writeUInt64(self, arg__1: int): ...
    def writeUInt8(self, arg__1: Char): ...


class QDate(Shiboken.Object):

    class MonthNameType(object): ...
    StandaloneFormat         : MonthNameType = ... # 0x1
    DateFormat               : MonthNameType = ... # 0x0

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QDate: PySide2.QtCore.QDate): ...
    @typing.overload
    def __init__(self, y: int, m: int, d: int): ...

    def __copy__(self): ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def addDays(self, days: int) -> PySide2.QtCore.QDate: ...
    def addMonths(self, months: int) -> PySide2.QtCore.QDate: ...
    def addYears(self, years: int) -> PySide2.QtCore.QDate: ...
    @staticmethod
    def currentDate() -> PySide2.QtCore.QDate: ...
    def day(self) -> int: ...
    def dayOfWeek(self) -> int: ...
    def dayOfYear(self) -> int: ...
    def daysInMonth(self) -> int: ...
    def daysInYear(self) -> int: ...
    def daysTo(self, arg__1: PySide2.QtCore.QDate) -> int: ...
    @staticmethod
    def fromJulianDay(jd_: int) -> PySide2.QtCore.QDate: ...
    @typing.overload
    @staticmethod
    def fromString(s: str, f: PySide2.QtCore.Qt.DateFormat=...) -> PySide2.QtCore.QDate: ...
    @typing.overload
    @staticmethod
    def fromString(s: str, format: str) -> PySide2.QtCore.QDate: ...
    def getDate(self, year: int, month: int, day: int): ...
    @staticmethod
    def isLeapYear(year: int) -> bool: ...
    def isNull(self) -> bool: ...
    @typing.overload
    @staticmethod
    def isValid() -> bool: ...
    @typing.overload
    @staticmethod
    def isValid(y: int, m: int, d: int) -> bool: ...
    @staticmethod
    def longDayName(weekday: int, type: PySide2.QtCore.QDate.MonthNameType=...) -> str: ...
    @staticmethod
    def longMonthName(month: int, type: PySide2.QtCore.QDate.MonthNameType=...) -> str: ...
    def month(self) -> int: ...
    def setDate(self, year: int, month: int, day: int) -> bool: ...
    @staticmethod
    def shortDayName(weekday: int, type: PySide2.QtCore.QDate.MonthNameType=...) -> str: ...
    @staticmethod
    def shortMonthName(month: int, type: PySide2.QtCore.QDate.MonthNameType=...) -> str: ...
    def toJulianDay(self) -> int: ...
    def toPython(self) -> object: ...
    @typing.overload
    def toString(self, f: PySide2.QtCore.Qt.DateFormat=...) -> str: ...
    @typing.overload
    def toString(self, format: str) -> str: ...
    def weekNumber(self, yearNum: Optional[int]=...) -> int: ...
    def year(self) -> int: ...


class QDateTime(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QDate): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QDate, arg__2: PySide2.QtCore.QTime, spec: PySide2.QtCore.Qt.TimeSpec=...): ...
    @typing.overload
    def __init__(self, arg__1: int, arg__2: int, arg__3: int, arg__4: int, arg__5: int, arg__6: int): ...
    @typing.overload
    def __init__(self, arg__1: int, arg__2: int, arg__3: int, arg__4: int, arg__5: int, arg__6: int, arg__7: int, arg__8: int=...): ...
    @typing.overload
    def __init__(self, date: PySide2.QtCore.QDate, time: PySide2.QtCore.QTime, spec: PySide2.QtCore.Qt.TimeSpec, offsetSeconds: int): ...
    @typing.overload
    def __init__(self, date: PySide2.QtCore.QDate, time: PySide2.QtCore.QTime, timeZone: PySide2.QtCore.QTimeZone): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QDateTime): ...

    def __copy__(self): ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def addDays(self, days: int) -> PySide2.QtCore.QDateTime: ...
    def addMSecs(self, msecs: int) -> PySide2.QtCore.QDateTime: ...
    def addMonths(self, months: int) -> PySide2.QtCore.QDateTime: ...
    def addSecs(self, secs: int) -> PySide2.QtCore.QDateTime: ...
    def addYears(self, years: int) -> PySide2.QtCore.QDateTime: ...
    @staticmethod
    def currentDateTime() -> PySide2.QtCore.QDateTime: ...
    @staticmethod
    def currentDateTimeUtc() -> PySide2.QtCore.QDateTime: ...
    @staticmethod
    def currentMSecsSinceEpoch() -> int: ...
    @staticmethod
    def currentSecsSinceEpoch() -> int: ...
    def date(self) -> PySide2.QtCore.QDate: ...
    def daysTo(self, arg__1: PySide2.QtCore.QDateTime) -> int: ...
    @typing.overload
    @staticmethod
    def fromMSecsSinceEpoch(msecs: int) -> PySide2.QtCore.QDateTime: ...
    @typing.overload
    @staticmethod
    def fromMSecsSinceEpoch(msecs: int, spec: PySide2.QtCore.Qt.TimeSpec, offsetFromUtc: int=...) -> PySide2.QtCore.QDateTime: ...
    @typing.overload
    @staticmethod
    def fromMSecsSinceEpoch(msecs: int, timeZone: PySide2.QtCore.QTimeZone) -> PySide2.QtCore.QDateTime: ...
    @typing.overload
    @staticmethod
    def fromSecsSinceEpoch(secs: int, spe: PySide2.QtCore.Qt.TimeSpec=..., offsetFromUtc: int=...) -> PySide2.QtCore.QDateTime: ...
    @typing.overload
    @staticmethod
    def fromSecsSinceEpoch(secs: int, timeZone: PySide2.QtCore.QTimeZone) -> PySide2.QtCore.QDateTime: ...
    @typing.overload
    @staticmethod
    def fromString(s: str, f: PySide2.QtCore.Qt.DateFormat=...) -> PySide2.QtCore.QDateTime: ...
    @typing.overload
    @staticmethod
    def fromString(s: str, format: str) -> PySide2.QtCore.QDateTime: ...
    @typing.overload
    @staticmethod
    def fromTime_t(secsSince1Jan1970UTC: int) -> PySide2.QtCore.QDateTime: ...
    @typing.overload
    @staticmethod
    def fromTime_t(secsSince1Jan1970UTC: int, spec: PySide2.QtCore.Qt.TimeSpec, offsetFromUtc: int=...) -> PySide2.QtCore.QDateTime: ...
    @typing.overload
    @staticmethod
    def fromTime_t(secsSince1Jan1970UTC: int, timeZone: PySide2.QtCore.QTimeZone) -> PySide2.QtCore.QDateTime: ...
    def isDaylightTime(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    def msecsTo(self, arg__1: PySide2.QtCore.QDateTime) -> int: ...
    def offsetFromUtc(self) -> int: ...
    def secsTo(self, arg__1: PySide2.QtCore.QDateTime) -> int: ...
    def setDate(self, date: PySide2.QtCore.QDate): ...
    def setMSecsSinceEpoch(self, msecs: int): ...
    def setOffsetFromUtc(self, offsetSeconds: int): ...
    def setSecsSinceEpoch(self, secs: int): ...
    def setTime(self, time: PySide2.QtCore.QTime): ...
    def setTimeSpec(self, spec: PySide2.QtCore.Qt.TimeSpec): ...
    def setTimeZone(self, toZone: PySide2.QtCore.QTimeZone): ...
    def setTime_t(self, secsSince1Jan1970UTC: int): ...
    def setUtcOffset(self, seconds: int): ...
    def swap(self, other: PySide2.QtCore.QDateTime): ...
    def time(self) -> PySide2.QtCore.QTime: ...
    def timeSpec(self) -> PySide2.QtCore.Qt.TimeSpec: ...
    def timeZone(self) -> PySide2.QtCore.QTimeZone: ...
    def timeZoneAbbreviation(self) -> str: ...
    def toLocalTime(self) -> PySide2.QtCore.QDateTime: ...
    def toMSecsSinceEpoch(self) -> int: ...
    def toOffsetFromUtc(self, offsetSeconds: int) -> PySide2.QtCore.QDateTime: ...
    def toPython(self) -> object: ...
    def toSecsSinceEpoch(self) -> int: ...
    @typing.overload
    def toString(self, f: PySide2.QtCore.Qt.DateFormat=...) -> str: ...
    @typing.overload
    def toString(self, format: str) -> str: ...
    def toTimeSpec(self, spec: PySide2.QtCore.Qt.TimeSpec) -> PySide2.QtCore.QDateTime: ...
    def toTimeZone(self, toZone: PySide2.QtCore.QTimeZone) -> PySide2.QtCore.QDateTime: ...
    def toTime_t(self) -> int: ...
    def toUTC(self) -> PySide2.QtCore.QDateTime: ...
    def utcOffset(self) -> int: ...


class QDir(Shiboken.Object):

    class Filter(object): ...
    Readable                 : Filter = ... # 0x10
    NoSymLinks               : Filter = ... # 0x8
    Hidden                   : Filter = ... # 0x100
    Executable               : Filter = ... # 0x40
    Dirs                     : Filter = ... # 0x1
    NoDot                    : Filter = ... # 0x2000
    AccessMask               : Filter = ... # 0x3f0
    Drives                   : Filter = ... # 0x4
    CaseSensitive            : Filter = ... # 0x800
    NoFilter                 : Filter = ... # -0x1
    AllDirs                  : Filter = ... # 0x400
    TypeMask                 : Filter = ... # 0xf
    Modified                 : Filter = ... # 0x80
    System                   : Filter = ... # 0x200
    AllEntries               : Filter = ... # 0x7
    Writable                 : Filter = ... # 0x20
    PermissionMask           : Filter = ... # 0x70
    NoDotDot                 : Filter = ... # 0x4000
    NoDotAndDotDot           : Filter = ... # 0x6000
    Files                    : Filter = ... # 0x2

    class Filters(object): ...

    class SortFlag(object): ...
    Time                     : SortFlag = ... # 0x1
    Type                     : SortFlag = ... # 0x80
    Reversed                 : SortFlag = ... # 0x8
    NoSort                   : SortFlag = ... # -0x1
    LocaleAware              : SortFlag = ... # 0x40
    Name                     : SortFlag = ... # 0x0
    SortByMask               : SortFlag = ... # 0x3
    IgnoreCase               : SortFlag = ... # 0x10
    Unsorted                 : SortFlag = ... # 0x3
    DirsLast                 : SortFlag = ... # 0x20
    DirsFirst                : SortFlag = ... # 0x4
    Size                     : SortFlag = ... # 0x2

    class SortFlags(object): ...

    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QDir): ...
    @typing.overload
    def __init__(self, path: str, nameFilter: str, sort: PySide2.QtCore.QDir.SortFlags=..., filter: PySide2.QtCore.QDir.Filters=...): ...
    @typing.overload
    def __init__(self, path: str=...): ...

    def __copy__(self): ...
    def __reduce__(self) -> object: ...
    def absoluteFilePath(self, fileName: str) -> str: ...
    def absolutePath(self) -> str: ...
    @staticmethod
    def addResourceSearchPath(path: str): ...
    @staticmethod
    def addSearchPath(prefix: str, path: str): ...
    def canonicalPath(self) -> str: ...
    def cd(self, dirName: str) -> bool: ...
    def cdUp(self) -> bool: ...
    @staticmethod
    def cleanPath(path: str) -> str: ...
    def count(self) -> int: ...
    @staticmethod
    def current() -> PySide2.QtCore.QDir: ...
    @staticmethod
    def currentPath() -> str: ...
    def dirName(self) -> str: ...
    @staticmethod
    def drives() -> List[PySide2.QtCore.QFileInfo]: ...
    @typing.overload
    def entryInfoList(self, filters: PySide2.QtCore.QDir.Filters=..., sort: PySide2.QtCore.QDir.SortFlags=...) -> List[PySide2.QtCore.QFileInfo]: ...
    @typing.overload
    def entryInfoList(self, nameFilters: List[str], filters: PySide2.QtCore.QDir.Filters=..., sort: PySide2.QtCore.QDir.SortFlags=...) -> List[PySide2.QtCore.QFileInfo]: ...
    @typing.overload
    def entryList(self, filters: PySide2.QtCore.QDir.Filters=..., sort: PySide2.QtCore.QDir.SortFlags=...) -> List[str]: ...
    @typing.overload
    def entryList(self, nameFilters: List[str], filters: PySide2.QtCore.QDir.Filters=..., sort: PySide2.QtCore.QDir.SortFlags=...) -> List[str]: ...
    @typing.overload
    def exists(self) -> bool: ...
    @typing.overload
    def exists(self, name: str) -> bool: ...
    def filePath(self, fileName: str) -> str: ...
    def filter(self) -> PySide2.QtCore.QDir.Filters: ...
    @staticmethod
    def fromNativeSeparators(pathName: str) -> str: ...
    @staticmethod
    def home() -> PySide2.QtCore.QDir: ...
    @staticmethod
    def homePath() -> str: ...
    def isAbsolute(self) -> bool: ...
    @staticmethod
    def isAbsolutePath(path: str) -> bool: ...
    def isEmpty(self, filters: PySide2.QtCore.QDir.Filters=...) -> bool: ...
    def isReadable(self) -> bool: ...
    def isRelative(self) -> bool: ...
    @staticmethod
    def isRelativePath(path: str) -> bool: ...
    def isRoot(self) -> bool: ...
    @staticmethod
    def listSeparator() -> Char: ...
    def makeAbsolute(self) -> bool: ...
    @typing.overload
    @staticmethod
    def match(filter: str, fileName: str) -> bool: ...
    @typing.overload
    @staticmethod
    def match(filters: List[str], fileName: str) -> bool: ...
    def mkdir(self, dirName: str) -> bool: ...
    def mkpath(self, dirPath: str) -> bool: ...
    def nameFilters(self) -> List[str]: ...
    @staticmethod
    def nameFiltersFromString(nameFilter: str) -> List[str]: ...
    def path(self) -> str: ...
    def refresh(self): ...
    def relativeFilePath(self, fileName: str) -> str: ...
    def remove(self, fileName: str) -> bool: ...
    def removeRecursively(self) -> bool: ...
    def rename(self, oldName: str, newName: str) -> bool: ...
    def rmdir(self, dirName: str) -> bool: ...
    def rmpath(self, dirPath: str) -> bool: ...
    @staticmethod
    def root() -> PySide2.QtCore.QDir: ...
    @staticmethod
    def rootPath() -> str: ...
    @staticmethod
    def searchPaths(prefix: str) -> List[str]: ...
    @staticmethod
    def separator() -> Char: ...
    @staticmethod
    def setCurrent(path: str) -> bool: ...
    def setFilter(self, filter: PySide2.QtCore.QDir.Filters): ...
    def setNameFilters(self, nameFilters: List[str]): ...
    def setPath(self, path: str): ...
    @staticmethod
    def setSearchPaths(prefix: str, searchPaths: List[str]): ...
    def setSorting(self, sort: PySide2.QtCore.QDir.SortFlags): ...
    def sorting(self) -> PySide2.QtCore.QDir.SortFlags: ...
    def swap(self, other: PySide2.QtCore.QDir): ...
    @staticmethod
    def temp() -> PySide2.QtCore.QDir: ...
    @staticmethod
    def tempPath() -> str: ...
    @staticmethod
    def toNativeSeparators(pathName: str) -> str: ...


class QDirIterator(Shiboken.Object):

    class IteratorFlag(object): ...
    FollowSymlinks           : IteratorFlag = ... # 0x1
    Subdirectories           : IteratorFlag = ... # 0x2
    NoIteratorFlags          : IteratorFlag = ... # 0x0

    class IteratorFlags(object): ...

    @typing.overload
    def __init__(self, dir: PySide2.QtCore.QDir, flags: PySide2.QtCore.QDirIterator.IteratorFlags=...): ...
    @typing.overload
    def __init__(self, path: str, filter: PySide2.QtCore.QDir.Filters, flags: PySide2.QtCore.QDirIterator.IteratorFlags=...): ...
    @typing.overload
    def __init__(self, path: str, flags: PySide2.QtCore.QDirIterator.IteratorFlags=...): ...
    @typing.overload
    def __init__(self, path: str, nameFilters: List[str], filters: PySide2.QtCore.QDir.Filters=..., flags: PySide2.QtCore.QDirIterator.IteratorFlags=...): ...

    def fileInfo(self) -> PySide2.QtCore.QFileInfo: ...
    def fileName(self) -> str: ...
    def filePath(self) -> str: ...
    def hasNext(self) -> bool: ...
    def next(self) -> str: ...
    def path(self) -> str: ...


class QDynamicPropertyChangeEvent(PySide2.QtCore.QEvent):

    def __init__(self, name: PySide2.QtCore.QByteArray): ...

    def propertyName(self) -> PySide2.QtCore.QByteArray: ...


class QEasingCurve(Shiboken.Object):

    class Type(object): ...
    InCubic                  : Type = ... # 0x5
    OutInBack                : Type = ... # 0x24
    InOutQuart               : Type = ... # 0xb
    OutQuart                 : Type = ... # 0xa
    InOutBounce              : Type = ... # 0x27
    OutInSine                : Type = ... # 0x14
    OutSine                  : Type = ... # 0x12
    InExpo                   : Type = ... # 0x15
    InQuad                   : Type = ... # 0x1
    InOutQuint               : Type = ... # 0xf
    InElastic                : Type = ... # 0x1d
    OutInQuad                : Type = ... # 0x4
    TCBSpline                : Type = ... # 0x2e
    OutInElastic             : Type = ... # 0x20
    InBack                   : Type = ... # 0x21
    InCurve                  : Type = ... # 0x29
    InOutExpo                : Type = ... # 0x17
    InOutSine                : Type = ... # 0x13
    InQuint                  : Type = ... # 0xd
    OutBounce                : Type = ... # 0x26
    OutInExpo                : Type = ... # 0x18
    BezierSpline             : Type = ... # 0x2d
    InOutQuad                : Type = ... # 0x3
    InSine                   : Type = ... # 0x11
    OutInCubic               : Type = ... # 0x8
    InOutBack                : Type = ... # 0x23
    InOutCirc                : Type = ... # 0x1b
    OutInCirc                : Type = ... # 0x1c
    OutElastic               : Type = ... # 0x1e
    OutInQuint               : Type = ... # 0x10
    NCurveTypes              : Type = ... # 0x30
    InBounce                 : Type = ... # 0x25
    InOutElastic             : Type = ... # 0x1f
    OutInQuart               : Type = ... # 0xc
    OutBack                  : Type = ... # 0x22
    CosineCurve              : Type = ... # 0x2c
    Custom                   : Type = ... # 0x2f
    OutInBounce              : Type = ... # 0x28
    Linear                   : Type = ... # 0x0
    InQuart                  : Type = ... # 0x9
    OutExpo                  : Type = ... # 0x16
    OutCirc                  : Type = ... # 0x1a
    InCirc                   : Type = ... # 0x19
    SineCurve                : Type = ... # 0x2b
    OutQuint                 : Type = ... # 0xe
    OutQuad                  : Type = ... # 0x2
    InOutCubic               : Type = ... # 0x7
    OutCubic                 : Type = ... # 0x6
    OutCurve                 : Type = ... # 0x2a

    @typing.overload
    def __init__(self, other: PySide2.QtCore.QEasingCurve): ...
    @typing.overload
    def __init__(self, type: PySide2.QtCore.QEasingCurve.Type=...): ...

    def __copy__(self): ...
    def addCubicBezierSegment(self, c1: PySide2.QtCore.QPointF, c2: PySide2.QtCore.QPointF, endPoint: PySide2.QtCore.QPointF): ...
    def addTCBSegment(self, nextPoint: PySide2.QtCore.QPointF, t: float, c: float, b: float): ...
    def amplitude(self) -> float: ...
    def customType(self) -> object: ...
    def overshoot(self) -> float: ...
    def period(self) -> float: ...
    def setAmplitude(self, amplitude: float): ...
    def setCustomType(self, arg__1: object): ...
    def setOvershoot(self, overshoot: float): ...
    def setPeriod(self, period: float): ...
    def setType(self, type: PySide2.QtCore.QEasingCurve.Type): ...
    def swap(self, other: PySide2.QtCore.QEasingCurve): ...
    def toCubicSpline(self) -> List[PySide2.QtCore.QPointF]: ...
    def type(self) -> PySide2.QtCore.QEasingCurve.Type: ...
    def valueForProgress(self, progress: float) -> float: ...


class QElapsedTimer(Shiboken.Object):

    class ClockType(object): ...
    PerformanceCounter       : ClockType = ... # 0x4
    MonotonicClock           : ClockType = ... # 0x1
    SystemTime               : ClockType = ... # 0x0
    MachAbsoluteTime         : ClockType = ... # 0x3
    TickCounter              : ClockType = ... # 0x2

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QElapsedTimer: PySide2.QtCore.QElapsedTimer): ...

    def __copy__(self): ...
    @staticmethod
    def clockType() -> PySide2.QtCore.QElapsedTimer.ClockType: ...
    def elapsed(self) -> int: ...
    def hasExpired(self, timeout: int) -> bool: ...
    def invalidate(self): ...
    @staticmethod
    def isMonotonic() -> bool: ...
    def isValid(self) -> bool: ...
    def msecsSinceReference(self) -> int: ...
    def msecsTo(self, other: PySide2.QtCore.QElapsedTimer) -> int: ...
    def nsecsElapsed(self) -> int: ...
    def restart(self) -> int: ...
    def secsTo(self, other: PySide2.QtCore.QElapsedTimer) -> int: ...
    def start(self): ...


class QEvent(Shiboken.Object):

    class Type(object): ...
    ChildPolished            : Type = ... # 0x45
    Hide                     : Type = ... # 0x12
    WindowIconChange         : Type = ... # 0x22
    ShowWindowRequest        : Type = ... # 0x49
    FocusOut                 : Type = ... # 0x9
    GraphicsSceneHoverLeave  : Type = ... # 0xa2
    WindowBlocked            : Type = ... # 0x67
    DynamicPropertyChange    : Type = ... # 0xaa
    WinEventAct              : Type = ... # 0x84
    MacGLClearDrawable       : Type = ... # 0xbf
    FontChange               : Type = ... # 0x61
    MouseButtonPress         : Type = ... # 0x2
    GraphicsSceneMouseDoubleClick: Type = ... # 0x9e
    PaletteChange            : Type = ... # 0x27
    GraphicsSceneDragEnter   : Type = ... # 0xa4
    NonClientAreaMouseButtonDblClick: Type = ... # 0xb0
    Polish                   : Type = ... # 0x4b
    NonClientAreaMouseMove   : Type = ... # 0xad
    StateMachineSignal       : Type = ... # 0xc0
    LocaleChange             : Type = ... # 0x58
    Pointer                  : Type = ... # 0xda
    ApplicationPaletteChange : Type = ... # 0x26
    MouseButtonDblClick      : Type = ... # 0x4
    ChildRemoved             : Type = ... # 0x47
    ZOrderChange             : Type = ... # 0x7e
    WindowUnblocked          : Type = ... # 0x68
    TouchUpdate              : Type = ... # 0xc3
    WindowTitleChange        : Type = ... # 0x21
    Leave                    : Type = ... # 0xb
    MouseButtonRelease       : Type = ... # 0x3
    FocusAboutToChange       : Type = ... # 0x17
    ActionRemoved            : Type = ... # 0x73
    GrabMouse                : Type = ... # 0xba
    WhatsThisClicked         : Type = ... # 0x76
    LeaveWhatsThisMode       : Type = ... # 0x7d
    DragEnter                : Type = ... # 0x3c
    ApplicationActivate      : Type = ... # 0x79
    Show                     : Type = ... # 0x11
    StatusTip                : Type = ... # 0x70
    Move                     : Type = ... # 0xd
    ApplicationFontChange    : Type = ... # 0x24
    TabletTrackingChange     : Type = ... # 0xdb
    TouchBegin               : Type = ... # 0xc2
    DeactivateControl        : Type = ... # 0x51
    Speech                   : Type = ... # 0x2a
    Quit                     : Type = ... # 0x14
    AcceptDropsChange        : Type = ... # 0x98
    TabletEnterProximity     : Type = ... # 0xab
    ActivationChange         : Type = ... # 0x63
    Create                   : Type = ... # 0xf
    Shortcut                 : Type = ... # 0x75
    EmbeddingControl         : Type = ... # 0x4f
    Clipboard                : Type = ... # 0x28
    ToolBarChange            : Type = ... # 0x78
    Destroy                  : Type = ... # 0x10
    WindowStateChange        : Type = ... # 0x69
    UngrabMouse              : Type = ... # 0xbb
    IconDrag                 : Type = ... # 0x60
    NativeGesture            : Type = ... # 0xc5
    ThemeChange              : Type = ... # 0xd2
    KeyboardLayoutChange     : Type = ... # 0xa9
    ContentsRectChange       : Type = ... # 0xb2
    DragResponse             : Type = ... # 0x40
    HoverMove                : Type = ... # 0x81
    GraphicsSceneContextMenu : Type = ... # 0x9f
    WindowChangeInternal     : Type = ... # 0xd7
    TabletPress              : Type = ... # 0x5c
    DragLeave                : Type = ... # 0x3e
    QueryWhatsThis           : Type = ... # 0x7b
    ChildAdded               : Type = ... # 0x44
    GraphicsSceneDragLeave   : Type = ... # 0xa6
    PolishRequest            : Type = ... # 0x4a
    Timer                    : Type = ... # 0x1
    TabletRelease            : Type = ... # 0x5d
    ApplicationLayoutDirectionChange: Type = ... # 0x25
    LanguageChange           : Type = ... # 0x59
    MacGLWindowChange        : Type = ... # 0xb3
    GraphicsSceneMouseRelease: Type = ... # 0x9d
    MetaCall                 : Type = ... # 0x2b
    GraphicsSceneWheel       : Type = ... # 0xa8
    ApplicationDeactivated   : Type = ... # 0x7a
    ActivateControl          : Type = ... # 0x50
    GraphicsSceneResize      : Type = ... # 0xb5
    StateMachineWrapped      : Type = ... # 0xc1
    TabletMove               : Type = ... # 0x57
    ApplicationActivated     : Type = ... # 0x79
    ThreadChange             : Type = ... # 0x16
    DeferredDelete           : Type = ... # 0x34
    IconTextChange           : Type = ... # 0x65
    Style                    : Type = ... # 0x5b
    ActionChanged            : Type = ... # 0x71
    GrabKeyboard             : Type = ... # 0xbc
    CursorChange             : Type = ... # 0xb7
    Paint                    : Type = ... # 0xc
    GraphicsSceneDrop        : Type = ... # 0xa7
    OkRequest                : Type = ... # 0x5e
    DragMove                 : Type = ... # 0x3d
    ShortcutOverride         : Type = ... # 0x33
    ReadOnlyChange           : Type = ... # 0x6a
    TouchCancel              : Type = ... # 0xd1
    ToolTipChange            : Type = ... # 0xb8
    UpdateRequest            : Type = ... # 0x4d
    NonClientAreaMouseButtonPress: Type = ... # 0xae
    Gesture                  : Type = ... # 0xc6
    GraphicsSceneHelp        : Type = ... # 0xa3
    MacSizeChange            : Type = ... # 0xb1
    StyleChange              : Type = ... # 0x64
    User                     : Type = ... # 0x3e8
    GraphicsSceneHoverMove   : Type = ... # 0xa1
    ApplicationStateChange   : Type = ... # 0xd6
    ShowToParent             : Type = ... # 0x1a
    NetworkReplyUpdated      : Type = ... # 0xb9
    ScrollPrepare            : Type = ... # 0xcc
    UngrabKeyboard           : Type = ... # 0xbd
    LayoutDirectionChange    : Type = ... # 0x5a
    GraphicsSceneMove        : Type = ... # 0xb6
    Scroll                   : Type = ... # 0xcd
    RequestSoftwareInputPanel: Type = ... # 0xc7
    MouseTrackingChange      : Type = ... # 0x6d
    ContextMenu              : Type = ... # 0x52
    MaxUser                  : Type = ... # 0xffff
    ToolTip                  : Type = ... # 0x6e
    HelpRequest              : Type = ... # 0x5f
    StyleAnimationUpdate     : Type = ... # 0xd5
    WindowActivate           : Type = ... # 0x18
    ZeroTimerEvent           : Type = ... # 0x9a
    WinIdChange              : Type = ... # 0xcb
    Close                    : Type = ... # 0x13
    FocusIn                  : Type = ... # 0x8
    ParentAboutToChange      : Type = ... # 0x83
    FutureCallOut            : Type = ... # 0xb4
    KeyRelease               : Type = ... # 0x7
    None_                    : Type = ... # 0x0
    SockAct                  : Type = ... # 0x32
    ApplicationWindowIconChange: Type = ... # 0x23
    FileOpen                 : Type = ... # 0x74
    TouchEnd                 : Type = ... # 0xc4
    SockClose                : Type = ... # 0xd3
    GestureOverride          : Type = ... # 0xca
    Wheel                    : Type = ... # 0x1f
    CloseSoftwareInputPanel  : Type = ... # 0xc8
    ModifiedChange           : Type = ... # 0x66
    HoverLeave               : Type = ... # 0x80
    Expose                   : Type = ... # 0xce
    OrientationChange        : Type = ... # 0xd0
    PlatformSurface          : Type = ... # 0xd9
    GraphicsSceneDragMove    : Type = ... # 0xa5
    LayoutRequest            : Type = ... # 0x4c
    HoverEnter               : Type = ... # 0x7f
    InputMethodQuery         : Type = ... # 0xcf
    UpdateLater              : Type = ... # 0x4e
    Resize                   : Type = ... # 0xe
    EnterWhatsThisMode       : Type = ... # 0x7c
    ScreenChangeInternal     : Type = ... # 0xd8
    EnabledChange            : Type = ... # 0x62
    GraphicsSceneMousePress  : Type = ... # 0x9c
    ParentChange             : Type = ... # 0x15
    Drop                     : Type = ... # 0x3f
    MouseMove                : Type = ... # 0x5
    ActionAdded              : Type = ... # 0x72
    WindowDeactivate         : Type = ... # 0x19
    Enter                    : Type = ... # 0xa
    TabletLeaveProximity     : Type = ... # 0xac
    WhatsThis                : Type = ... # 0x6f
    InputMethod              : Type = ... # 0x53
    PlatformPanel            : Type = ... # 0xd4
    KeyPress                 : Type = ... # 0x6
    GraphicsSceneHoverEnter  : Type = ... # 0xa0
    HideToParent             : Type = ... # 0x1b
    ApplicationDeactivate    : Type = ... # 0x7a
    NonClientAreaMouseButtonRelease: Type = ... # 0xaf
    GraphicsSceneMouseMove   : Type = ... # 0x9b

    @typing.overload
    def __init__(self, other: PySide2.QtCore.QEvent): ...
    @typing.overload
    def __init__(self, type: PySide2.QtCore.QEvent.Type): ...

    def accept(self): ...
    def ignore(self): ...
    def isAccepted(self) -> bool: ...
    @staticmethod
    def registerEventType(hint: int=...) -> int: ...
    def setAccepted(self, accepted: bool): ...
    def spontaneous(self) -> bool: ...
    def type(self) -> PySide2.QtCore.QEvent.Type: ...


class QEventLoop(PySide2.QtCore.QObject):

    class ProcessEventsFlag(object): ...
    ExcludeSocketNotifiers   : ProcessEventsFlag = ... # 0x2
    DialogExec               : ProcessEventsFlag = ... # 0x40
    AllEvents                : ProcessEventsFlag = ... # 0x0
    ExcludeUserInputEvents   : ProcessEventsFlag = ... # 0x1
    WaitForMoreEvents        : ProcessEventsFlag = ... # 0x4
    EventLoopExec            : ProcessEventsFlag = ... # 0x20
    X11ExcludeTimers         : ProcessEventsFlag = ... # 0x8

    class ProcessEventsFlags(object): ...

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def exec_(self, flags: PySide2.QtCore.QEventLoop.ProcessEventsFlags=...) -> int: ...
    def exit(self, returnCode: int=...): ...
    def isRunning(self) -> bool: ...
    @typing.overload
    def processEvents(self, flags: PySide2.QtCore.QEventLoop.ProcessEventsFlags, maximumTime: int): ...
    @typing.overload
    def processEvents(self, flags: PySide2.QtCore.QEventLoop.ProcessEventsFlags=...) -> bool: ...
    def quit(self): ...
    def wakeUp(self): ...


class QEventTransition(PySide2.QtCore.QAbstractTransition):

    @typing.overload
    def __init__(self, object: PySide2.QtCore.QObject, type: PySide2.QtCore.QEvent.Type, sourceState: Optional[PySide2.QtCore.QState]=...): ...
    @typing.overload
    def __init__(self, sourceState: Optional[PySide2.QtCore.QState]=...): ...

    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def eventSource(self) -> PySide2.QtCore.QObject: ...
    def eventTest(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def eventType(self) -> PySide2.QtCore.QEvent.Type: ...
    def onTransition(self, event: PySide2.QtCore.QEvent): ...
    def setEventSource(self, object: PySide2.QtCore.QObject): ...
    def setEventType(self, type: PySide2.QtCore.QEvent.Type): ...


class QFactoryInterface(Shiboken.Object):

    def __init__(self): ...

    def keys(self) -> List[str]: ...


class QFile(PySide2.QtCore.QFileDevice):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, name: str): ...
    @typing.overload
    def __init__(self, name: str, parent: PySide2.QtCore.QObject): ...
    @typing.overload
    def __init__(self, parent: PySide2.QtCore.QObject): ...

    @typing.overload
    @staticmethod
    def copy(fileName: str, newName: str) -> bool: ...
    @typing.overload
    @staticmethod
    def copy(newName: str) -> bool: ...
    @typing.overload
    @staticmethod
    def decodeName(localFileName: PySide2.QtCore.QByteArray) -> str: ...
    @typing.overload
    @staticmethod
    def decodeName(localFileName: str) -> str: ...
    @staticmethod
    def encodeName(fileName: str) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    @staticmethod
    def exists() -> bool: ...
    @typing.overload
    @staticmethod
    def exists(fileName: str) -> bool: ...
    def fileName(self) -> str: ...
    @typing.overload
    @staticmethod
    def link(newName: str) -> bool: ...
    @typing.overload
    @staticmethod
    def link(oldname: str, newName: str) -> bool: ...
    @typing.overload
    def open(self, fd: int, ioFlags: PySide2.QtCore.QIODevice.OpenMode, handleFlags: PySide2.QtCore.QFileDevice.FileHandleFlags=...) -> bool: ...
    @typing.overload
    def open(self, flags: PySide2.QtCore.QIODevice.OpenMode) -> bool: ...
    @typing.overload
    @staticmethod
    def permissions() -> PySide2.QtCore.QFileDevice.Permissions: ...
    @typing.overload
    @staticmethod
    def permissions(filename: str) -> PySide2.QtCore.QFileDevice.Permissions: ...
    @typing.overload
    @staticmethod
    def readLink() -> str: ...
    @typing.overload
    @staticmethod
    def readLink(fileName: str) -> str: ...
    @typing.overload
    @staticmethod
    def remove() -> bool: ...
    @typing.overload
    @staticmethod
    def remove(fileName: str) -> bool: ...
    @typing.overload
    @staticmethod
    def rename(newName: str) -> bool: ...
    @typing.overload
    @staticmethod
    def rename(oldName: str, newName: str) -> bool: ...
    @typing.overload
    @staticmethod
    def resize(filename: str, sz: int) -> bool: ...
    @typing.overload
    @staticmethod
    def resize(sz: int) -> bool: ...
    def setFileName(self, name: str): ...
    @typing.overload
    @staticmethod
    def setPermissions(filename: str, permissionSpec: PySide2.QtCore.QFileDevice.Permissions) -> bool: ...
    @typing.overload
    @staticmethod
    def setPermissions(permissionSpec: PySide2.QtCore.QFileDevice.Permissions) -> bool: ...
    def size(self) -> int: ...
    @typing.overload
    @staticmethod
    def symLinkTarget() -> str: ...
    @typing.overload
    @staticmethod
    def symLinkTarget(fileName: str) -> str: ...


class QFileDevice(PySide2.QtCore.QIODevice):

    class FileError(object): ...
    OpenError                : FileError = ... # 0x5
    ResizeError              : FileError = ... # 0xc
    FatalError               : FileError = ... # 0x3
    RenameError              : FileError = ... # 0xa
    WriteError               : FileError = ... # 0x2
    AbortError               : FileError = ... # 0x6
    ResourceError            : FileError = ... # 0x4
    PositionError            : FileError = ... # 0xb
    UnspecifiedError         : FileError = ... # 0x8
    PermissionsError         : FileError = ... # 0xd
    NoError                  : FileError = ... # 0x0
    ReadError                : FileError = ... # 0x1
    RemoveError              : FileError = ... # 0x9
    CopyError                : FileError = ... # 0xe
    TimeOutError             : FileError = ... # 0x7

    class FileHandleFlag(object): ...
    DontCloseHandle          : FileHandleFlag = ... # 0x0
    AutoCloseHandle          : FileHandleFlag = ... # 0x1

    class FileHandleFlags(object): ...

    class FileTime(object): ...
    FileBirthTime            : FileTime = ... # 0x1
    FileModificationTime     : FileTime = ... # 0x3
    FileMetadataChangeTime   : FileTime = ... # 0x2
    FileAccessTime           : FileTime = ... # 0x0

    class MemoryMapFlags(object): ...
    MapPrivateOption         : MemoryMapFlags = ... # 0x1
    NoOptions                : MemoryMapFlags = ... # 0x0

    class Permission(object): ...
    ReadOther                : Permission = ... # 0x4
    WriteOwner               : Permission = ... # 0x2000
    ExeOwner                 : Permission = ... # 0x1000
    WriteGroup               : Permission = ... # 0x20
    ReadGroup                : Permission = ... # 0x40
    WriteOther               : Permission = ... # 0x2
    ExeGroup                 : Permission = ... # 0x10
    ReadOwner                : Permission = ... # 0x4000
    ExeOther                 : Permission = ... # 0x1
    ExeUser                  : Permission = ... # 0x100
    WriteUser                : Permission = ... # 0x200
    ReadUser                 : Permission = ... # 0x400

    class Permissions(object): ...

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, parent: PySide2.QtCore.QObject): ...

    def atEnd(self) -> bool: ...
    def close(self): ...
    def error(self) -> PySide2.QtCore.QFileDevice.FileError: ...
    def fileName(self) -> str: ...
    def fileTime(self, time: PySide2.QtCore.QFileDevice.FileTime) -> PySide2.QtCore.QDateTime: ...
    def flush(self) -> bool: ...
    def handle(self) -> int: ...
    def isSequential(self) -> bool: ...
    def map(self, offset: int, size: int, flags: PySide2.QtCore.QFileDevice.MemoryMapFlags=...) -> Char: ...
    def permissions(self) -> PySide2.QtCore.QFileDevice.Permissions: ...
    def pos(self) -> int: ...
    def readData(self, data: str, maxlen: int) -> int: ...
    def readLineData(self, data: str, maxlen: int) -> int: ...
    def resize(self, sz: int) -> bool: ...
    def seek(self, offset: int) -> bool: ...
    def setFileTime(self, newDate: PySide2.QtCore.QDateTime, fileTime: PySide2.QtCore.QFileDevice.FileTime) -> bool: ...
    def setPermissions(self, permissionSpec: PySide2.QtCore.QFileDevice.Permissions) -> bool: ...
    def size(self) -> int: ...
    def unmap(self, address: Char) -> bool: ...
    def unsetError(self): ...
    def writeData(self, data: str, len: int) -> int: ...


class QFileInfo(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, dir: PySide2.QtCore.QDir, file: str): ...
    @typing.overload
    def __init__(self, file: PySide2.QtCore.QFile): ...
    @typing.overload
    def __init__(self, file: str): ...
    @typing.overload
    def __init__(self, fileinfo: PySide2.QtCore.QFileInfo): ...

    def __copy__(self): ...
    def __reduce__(self) -> object: ...
    def absoluteDir(self) -> PySide2.QtCore.QDir: ...
    def absoluteFilePath(self) -> str: ...
    def absolutePath(self) -> str: ...
    def baseName(self) -> str: ...
    def birthTime(self) -> PySide2.QtCore.QDateTime: ...
    def bundleName(self) -> str: ...
    def caching(self) -> bool: ...
    def canonicalFilePath(self) -> str: ...
    def canonicalPath(self) -> str: ...
    def completeBaseName(self) -> str: ...
    def completeSuffix(self) -> str: ...
    def created(self) -> PySide2.QtCore.QDateTime: ...
    def dir(self) -> PySide2.QtCore.QDir: ...
    @typing.overload
    @staticmethod
    def exists() -> bool: ...
    @typing.overload
    @staticmethod
    def exists(file: str) -> bool: ...
    def fileName(self) -> str: ...
    def filePath(self) -> str: ...
    def group(self) -> str: ...
    def groupId(self) -> int: ...
    def isAbsolute(self) -> bool: ...
    def isBundle(self) -> bool: ...
    def isDir(self) -> bool: ...
    def isExecutable(self) -> bool: ...
    def isFile(self) -> bool: ...
    def isHidden(self) -> bool: ...
    def isNativePath(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isRelative(self) -> bool: ...
    def isRoot(self) -> bool: ...
    def isSymLink(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def lastModified(self) -> PySide2.QtCore.QDateTime: ...
    def lastRead(self) -> PySide2.QtCore.QDateTime: ...
    def makeAbsolute(self) -> bool: ...
    def metadataChangeTime(self) -> PySide2.QtCore.QDateTime: ...
    def owner(self) -> str: ...
    def ownerId(self) -> int: ...
    def path(self) -> str: ...
    def readLink(self) -> str: ...
    def refresh(self): ...
    def setCaching(self, on: bool): ...
    @typing.overload
    def setFile(self, dir: PySide2.QtCore.QDir, file: str): ...
    @typing.overload
    def setFile(self, file: PySide2.QtCore.QFile): ...
    @typing.overload
    def setFile(self, file: str): ...
    def size(self) -> int: ...
    def suffix(self) -> str: ...
    def swap(self, other: PySide2.QtCore.QFileInfo): ...
    def symLinkTarget(self) -> str: ...


class QFileSelector(PySide2.QtCore.QObject):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def allSelectors(self) -> List[str]: ...
    def extraSelectors(self) -> List[str]: ...
    @typing.overload
    def select(self, filePath: PySide2.QtCore.QUrl) -> PySide2.QtCore.QUrl: ...
    @typing.overload
    def select(self, filePath: str) -> str: ...
    def setExtraSelectors(self, list: List[str]): ...


class QFileSystemWatcher(PySide2.QtCore.QObject):

    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, paths: List[str], parent: Optional[PySide2.QtCore.QObject]=...): ...

    def addPath(self, file: str) -> bool: ...
    def addPaths(self, files: List[str]) -> List[str]: ...
    def directories(self) -> List[str]: ...
    def files(self) -> List[str]: ...
    def removePath(self, file: str) -> bool: ...
    def removePaths(self, files: List[str]) -> List[str]: ...


class QFinalState(PySide2.QtCore.QAbstractState):

    def __init__(self, parent: Optional[PySide2.QtCore.QState]=...): ...

    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def onEntry(self, event: PySide2.QtCore.QEvent): ...
    def onExit(self, event: PySide2.QtCore.QEvent): ...


class QGenericArgument(Shiboken.Object):

    @typing.overload
    def __init__(self, QGenericArgument: PySide2.QtCore.QGenericArgument): ...
    @typing.overload
    def __init__(self, aName: Optional[str]=..., aData: Optional[int]=...): ...

    def __copy__(self): ...
    def data(self) -> int: ...
    def name(self) -> str: ...


class QGenericReturnArgument(PySide2.QtCore.QGenericArgument):

    @typing.overload
    def __init__(self, QGenericReturnArgument: PySide2.QtCore.QGenericReturnArgument): ...
    @typing.overload
    def __init__(self, aName: Optional[str]=..., aData: Optional[int]=...): ...

    def __copy__(self): ...


class QHistoryState(PySide2.QtCore.QAbstractState):

    class HistoryType(object): ...
    ShallowHistory           : HistoryType = ... # 0x0
    DeepHistory              : HistoryType = ... # 0x1

    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QState]=...): ...
    @typing.overload
    def __init__(self, type: PySide2.QtCore.QHistoryState.HistoryType, parent: Optional[PySide2.QtCore.QState]=...): ...

    def defaultState(self) -> PySide2.QtCore.QAbstractState: ...
    def defaultTransition(self) -> PySide2.QtCore.QAbstractTransition: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def historyType(self) -> PySide2.QtCore.QHistoryState.HistoryType: ...
    def onEntry(self, event: PySide2.QtCore.QEvent): ...
    def onExit(self, event: PySide2.QtCore.QEvent): ...
    def setDefaultState(self, state: PySide2.QtCore.QAbstractState): ...
    def setDefaultTransition(self, transition: PySide2.QtCore.QAbstractTransition): ...
    def setHistoryType(self, type: PySide2.QtCore.QHistoryState.HistoryType): ...


class QIODevice(PySide2.QtCore.QObject):

    class OpenMode(object): ...

    class OpenModeFlag(object): ...
    NotOpen                  : OpenModeFlag = ... # 0x0
    Truncate                 : OpenModeFlag = ... # 0x8
    WriteOnly                : OpenModeFlag = ... # 0x2
    Unbuffered               : OpenModeFlag = ... # 0x20
    NewOnly                  : OpenModeFlag = ... # 0x40
    Append                   : OpenModeFlag = ... # 0x4
    ReadWrite                : OpenModeFlag = ... # 0x3
    Text                     : OpenModeFlag = ... # 0x10
    ExistingOnly             : OpenModeFlag = ... # 0x80
    ReadOnly                 : OpenModeFlag = ... # 0x1

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, parent: PySide2.QtCore.QObject): ...

    def atEnd(self) -> bool: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def canReadLine(self) -> bool: ...
    def close(self): ...
    def commitTransaction(self): ...
    def currentReadChannel(self) -> int: ...
    def currentWriteChannel(self) -> int: ...
    def errorString(self) -> str: ...
    def getChar(self, c: str) -> bool: ...
    def isOpen(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isSequential(self) -> bool: ...
    def isTextModeEnabled(self) -> bool: ...
    def isTransactionStarted(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def open(self, mode: PySide2.QtCore.QIODevice.OpenMode) -> bool: ...
    def openMode(self) -> PySide2.QtCore.QIODevice.OpenMode: ...
    def peek(self, maxlen: int) -> PySide2.QtCore.QByteArray: ...
    def pos(self) -> int: ...
    def putChar(self, c: Char) -> bool: ...
    def read(self, maxlen: int) -> PySide2.QtCore.QByteArray: ...
    def readAll(self) -> PySide2.QtCore.QByteArray: ...
    def readChannelCount(self) -> int: ...
    def readData(self, data: str, maxlen: int) -> int: ...
    def readLine(self, maxlen: int=...) -> PySide2.QtCore.QByteArray: ...
    def readLineData(self, data: str, maxlen: int) -> int: ...
    def reset(self) -> bool: ...
    def rollbackTransaction(self): ...
    def seek(self, pos: int) -> bool: ...
    def setCurrentReadChannel(self, channel: int): ...
    def setCurrentWriteChannel(self, channel: int): ...
    def setErrorString(self, errorString: str): ...
    def setOpenMode(self, openMode: PySide2.QtCore.QIODevice.OpenMode): ...
    def setTextModeEnabled(self, enabled: bool): ...
    def size(self) -> int: ...
    def skip(self, maxSize: int) -> int: ...
    def startTransaction(self): ...
    def ungetChar(self, c: Char): ...
    def waitForBytesWritten(self, msecs: int) -> bool: ...
    def waitForReadyRead(self, msecs: int) -> bool: ...
    def write(self, data: PySide2.QtCore.QByteArray) -> int: ...
    def writeChannelCount(self) -> int: ...
    def writeData(self, data: str, len: int) -> int: ...


class QIdentityProxyModel(PySide2.QtCore.QAbstractProxyModel):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def columnCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    def dropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def headerData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, role: int=...) -> Any: ...
    def index(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex=...) -> PySide2.QtCore.QModelIndex: ...
    def insertColumns(self, column: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def insertRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def mapFromSource(self, sourceIndex: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def mapSelectionFromSource(self, selection: PySide2.QtCore.QItemSelection) -> PySide2.QtCore.QItemSelection: ...
    def mapSelectionToSource(self, selection: PySide2.QtCore.QItemSelection) -> PySide2.QtCore.QItemSelection: ...
    def mapToSource(self, proxyIndex: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def match(self, start: PySide2.QtCore.QModelIndex, role: int, value: Any, hits: int=..., flags: PySide2.QtCore.Qt.MatchFlags=...) -> List[int]: ...
    @typing.overload
    def parent(self) -> PySide2.QtCore.QObject: ...
    @typing.overload
    def parent(self, child: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def removeColumns(self, column: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def removeRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def rowCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    def setSourceModel(self, sourceModel: PySide2.QtCore.QAbstractItemModel): ...
    def sibling(self, row: int, column: int, idx: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...


class QItemSelection(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QItemSelection: PySide2.QtCore.QItemSelection): ...
    @typing.overload
    def __init__(self, topLeft: PySide2.QtCore.QModelIndex, bottomRight: PySide2.QtCore.QModelIndex): ...

    def __add__(self, l: List[PySide2.QtCore.QItemSelectionRange]) -> List[PySide2.QtCore.QItemSelectionRange]: ...
    def __copy__(self): ...
    @typing.overload
    def __iadd__(self, l: List[PySide2.QtCore.QItemSelectionRange]) -> List[PySide2.QtCore.QItemSelectionRange]: ...
    @typing.overload
    def __iadd__(self, t: PySide2.QtCore.QItemSelectionRange) -> List[PySide2.QtCore.QItemSelectionRange]: ...
    @typing.overload
    def __lshift__(self, l: List[PySide2.QtCore.QItemSelectionRange]) -> List[PySide2.QtCore.QItemSelectionRange]: ...
    @typing.overload
    def __lshift__(self, t: PySide2.QtCore.QItemSelectionRange) -> List[PySide2.QtCore.QItemSelectionRange]: ...
    @typing.overload
    def append(self, t: PySide2.QtCore.QItemSelectionRange): ...
    @typing.overload
    def append(self, t: List[PySide2.QtCore.QItemSelectionRange]): ...
    def at(self, i: int) -> PySide2.QtCore.QItemSelectionRange: ...
    def back(self) -> PySide2.QtCore.QItemSelectionRange: ...
    def clear(self): ...
    def constFirst(self) -> PySide2.QtCore.QItemSelectionRange: ...
    def constLast(self) -> PySide2.QtCore.QItemSelectionRange: ...
    def contains(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    @typing.overload
    def count(self) -> int: ...
    @typing.overload
    def count(self, t: PySide2.QtCore.QItemSelectionRange) -> int: ...
    def detachShared(self): ...
    def empty(self) -> bool: ...
    def endsWith(self, t: PySide2.QtCore.QItemSelectionRange) -> bool: ...
    def first(self) -> PySide2.QtCore.QItemSelectionRange: ...
    @staticmethod
    def fromSet(set: Set[PySide2.QtCore.QItemSelectionRange]) -> List[PySide2.QtCore.QItemSelectionRange]: ...
    @staticmethod
    def fromVector(vector: List[PySide2.QtCore.QItemSelectionRange]) -> List[PySide2.QtCore.QItemSelectionRange]: ...
    def front(self) -> PySide2.QtCore.QItemSelectionRange: ...
    def indexOf(self, t: PySide2.QtCore.QItemSelectionRange, from_: int=...) -> int: ...
    def indexes(self) -> List[int]: ...
    def insert(self, i: int, t: PySide2.QtCore.QItemSelectionRange): ...
    def isEmpty(self) -> bool: ...
    def isSharedWith(self, other: List[PySide2.QtCore.QItemSelectionRange]) -> bool: ...
    def last(self) -> PySide2.QtCore.QItemSelectionRange: ...
    def lastIndexOf(self, t: PySide2.QtCore.QItemSelectionRange, from_: int=...) -> int: ...
    def length(self) -> int: ...
    def merge(self, other: PySide2.QtCore.QItemSelection, command: PySide2.QtCore.QItemSelectionModel.SelectionFlags): ...
    def mid(self, pos: int, length: int=...) -> List[PySide2.QtCore.QItemSelectionRange]: ...
    def move(self, from_: int, to: int): ...
    def pop_back(self): ...
    def pop_front(self): ...
    def prepend(self, t: PySide2.QtCore.QItemSelectionRange): ...
    def push_back(self, t: PySide2.QtCore.QItemSelectionRange): ...
    def push_front(self, t: PySide2.QtCore.QItemSelectionRange): ...
    def removeAll(self, t: PySide2.QtCore.QItemSelectionRange) -> int: ...
    def removeAt(self, i: int): ...
    def removeFirst(self): ...
    def removeLast(self): ...
    def removeOne(self, t: PySide2.QtCore.QItemSelectionRange) -> bool: ...
    def replace(self, i: int, t: PySide2.QtCore.QItemSelectionRange): ...
    def reserve(self, size: int): ...
    def select(self, topLeft: PySide2.QtCore.QModelIndex, bottomRight: PySide2.QtCore.QModelIndex): ...
    def setSharable(self, sharable: bool): ...
    def size(self) -> int: ...
    @staticmethod
    def split(range: PySide2.QtCore.QItemSelectionRange, other: PySide2.QtCore.QItemSelectionRange, result: PySide2.QtCore.QItemSelection): ...
    def startsWith(self, t: PySide2.QtCore.QItemSelectionRange) -> bool: ...
    @typing.overload
    def swap(self, i: int, j: int): ...
    @typing.overload
    def swap(self, other: List[PySide2.QtCore.QItemSelectionRange]): ...
    def swapItemsAt(self, i: int, j: int): ...
    def takeAt(self, i: int) -> PySide2.QtCore.QItemSelectionRange: ...
    def takeFirst(self) -> PySide2.QtCore.QItemSelectionRange: ...
    def takeLast(self) -> PySide2.QtCore.QItemSelectionRange: ...
    def toSet(self) -> Set[PySide2.QtCore.QItemSelectionRange]: ...
    def toVector(self) -> List[PySide2.QtCore.QItemSelectionRange]: ...
    @typing.overload
    def value(self, i: int) -> PySide2.QtCore.QItemSelectionRange: ...
    @typing.overload
    def value(self, i: int, defaultValue: PySide2.QtCore.QItemSelectionRange) -> PySide2.QtCore.QItemSelectionRange: ...


class QItemSelectionModel(PySide2.QtCore.QObject):

    class SelectionFlag(object): ...
    Deselect                 : SelectionFlag = ... # 0x4
    Rows                     : SelectionFlag = ... # 0x20
    Current                  : SelectionFlag = ... # 0x10
    Columns                  : SelectionFlag = ... # 0x40
    ToggleCurrent            : SelectionFlag = ... # 0x18
    ClearAndSelect           : SelectionFlag = ... # 0x3
    Clear                    : SelectionFlag = ... # 0x1
    Select                   : SelectionFlag = ... # 0x2
    SelectCurrent            : SelectionFlag = ... # 0x12
    NoUpdate                 : SelectionFlag = ... # 0x0
    Toggle                   : SelectionFlag = ... # 0x8

    class SelectionFlags(object): ...

    @typing.overload
    def __init__(self, model: PySide2.QtCore.QAbstractItemModel, parent: PySide2.QtCore.QObject): ...
    @typing.overload
    def __init__(self, model: Optional[PySide2.QtCore.QAbstractItemModel]=...): ...

    def clear(self): ...
    def clearCurrentIndex(self): ...
    def clearSelection(self): ...
    def columnIntersectsSelection(self, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def currentIndex(self) -> PySide2.QtCore.QModelIndex: ...
    def emitSelectionChanged(self, newSelection: PySide2.QtCore.QItemSelection, oldSelection: PySide2.QtCore.QItemSelection): ...
    def hasSelection(self) -> bool: ...
    def isColumnSelected(self, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def isRowSelected(self, row: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def isSelected(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def model(self) -> PySide2.QtCore.QAbstractItemModel: ...
    def reset(self): ...
    def rowIntersectsSelection(self, row: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    @typing.overload
    def select(self, index: PySide2.QtCore.QModelIndex, command: PySide2.QtCore.QItemSelectionModel.SelectionFlags): ...
    @typing.overload
    def select(self, selection: PySide2.QtCore.QItemSelection, command: PySide2.QtCore.QItemSelectionModel.SelectionFlags): ...
    def selectedColumns(self, row: int=...) -> List[int]: ...
    def selectedIndexes(self) -> List[int]: ...
    def selectedRows(self, column: int=...) -> List[int]: ...
    def selection(self) -> PySide2.QtCore.QItemSelection: ...
    def setCurrentIndex(self, index: PySide2.QtCore.QModelIndex, command: PySide2.QtCore.QItemSelectionModel.SelectionFlags): ...
    def setModel(self, model: PySide2.QtCore.QAbstractItemModel): ...


class QItemSelectionRange(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, index: PySide2.QtCore.QModelIndex): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QItemSelectionRange): ...
    @typing.overload
    def __init__(self, topL: PySide2.QtCore.QModelIndex, bottomR: PySide2.QtCore.QModelIndex): ...

    def __copy__(self): ...
    def bottom(self) -> int: ...
    def bottomRight(self) -> PySide2.QtCore.QPersistentModelIndex: ...
    @typing.overload
    def contains(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    @typing.overload
    def contains(self, row: int, column: int, parentIndex: PySide2.QtCore.QModelIndex) -> bool: ...
    def height(self) -> int: ...
    def indexes(self) -> List[int]: ...
    def intersected(self, other: PySide2.QtCore.QItemSelectionRange) -> PySide2.QtCore.QItemSelectionRange: ...
    def intersects(self, other: PySide2.QtCore.QItemSelectionRange) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isValid(self) -> bool: ...
    def left(self) -> int: ...
    def model(self) -> PySide2.QtCore.QAbstractItemModel: ...
    def parent(self) -> PySide2.QtCore.QModelIndex: ...
    def right(self) -> int: ...
    def swap(self, other: PySide2.QtCore.QItemSelectionRange): ...
    def top(self) -> int: ...
    def topLeft(self) -> PySide2.QtCore.QPersistentModelIndex: ...
    def width(self) -> int: ...


class QJsonArray(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QJsonArray): ...

    def __add__(self, v: PySide2.QtCore.QJsonValue) -> PySide2.QtCore.QJsonArray: ...
    def __copy__(self): ...
    def __iadd__(self, v: PySide2.QtCore.QJsonValue) -> PySide2.QtCore.QJsonArray: ...
    def __lshift__(self, v: PySide2.QtCore.QJsonValue) -> PySide2.QtCore.QJsonArray: ...
    def append(self, value: PySide2.QtCore.QJsonValue): ...
    def at(self, i: int) -> PySide2.QtCore.QJsonValue: ...
    def contains(self, element: PySide2.QtCore.QJsonValue) -> bool: ...
    def count(self) -> int: ...
    def empty(self) -> bool: ...
    def first(self) -> PySide2.QtCore.QJsonValue: ...
    @staticmethod
    def fromStringList(list: List[str]) -> PySide2.QtCore.QJsonArray: ...
    @staticmethod
    def fromVariantList(list: List[Any]) -> PySide2.QtCore.QJsonArray: ...
    def insert(self, i: int, value: PySide2.QtCore.QJsonValue): ...
    def isEmpty(self) -> bool: ...
    def last(self) -> PySide2.QtCore.QJsonValue: ...
    def pop_back(self): ...
    def pop_front(self): ...
    def prepend(self, value: PySide2.QtCore.QJsonValue): ...
    def push_back(self, t: PySide2.QtCore.QJsonValue): ...
    def push_front(self, t: PySide2.QtCore.QJsonValue): ...
    def removeAt(self, i: int): ...
    def removeFirst(self): ...
    def removeLast(self): ...
    def replace(self, i: int, value: PySide2.QtCore.QJsonValue): ...
    def size(self) -> int: ...
    def swap(self, other: PySide2.QtCore.QJsonArray): ...
    def takeAt(self, i: int) -> PySide2.QtCore.QJsonValue: ...
    def toVariantList(self) -> List[Any]: ...


class QJsonDocument(Shiboken.Object):

    class DataValidation(object): ...
    BypassValidation         : DataValidation = ... # 0x1
    Validate                 : DataValidation = ... # 0x0

    class JsonFormat(object): ...
    Compact                  : JsonFormat = ... # 0x1
    Indented                 : JsonFormat = ... # 0x0

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, array: PySide2.QtCore.QJsonArray): ...
    @typing.overload
    def __init__(self, object: Dict[str, PySide2.QtCore.QJsonValue]): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QJsonDocument): ...

    def __copy__(self): ...
    def array(self) -> PySide2.QtCore.QJsonArray: ...
    @staticmethod
    def fromBinaryData(data: PySide2.QtCore.QByteArray, validation: PySide2.QtCore.QJsonDocument.DataValidation=...) -> PySide2.QtCore.QJsonDocument: ...
    @staticmethod
    def fromJson(json: PySide2.QtCore.QByteArray, error: Optional[PySide2.QtCore.QJsonParseError]=...) -> PySide2.QtCore.QJsonDocument: ...
    @staticmethod
    def fromRawData(data: str, size: int, validation: PySide2.QtCore.QJsonDocument.DataValidation=...) -> PySide2.QtCore.QJsonDocument: ...
    @staticmethod
    def fromVariant(variant: Any) -> PySide2.QtCore.QJsonDocument: ...
    def isArray(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isObject(self) -> bool: ...
    def object(self) -> Dict[str, PySide2.QtCore.QJsonValue]: ...
    def rawData(self, size: int) -> str: ...
    def setArray(self, array: PySide2.QtCore.QJsonArray): ...
    def setObject(self, object: Dict[str, PySide2.QtCore.QJsonValue]): ...
    def swap(self, other: PySide2.QtCore.QJsonDocument): ...
    def toBinaryData(self) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def toJson(self) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def toJson(self, format: PySide2.QtCore.QJsonDocument.JsonFormat) -> PySide2.QtCore.QByteArray: ...
    def toVariant(self) -> Any: ...


class QJsonParseError(Shiboken.Object):

    class ParseError(object): ...
    MissingObject            : ParseError = ... # 0xb
    IllegalEscapeSequence    : ParseError = ... # 0x8
    DeepNesting              : ParseError = ... # 0xc
    UnterminatedArray        : ParseError = ... # 0x3
    DocumentTooLarge         : ParseError = ... # 0xd
    MissingNameSeparator     : ParseError = ... # 0x2
    IllegalNumber            : ParseError = ... # 0x7
    IllegalValue             : ParseError = ... # 0x5
    GarbageAtEnd             : ParseError = ... # 0xe
    NoError                  : ParseError = ... # 0x0
    TerminationByNumber      : ParseError = ... # 0x6
    UnterminatedObject       : ParseError = ... # 0x1
    IllegalUTF8String        : ParseError = ... # 0x9
    MissingValueSeparator    : ParseError = ... # 0x4
    UnterminatedString       : ParseError = ... # 0xa

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QJsonParseError: PySide2.QtCore.QJsonParseError): ...

    def __copy__(self): ...
    def errorString(self) -> str: ...


class QJsonValue(Shiboken.Object):

    class Type(object): ...
    Object                   : Type = ... # 0x5
    Array                    : Type = ... # 0x4
    Undefined                : Type = ... # 0x80
    Double                   : Type = ... # 0x2
    String                   : Type = ... # 0x3
    Bool                     : Type = ... # 0x1
    Null                     : Type = ... # 0x0

    @typing.overload
    def __init__(self, a: PySide2.QtCore.QJsonArray): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QJsonValue.Type=...): ...
    @typing.overload
    def __init__(self, b: bool): ...
    @typing.overload
    def __init__(self, n: float): ...
    @typing.overload
    def __init__(self, n: int): ...
    @typing.overload
    def __init__(self, n: int): ...
    @typing.overload
    def __init__(self, o: Dict[str, PySide2.QtCore.QJsonValue]): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QJsonValue): ...
    @typing.overload
    def __init__(self, s: str): ...
    @typing.overload
    def __init__(self, s: str): ...

    def __copy__(self): ...
    @staticmethod
    def fromVariant(variant: Any) -> PySide2.QtCore.QJsonValue: ...
    def isArray(self) -> bool: ...
    def isBool(self) -> bool: ...
    def isDouble(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isObject(self) -> bool: ...
    def isString(self) -> bool: ...
    def isUndefined(self) -> bool: ...
    def swap(self, other: PySide2.QtCore.QJsonValue): ...
    @typing.overload
    def toArray(self) -> PySide2.QtCore.QJsonArray: ...
    @typing.overload
    def toArray(self, defaultValue: PySide2.QtCore.QJsonArray) -> PySide2.QtCore.QJsonArray: ...
    def toBool(self, defaultValue: bool=...) -> bool: ...
    def toDouble(self, defaultValue: float=...) -> float: ...
    def toInt(self, defaultValue: int=...) -> int: ...
    @typing.overload
    def toObject(self) -> Dict[str, PySide2.QtCore.QJsonValue]: ...
    @typing.overload
    def toObject(self, defaultValue: Dict[str, PySide2.QtCore.QJsonValue]) -> Dict[str, PySide2.QtCore.QJsonValue]: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, defaultValue: str) -> str: ...
    def toVariant(self) -> Any: ...
    def type(self) -> PySide2.QtCore.QJsonValue.Type: ...


class QLibraryInfo(Shiboken.Object):

    class LibraryLocation(object): ...
    LibraryExecutablesPath   : LibraryLocation = ... # 0x4
    SettingsPath             : LibraryLocation = ... # 0x64
    ImportsPath              : LibraryLocation = ... # 0x7
    HeadersPath              : LibraryLocation = ... # 0x2
    DataPath                 : LibraryLocation = ... # 0xa
    DocumentationPath        : LibraryLocation = ... # 0x1
    ExamplesPath             : LibraryLocation = ... # 0xc
    ArchDataPath             : LibraryLocation = ... # 0x9
    LibrariesPath            : LibraryLocation = ... # 0x3
    BinariesPath             : LibraryLocation = ... # 0x5
    TranslationsPath         : LibraryLocation = ... # 0xb
    PrefixPath               : LibraryLocation = ... # 0x0
    PluginsPath              : LibraryLocation = ... # 0x6
    TestsPath                : LibraryLocation = ... # 0xd
    Qml2ImportsPath          : LibraryLocation = ... # 0x8
    @staticmethod
    def build() -> str: ...
    @staticmethod
    def buildDate() -> PySide2.QtCore.QDate: ...
    @staticmethod
    def isDebugBuild() -> bool: ...
    @staticmethod
    def licensedProducts() -> str: ...
    @staticmethod
    def licensee() -> str: ...
    @staticmethod
    def location(arg__1: PySide2.QtCore.QLibraryInfo.LibraryLocation) -> str: ...
    @staticmethod
    def platformPluginArguments(platformName: str) -> List[str]: ...
    @staticmethod
    def version() -> PySide2.QtCore.QVersionNumber: ...


class QLine(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QLine: PySide2.QtCore.QLine): ...
    @typing.overload
    def __init__(self, pt1: PySide2.QtCore.QPoint, pt2: PySide2.QtCore.QPoint): ...
    @typing.overload
    def __init__(self, x1: int, y1: int, x2: int, y2: int): ...

    def __copy__(self): ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def center(self) -> PySide2.QtCore.QPoint: ...
    def dx(self) -> int: ...
    def dy(self) -> int: ...
    def isNull(self) -> bool: ...
    def p1(self) -> PySide2.QtCore.QPoint: ...
    def p2(self) -> PySide2.QtCore.QPoint: ...
    def setLine(self, x1: int, y1: int, x2: int, y2: int): ...
    def setP1(self, p1: PySide2.QtCore.QPoint): ...
    def setP2(self, p2: PySide2.QtCore.QPoint): ...
    def setPoints(self, p1: PySide2.QtCore.QPoint, p2: PySide2.QtCore.QPoint): ...
    def toTuple(self) -> object: ...
    @typing.overload
    def translate(self, dx: int, dy: int): ...
    @typing.overload
    def translate(self, p: PySide2.QtCore.QPoint): ...
    @typing.overload
    def translated(self, dx: int, dy: int) -> PySide2.QtCore.QLine: ...
    @typing.overload
    def translated(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QLine: ...
    def x1(self) -> int: ...
    def x2(self) -> int: ...
    def y1(self) -> int: ...
    def y2(self) -> int: ...


class QLineF(Shiboken.Object):

    class IntersectType(object): ...
    NoIntersection           : IntersectType = ... # 0x0
    UnboundedIntersection    : IntersectType = ... # 0x2
    BoundedIntersection      : IntersectType = ... # 0x1

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QLineF: PySide2.QtCore.QLineF): ...
    @typing.overload
    def __init__(self, line: PySide2.QtCore.QLine): ...
    @typing.overload
    def __init__(self, pt1: PySide2.QtCore.QPointF, pt2: PySide2.QtCore.QPointF): ...
    @typing.overload
    def __init__(self, x1: float, y1: float, x2: float, y2: float): ...

    def __copy__(self): ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    @typing.overload
    def angle(self) -> float: ...
    @typing.overload
    def angle(self, l: PySide2.QtCore.QLineF) -> float: ...
    def angleTo(self, l: PySide2.QtCore.QLineF) -> float: ...
    def center(self) -> PySide2.QtCore.QPointF: ...
    def dx(self) -> float: ...
    def dy(self) -> float: ...
    @staticmethod
    def fromPolar(length: float, angle: float) -> PySide2.QtCore.QLineF: ...
    def intersect(self, l: PySide2.QtCore.QLineF, intersectionPoint: PySide2.QtCore.QPointF) -> PySide2.QtCore.QLineF.IntersectType: ...
    def isNull(self) -> bool: ...
    def length(self) -> float: ...
    def normalVector(self) -> PySide2.QtCore.QLineF: ...
    def p1(self) -> PySide2.QtCore.QPointF: ...
    def p2(self) -> PySide2.QtCore.QPointF: ...
    def pointAt(self, t: float) -> PySide2.QtCore.QPointF: ...
    def setAngle(self, angle: float): ...
    def setLength(self, len: float): ...
    def setLine(self, x1: float, y1: float, x2: float, y2: float): ...
    def setP1(self, p1: PySide2.QtCore.QPointF): ...
    def setP2(self, p2: PySide2.QtCore.QPointF): ...
    def setPoints(self, p1: PySide2.QtCore.QPointF, p2: PySide2.QtCore.QPointF): ...
    def toLine(self) -> PySide2.QtCore.QLine: ...
    def toTuple(self) -> object: ...
    @typing.overload
    def translate(self, dx: float, dy: float): ...
    @typing.overload
    def translate(self, p: PySide2.QtCore.QPointF): ...
    @typing.overload
    def translated(self, dx: float, dy: float) -> PySide2.QtCore.QLineF: ...
    @typing.overload
    def translated(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QLineF: ...
    def unitVector(self) -> PySide2.QtCore.QLineF: ...
    def x1(self) -> float: ...
    def x2(self) -> float: ...
    def y1(self) -> float: ...
    def y2(self) -> float: ...


class QLocale(Shiboken.Object):

    class Country(object): ...
    Canada                   : Country = ... # 0x26
    Turkmenistan             : Country = ... # 0xda
    UnitedArabEmirates       : Country = ... # 0xdf
    Monaco                   : Country = ... # 0x8e
    Lithuania                : Country = ... # 0x7c
    Cambodia                 : Country = ... # 0x24
    NauruCountry             : Country = ... # 0x95
    CzechRepublic            : Country = ... # 0x39
    Ethiopia                 : Country = ... # 0x45
    Aruba                    : Country = ... # 0xc
    Swaziland                : Country = ... # 0xcc
    Bolivia                  : Country = ... # 0x1a
    Cameroon                 : Country = ... # 0x25
    Switzerland              : Country = ... # 0xce
    Bahrain                  : Country = ... # 0x11
    CocosIslands             : Country = ... # 0x2e
    TristanDaCunha           : Country = ... # 0xfd
    Japan                    : Country = ... # 0x6c
    CongoBrazzaville         : Country = ... # 0x32
    Pakistan                 : Country = ... # 0xa3
    Guatemala                : Country = ... # 0x5a
    Kuwait                   : Country = ... # 0x73
    Jordan                   : Country = ... # 0x6d
    FaroeIslands             : Country = ... # 0x47
    TokelauCountry           : Country = ... # 0xd5
    Dominica                 : Country = ... # 0x3c
    Liberia                  : Country = ... # 0x79
    Maldives                 : Country = ... # 0x83
    UnitedKingdom            : Country = ... # 0xe0
    Jamaica                  : Country = ... # 0x6b
    Oman                     : Country = ... # 0xa2
    Tanzania                 : Country = ... # 0xd2
    Martinique               : Country = ... # 0x87
    SyrianArabRepublic       : Country = ... # 0xcf
    NorthernMarianaIslands   : Country = ... # 0xa0
    SierraLeone              : Country = ... # 0xbd
    Zambia                   : Country = ... # 0xef
    TrinidadAndTobago        : Country = ... # 0xd7
    Bonaire                  : Country = ... # 0xff
    Greenland                : Country = ... # 0x56
    Gabon                    : Country = ... # 0x4f
    Niue                     : Country = ... # 0x9e
    Samoa                    : Country = ... # 0xb7
    Yemen                    : Country = ... # 0xed
    Jersey                   : Country = ... # 0xfc
    SaintVincentAndTheGrenadines: Country = ... # 0xb6
    Bahamas                  : Country = ... # 0x10
    IsleOfMan                : Country = ... # 0xfb
    Albania                  : Country = ... # 0x2
    Macau                    : Country = ... # 0x7e
    AscensionIsland          : Country = ... # 0xf7
    Nicaragua                : Country = ... # 0x9b
    HongKong                 : Country = ... # 0x61
    Guam                     : Country = ... # 0x59
    CanaryIslands            : Country = ... # 0xee
    India                    : Country = ... # 0x64
    Azerbaijan               : Country = ... # 0xf
    WallisAndFutunaIslands   : Country = ... # 0xeb
    Lesotho                  : Country = ... # 0x78
    SouthAfrica              : Country = ... # 0xc3
    CeutaAndMelilla          : Country = ... # 0xfa
    Kenya                    : Country = ... # 0x6f
    AnyCountry               : Country = ... # 0x0
    SvalbardAndJanMayenIslands: Country = ... # 0xcb
    Tajikistan               : Country = ... # 0xd1
    NewCaledonia             : Country = ... # 0x99
    NorfolkIsland            : Country = ... # 0x9f
    Turkey                   : Country = ... # 0xd9
    Afghanistan              : Country = ... # 0x1
    ChristmasIsland          : Country = ... # 0x2d
    Bangladesh               : Country = ... # 0x12
    OutlyingOceania          : Country = ... # 0x103
    Mauritania               : Country = ... # 0x88
    Russia                   : Country = ... # 0xb2
    FrenchPolynesia          : Country = ... # 0x4d
    SouthSudan               : Country = ... # 0xfe
    Mongolia                 : Country = ... # 0x8f
    France                   : Country = ... # 0x4a
    SaintLucia               : Country = ... # 0xb5
    Bermuda                  : Country = ... # 0x18
    Slovakia                 : Country = ... # 0xbf
    CuraSao                  : Country = ... # 0x98
    Peru                     : Country = ... # 0xa9
    Laos                     : Country = ... # 0x75
    ClippertonIsland         : Country = ... # 0xf1
    Seychelles               : Country = ... # 0xbc
    Norway                   : Country = ... # 0xa1
    Argentina                : Country = ... # 0xa
    SintMaarten              : Country = ... # 0x100
    Benin                    : Country = ... # 0x17
    Cuba                     : Country = ... # 0x37
    PuertoRico               : Country = ... # 0xae
    Montenegro               : Country = ... # 0xf2
    NewZealand               : Country = ... # 0x9a
    Togo                     : Country = ... # 0xd4
    China                    : Country = ... # 0x2c
    SaintHelena              : Country = ... # 0xc7
    Armenia                  : Country = ... # 0xb
    BouvetIsland             : Country = ... # 0x1d
    Ukraine                  : Country = ... # 0xde
    Tonga                    : Country = ... # 0xd6
    Finland                  : Country = ... # 0x49
    FrenchGuiana             : Country = ... # 0x4c
    Libya                    : Country = ... # 0x7a
    CongoKinshasa            : Country = ... # 0x31
    Mauritius                : Country = ... # 0x89
    Liechtenstein            : Country = ... # 0x7b
    Belarus                  : Country = ... # 0x14
    HeardAndMcDonaldIslands  : Country = ... # 0x5f
    Mali                     : Country = ... # 0x84
    Sweden                   : Country = ... # 0xcd
    Iran                     : Country = ... # 0x66
    CaymanIslands            : Country = ... # 0x28
    Bulgaria                 : Country = ... # 0x21
    Romania                  : Country = ... # 0xb1
    Angola                   : Country = ... # 0x6
    Chad                     : Country = ... # 0x2a
    Tokelau                  : Country = ... # 0xd5
    Fiji                     : Country = ... # 0x48
    SouthGeorgiaAndTheSouthSandwichIslands: Country = ... # 0xc4
    MarshallIslands          : Country = ... # 0x86
    Malaysia                 : Country = ... # 0x82
    Austria                  : Country = ... # 0xe
    Vietnam                  : Country = ... # 0xe8
    Mozambique               : Country = ... # 0x92
    Uganda                   : Country = ... # 0xdd
    Tuvalu                   : Country = ... # 0xdc
    DemocraticRepublicOfKorea: Country = ... # 0x71
    Hungary                  : Country = ... # 0x62
    Niger                    : Country = ... # 0x9c
    UnitedStates             : Country = ... # 0xe1
    Brazil                   : Country = ... # 0x1e
    VaticanCityState         : Country = ... # 0xe6
    PeoplesRepublicOfCongo   : Country = ... # 0x32
    World                    : Country = ... # 0x104
    Pitcairn                 : Country = ... # 0xab
    Guinea                   : Country = ... # 0x5b
    Panama                   : Country = ... # 0xa6
    Qatar                    : Country = ... # 0xaf
    Luxembourg               : Country = ... # 0x7d
    Andorra                  : Country = ... # 0x5
    Gibraltar                : Country = ... # 0x54
    Ireland                  : Country = ... # 0x68
    Ghana                    : Country = ... # 0x53
    Palau                    : Country = ... # 0xa4
    Nigeria                  : Country = ... # 0x9d
    CentralAfricanRepublic   : Country = ... # 0x29
    IvoryCoast               : Country = ... # 0x35
    Ecuador                  : Country = ... # 0x3f
    SaoTomeAndPrincipe       : Country = ... # 0xb9
    Europe                   : Country = ... # 0x105
    Brunei                   : Country = ... # 0x20
    Australia                : Country = ... # 0xd
    FalklandIslands          : Country = ... # 0x46
    Algeria                  : Country = ... # 0x3
    Slovenia                 : Country = ... # 0xc0
    DemocraticRepublicOfCongo: Country = ... # 0x31
    AmericanSamoa            : Country = ... # 0x4
    SriLanka                 : Country = ... # 0xc6
    BritishIndianOceanTerritory: Country = ... # 0x1f
    EquatorialGuinea         : Country = ... # 0x42
    DiegoGarcia              : Country = ... # 0xf9
    Rwanda                   : Country = ... # 0xb3
    Chile                    : Country = ... # 0x2b
    Belgium                  : Country = ... # 0x15
    Kiribati                 : Country = ... # 0x70
    Haiti                    : Country = ... # 0x5e
    Belize                   : Country = ... # 0x16
    DominicanRepublic        : Country = ... # 0x3d
    Georgia                  : Country = ... # 0x51
    Denmark                  : Country = ... # 0x3a
    Philippines              : Country = ... # 0xaa
    TuvaluCountry            : Country = ... # 0xdc
    Moldova                  : Country = ... # 0x8d
    GuineaBissau             : Country = ... # 0x5c
    SaintKittsAndNevis       : Country = ... # 0xb4
    Croatia                  : Country = ... # 0x36
    Micronesia               : Country = ... # 0x8c
    Guernsey                 : Country = ... # 0x4b
    Thailand                 : Country = ... # 0xd3
    Namibia                  : Country = ... # 0x94
    Grenada                  : Country = ... # 0x57
    TurksAndCaicosIslands    : Country = ... # 0xdb
    Iraq                     : Country = ... # 0x67
    PapuaNewGuinea           : Country = ... # 0xa7
    Portugal                 : Country = ... # 0xad
    Estonia                  : Country = ... # 0x44
    Uruguay                  : Country = ... # 0xe3
    NorthKorea               : Country = ... # 0x71
    Lebanon                  : Country = ... # 0x77
    Uzbekistan               : Country = ... # 0xe4
    Tunisia                  : Country = ... # 0xd8
    Djibouti                 : Country = ... # 0x3b
    Spain                    : Country = ... # 0xc5
    Colombia                 : Country = ... # 0x2f
    Reunion                  : Country = ... # 0xb0
    Burundi                  : Country = ... # 0x23
    Taiwan                   : Country = ... # 0xd0
    Cyprus                   : Country = ... # 0x38
    Barbados                 : Country = ... # 0x13
    Somalia                  : Country = ... # 0xc2
    AntiguaAndBarbuda        : Country = ... # 0x9
    Madagascar               : Country = ... # 0x80
    SolomonIslands           : Country = ... # 0xc1
    Italy                    : Country = ... # 0x6a
    Bhutan                   : Country = ... # 0x19
    EuropeanUnion            : Country = ... # 0x102
    Sudan                    : Country = ... # 0xc9
    Serbia                   : Country = ... # 0xf3
    Nepal                    : Country = ... # 0x96
    SaintBarthelemy          : Country = ... # 0xf4
    Singapore                : Country = ... # 0xbe
    Malta                    : Country = ... # 0x85
    Malawi                   : Country = ... # 0x81
    Netherlands              : Country = ... # 0x97
    Suriname                 : Country = ... # 0xca
    PalestinianTerritories   : Country = ... # 0xa5
    SaintMartin              : Country = ... # 0xf5
    Anguilla                 : Country = ... # 0x7
    Venezuela                : Country = ... # 0xe7
    Israel                   : Country = ... # 0x69
    SanMarino                : Country = ... # 0xb8
    Indonesia                : Country = ... # 0x65
    LastCountry              : Country = ... # 0x105
    Iceland                  : Country = ... # 0x63
    BosniaAndHerzegowina     : Country = ... # 0x1b
    Kosovo                   : Country = ... # 0x101
    FrenchSouthernTerritories: Country = ... # 0x4e
    Zimbabwe                 : Country = ... # 0xf0
    Germany                  : Country = ... # 0x52
    Vanuatu                  : Country = ... # 0xe5
    Gambia                   : Country = ... # 0x50
    Senegal                  : Country = ... # 0xbb
    BurkinaFaso              : Country = ... # 0x22
    Kazakhstan               : Country = ... # 0x6e
    Poland                   : Country = ... # 0xac
    RepublicOfKorea          : Country = ... # 0x72
    BritishVirginIslands     : Country = ... # 0xe9
    Eritrea                  : Country = ... # 0x43
    Kyrgyzstan               : Country = ... # 0x74
    LatinAmericaAndTheCaribbean: Country = ... # 0xf6
    UnitedStatesMinorOutlyingIslands: Country = ... # 0xe2
    CostaRica                : Country = ... # 0x34
    EastTimor                : Country = ... # 0x3e
    Mayotte                  : Country = ... # 0x8a
    Montserrat               : Country = ... # 0x90
    LatinAmerica             : Country = ... # 0xf6
    Macedonia                : Country = ... # 0x7f
    RussianFederation        : Country = ... # 0xb2
    CookIslands              : Country = ... # 0x33
    WesternSahara            : Country = ... # 0xec
    Latvia                   : Country = ... # 0x76
    AlandIslands             : Country = ... # 0xf8
    Guyana                   : Country = ... # 0x5d
    Syria                    : Country = ... # 0xcf
    Guadeloupe               : Country = ... # 0x58
    SaudiArabia              : Country = ... # 0xba
    CapeVerde                : Country = ... # 0x27
    Morocco                  : Country = ... # 0x91
    Honduras                 : Country = ... # 0x60
    Myanmar                  : Country = ... # 0x93
    Mexico                   : Country = ... # 0x8b
    Egypt                    : Country = ... # 0x40
    SouthKorea               : Country = ... # 0x72
    ElSalvador               : Country = ... # 0x41
    UnitedStatesVirginIslands: Country = ... # 0xea
    SaintPierreAndMiquelon   : Country = ... # 0xc8
    Botswana                 : Country = ... # 0x1c
    Antarctica               : Country = ... # 0x8
    Greece                   : Country = ... # 0x55
    Paraguay                 : Country = ... # 0xa8
    Comoros                  : Country = ... # 0x30

    class CurrencySymbolFormat(object): ...
    CurrencyIsoCode          : CurrencySymbolFormat = ... # 0x0
    CurrencyDisplayName      : CurrencySymbolFormat = ... # 0x2
    CurrencySymbol           : CurrencySymbolFormat = ... # 0x1

    class DataSizeFormat(object): ...
    DataSizeSIFormat         : DataSizeFormat = ... # 0x3
    DataSizeIecFormat        : DataSizeFormat = ... # 0x0
    DataSizeSIQuantifiers    : DataSizeFormat = ... # 0x2
    DataSizeTraditionalFormat: DataSizeFormat = ... # 0x2
    DataSizeBase1000         : DataSizeFormat = ... # 0x1

    class DataSizeFormats(object): ...

    class FloatingPointPrecisionOption(object): ...
    FloatingPointShortest    : FloatingPointPrecisionOption = ... # -0x80

    class FormatType(object): ...
    NarrowFormat             : FormatType = ... # 0x2
    ShortFormat              : FormatType = ... # 0x1
    LongFormat               : FormatType = ... # 0x0

    class Language(object): ...
    Vai                      : Language = ... # 0xfc
    Palauan                  : Language = ... # 0x15e
    Gusii                    : Language = ... # 0xaf
    Nuer                     : Language = ... # 0xf7
    Rwa                      : Language = ... # 0xd1
    KoyraboroSenni           : Language = ... # 0xd5
    Meroitic                 : Language = ... # 0x123
    Navaho                   : Language = ... # 0xe8
    Masai                    : Language = ... # 0xca
    Bambara                  : Language = ... # 0xbc
    Santali                  : Language = ... # 0x130
    Duala                    : Language = ... # 0xf0
    AnyLanguage              : Language = ... # 0x0
    Tsonga                   : Language = ... # 0x7c
    Kanuri                   : Language = ... # 0xe1
    CongoSwahili             : Language = ... # 0xfa
    Kwasio                   : Language = ... # 0xf6
    Mazanderani              : Language = ... # 0x15a
    Shambala                 : Language = ... # 0xd6
    Yiddish                  : Language = ... # 0x89
    Ga                       : Language = ... # 0x94
    Cantonese                : Language = ... # 0x165
    Occitan                  : Language = ... # 0x56
    Tongan                   : Language = ... # 0x7b
    Lakota                   : Language = ... # 0x139
    OldTurkish               : Language = ... # 0x128
    SichuanYi                : Language = ... # 0xa8
    SwissGerman              : Language = ... # 0xa7
    LinearA                  : Language = ... # 0x14c
    Latin                    : Language = ... # 0x46
    Saurashtra               : Language = ... # 0x131
    SerboCroatian            : Language = ... # 0x64
    Zulu                     : Language = ... # 0x8c
    Georgian                 : Language = ... # 0x29
    Aramaic                  : Language = ... # 0x109
    Tigrinya                 : Language = ... # 0x7a
    Lezghian                 : Language = ... # 0x14f
    Tibetan                  : Language = ... # 0x79
    Embu                     : Language = ... # 0xbd
    EasternCham              : Language = ... # 0x114
    Ingush                   : Language = ... # 0x119
    Guarani                  : Language = ... # 0x2d
    Sidamo                   : Language = ... # 0x9b
    Divehi                   : Language = ... # 0x8f
    Herero                   : Language = ... # 0xdf
    TuvaluLanguage           : Language = ... # 0x163
    Greek                    : Language = ... # 0x2b
    Latvian                  : Language = ... # 0x47
    English                  : Language = ... # 0x1f
    Swati                    : Language = ... # 0x6b
    Croatian                 : Language = ... # 0x1b
    Chinese                  : Language = ... # 0x19
    Tachelhit                : Language = ... # 0xb7
    HmongNjua                : Language = ... # 0x14d
    Inuktitut                : Language = ... # 0x37
    Tatar                    : Language = ... # 0x76
    Pali                     : Language = ... # 0xeb
    Arabic                   : Language = ... # 0x8
    Venda                    : Language = ... # 0xa0
    Limbu                    : Language = ... # 0x11c
    Oriya                    : Language = ... # 0x57
    Lojban                   : Language = ... # 0x169
    Inupiak                  : Language = ... # 0x38
    Hindi                    : Language = ... # 0x31
    Ewondo                   : Language = ... # 0xf2
    Aymara                   : Language = ... # 0xb
    Koro                     : Language = ... # 0x9a
    Hungarian                : Language = ... # 0x32
    Wolof                    : Language = ... # 0x87
    Bosnian                  : Language = ... # 0x8e
    Russian                  : Language = ... # 0x60
    Kazakh                   : Language = ... # 0x3f
    NorwegianBokmal          : Language = ... # 0x55
    TokelauLanguage          : Language = ... # 0x161
    German                   : Language = ... # 0x2a
    Meru                     : Language = ... # 0xc5
    Etruscan                 : Language = ... # 0x116
    Basque                   : Language = ... # 0xe
    Akoose                   : Language = ... # 0x138
    Vietnamese               : Language = ... # 0x84
    LowGerman                : Language = ... # 0xaa
    Lu                       : Language = ... # 0x11e
    Chechen                  : Language = ... # 0xda
    Dutch                    : Language = ... # 0x1e
    Sanskrit                 : Language = ... # 0x63
    Saraiki                  : Language = ... # 0x160
    Bihari                   : Language = ... # 0x11
    Welsh                    : Language = ... # 0x86
    NorthNdebele             : Language = ... # 0xb5
    Lepcha                   : Language = ... # 0x11b
    NorthernSami             : Language = ... # 0xad
    Akan                     : Language = ... # 0x92
    Mru                      : Language = ... # 0x15b
    Kamba                    : Language = ... # 0x96
    Lisu                     : Language = ... # 0x11d
    Chakma                   : Language = ... # 0x110
    Bamun                    : Language = ... # 0x10b
    Jju                      : Language = ... # 0x9e
    Interlingua              : Language = ... # 0x35
    Japanese                 : Language = ... # 0x3b
    Kinyarwanda              : Language = ... # 0x40
    Interlingue              : Language = ... # 0x36
    Hebrew                   : Language = ... # 0x30
    Esperanto                : Language = ... # 0x20
    Swahili                  : Language = ... # 0x71
    Telugu                   : Language = ... # 0x77
    Newari                   : Language = ... # 0x15c
    Zarma                    : Language = ... # 0xef
    NauruLanguage            : Language = ... # 0x53
    Mundang                  : Language = ... # 0xf5
    ManichaeanMiddlePersian  : Language = ... # 0x149
    WesternFrisian           : Language = ... # 0x26
    Sylheti                  : Language = ... # 0x133
    Machame                  : Language = ... # 0xc8
    Bodo                     : Language = ... # 0xd7
    Morisyen                 : Language = ... # 0xbf
    Tamil                    : Language = ... # 0x75
    Carian                   : Language = ... # 0x10f
    Galician                 : Language = ... # 0x28
    Mandingo                 : Language = ... # 0x121
    Marshallese              : Language = ... # 0x51
    Marathi                  : Language = ... # 0x50
    Slovenian                : Language = ... # 0x6d
    Kabuverdianu             : Language = ... # 0xc4
    Azerbaijani              : Language = ... # 0xc
    Rombo                    : Language = ... # 0xb6
    Luo                      : Language = ... # 0xd2
    NorthernThai             : Language = ... # 0x124
    Sakha                    : Language = ... # 0xf8
    Bashkir                  : Language = ... # 0xd
    Norwegian                : Language = ... # 0x55
    Ganda                    : Language = ... # 0xc2
    Komi                     : Language = ... # 0xe2
    Aragonese                : Language = ... # 0x105
    Turkmen                  : Language = ... # 0x7e
    SouthernKurdish          : Language = ... # 0x16b
    Lycian                   : Language = ... # 0x11f
    HiriMotu                 : Language = ... # 0xe0
    Kabyle                   : Language = ... # 0xb8
    Asturian                 : Language = ... # 0x100
    Gothic                   : Language = ... # 0x117
    Ngiemboon                : Language = ... # 0x104
    Walser                   : Language = ... # 0xfd
    Prussian                 : Language = ... # 0x142
    Cherokee                 : Language = ... # 0xbe
    Pashto                   : Language = ... # 0x58
    Nko                      : Language = ... # 0x141
    Malagasy                 : Language = ... # 0x4b
    Maori                    : Language = ... # 0x4f
    Catalan                  : Language = ... # 0x18
    Igbo                     : Language = ... # 0x95
    Luxembourgish            : Language = ... # 0xe7
    Phoenician               : Language = ... # 0x12b
    Hausa                    : Language = ... # 0x2f
    NorthernLuri             : Language = ... # 0x15d
    JolaFonyi                : Language = ... # 0xf1
    Moldavian                : Language = ... # 0x5f
    ArdhamagadhiPrakrit      : Language = ... # 0x156
    Avaric                   : Language = ... # 0xd8
    Buginese                 : Language = ... # 0x10d
    Sinhala                  : Language = ... # 0x6a
    Afan                     : Language = ... # 0x3
    LastLanguage             : Language = ... # 0x16c
    MakhuwaMeetto            : Language = ... # 0xf4
    Maithili                 : Language = ... # 0x153
    TokPisin                 : Language = ... # 0x162
    SouthernSami             : Language = ... # 0x144
    Konkani                  : Language = ... # 0x93
    Rejang                   : Language = ... # 0x12d
    TedimChin                : Language = ... # 0x152
    HieroglyphicLuwian       : Language = ... # 0x158
    Balinese                 : Language = ... # 0x10a
    Dogri                    : Language = ... # 0x113
    Bafia                    : Language = ... # 0xf3
    Ukrainian                : Language = ... # 0x81
    Maltese                  : Language = ... # 0x4e
    Assamese                 : Language = ... # 0xa
    Lydian                   : Language = ... # 0x120
    Nama                     : Language = ... # 0xc7
    Samaritan                : Language = ... # 0x12f
    Tswana                   : Language = ... # 0x67
    Buhid                    : Language = ... # 0x10e
    Coptic                   : Language = ... # 0x112
    SkoltSami                : Language = ... # 0x147
    Frisian                  : Language = ... # 0x26
    Portuguese               : Language = ... # 0x5b
    OldIrish                 : Language = ... # 0x125
    Bena                     : Language = ... # 0xba
    Avestan                  : Language = ... # 0xff
    Teso                     : Language = ... # 0xce
    CentralMoroccoTamazight  : Language = ... # 0xd4
    StandardMoroccanTamazight: Language = ... # 0x13a
    Yangben                  : Language = ... # 0xfe
    Cornish                  : Language = ... # 0x91
    Bulgarian                : Language = ... # 0x14
    Yoruba                   : Language = ... # 0x8a
    Nyankole                 : Language = ... # 0xb9
    French                   : Language = ... # 0x25
    Bengali                  : Language = ... # 0xf
    Haitian                  : Language = ... # 0xde
    Byelorussian             : Language = ... # 0x16
    Nepali                   : Language = ... # 0x54
    Finnish                  : Language = ... # 0x24
    Sundanese                : Language = ... # 0x70
    Albanian                 : Language = ... # 0x6
    Osage                    : Language = ... # 0x166
    Ngomba                   : Language = ... # 0x101
    Tagalog                  : Language = ... # 0xa6
    Serbian                  : Language = ... # 0x64
    Italian                  : Language = ... # 0x3a
    Walloon                  : Language = ... # 0xec
    Chamorro                 : Language = ... # 0xd9
    Tagbanwa                 : Language = ... # 0x134
    Amharic                  : Language = ... # 0x7
    Tajik                    : Language = ... # 0x74
    Urdu                     : Language = ... # 0x82
    Soga                     : Language = ... # 0xcb
    Sena                     : Language = ... # 0xb4
    OldNorse                 : Language = ... # 0x126
    Ossetic                  : Language = ... # 0x65
    Mapuche                  : Language = ... # 0x13b
    Fulah                    : Language = ... # 0xb1
    Uighur                   : Language = ... # 0x80
    Colognian                : Language = ... # 0xc9
    Cree                     : Language = ... # 0xdd
    Langi                    : Language = ... # 0xc1
    Indonesian               : Language = ... # 0x34
    Hawaiian                 : Language = ... # 0xa3
    LubaKatanga              : Language = ... # 0xe6
    Kenyang                  : Language = ... # 0x13f
    Uigur                    : Language = ... # 0x80
    Thai                     : Language = ... # 0x78
    Afrikaans                : Language = ... # 0x5
    C                        : Language = ... # 0x1
    KoyraChiini              : Language = ... # 0xd0
    NorwegianNynorsk         : Language = ... # 0x8d
    Ugaritic                 : Language = ... # 0x137
    Uzbek                    : Language = ... # 0x83
    Kalenjin                 : Language = ... # 0xc6
    Gaelic                   : Language = ... # 0x27
    Burmese                  : Language = ... # 0x15
    Ahom                     : Language = ... # 0x154
    Lingala                  : Language = ... # 0x48
    Kwanyama                 : Language = ... # 0xe4
    Syriac                   : Language = ... # 0x97
    Meta                     : Language = ... # 0x103
    Friulian                 : Language = ... # 0x9f
    Breton                   : Language = ... # 0x13
    Turkish                  : Language = ... # 0x7d
    Samoan                   : Language = ... # 0x61
    Khmer                    : Language = ... # 0x17
    Chuvash                  : Language = ... # 0xdc
    Lithuanian               : Language = ... # 0x49
    Malay                    : Language = ... # 0x4c
    Armenian                 : Language = ... # 0x9
    Mohawk                   : Language = ... # 0x140
    Romansh                  : Language = ... # 0x5e
    Taita                    : Language = ... # 0xb0
    Javanese                 : Language = ... # 0x3c
    EasternKayah             : Language = ... # 0x115
    TaiDam                   : Language = ... # 0x135
    LowerSorbian             : Language = ... # 0x13d
    Kannada                  : Language = ... # 0x3d
    Persian                  : Language = ... # 0x59
    Mongolian                : Language = ... # 0x52
    Dzongkha                 : Language = ... # 0x10
    Church                   : Language = ... # 0xdb
    Shona                    : Language = ... # 0x68
    Corsican                 : Language = ... # 0x1a
    Kpelle                   : Language = ... # 0xa9
    Somali                   : Language = ... # 0x6e
    UncodedLanguages         : Language = ... # 0x164
    Kako                     : Language = ... # 0x102
    Tahitian                 : Language = ... # 0x7f
    Sora                     : Language = ... # 0x132
    LuleSami                 : Language = ... # 0x145
    WesternBalochi           : Language = ... # 0x16c
    ClassicalMandaic         : Language = ... # 0x111
    Parthian                 : Language = ... # 0x12a
    Sangu                    : Language = ... # 0xf9
    Aghem                    : Language = ... # 0xed
    Sango                    : Language = ... # 0x62
    Makonde                  : Language = ... # 0xc0
    Oromo                    : Language = ... # 0x3
    Hanunoo                  : Language = ... # 0x118
    Limburgish               : Language = ... # 0xe5
    SouthernSotho            : Language = ... # 0x66
    Bemba                    : Language = ... # 0xc3
    Blin                     : Language = ... # 0x98
    Tyap                     : Language = ... # 0xa4
    Quechua                  : Language = ... # 0x5d
    Tangut                   : Language = ... # 0x167
    Estonian                 : Language = ... # 0x21
    Kurundi                  : Language = ... # 0x44
    TaiNua                   : Language = ... # 0x136
    NorthernSotho            : Language = ... # 0xac
    OldPersian               : Language = ... # 0x127
    Fijian                   : Language = ... # 0x23
    Asu                      : Language = ... # 0xcd
    UpperSorbian             : Language = ... # 0x13e
    Samburu                  : Language = ... # 0xb3
    CentralKurdish           : Language = ... # 0x13c
    Filipino                 : Language = ... # 0xa6
    Manx                     : Language = ... # 0x90
    Mono                     : Language = ... # 0x151
    AmericanSignLanguage     : Language = ... # 0x155
    LiteraryChinese          : Language = ... # 0x159
    Malayalam                : Language = ... # 0x4d
    Taroko                   : Language = ... # 0xae
    Bislama                  : Language = ... # 0x12
    Kongo                    : Language = ... # 0xe3
    BatakToba                : Language = ... # 0x10c
    Papiamento               : Language = ... # 0x15f
    Slovak                   : Language = ... # 0x6c
    Polish                   : Language = ... # 0x5a
    Kirghiz                  : Language = ... # 0x41
    Xhosa                    : Language = ... # 0x88
    Swedish                  : Language = ... # 0x72
    Atsam                    : Language = ... # 0x9c
    Chewa                    : Language = ... # 0xa5
    Ewe                      : Language = ... # 0xa1
    Faroese                  : Language = ... # 0x22
    Danish                   : Language = ... # 0x1d
    Volapuk                  : Language = ... # 0x85
    Pahlavi                  : Language = ... # 0x129
    Ho                       : Language = ... # 0x14e
    SouthNdebele             : Language = ... # 0xab
    Vunjo                    : Language = ... # 0xbb
    Kikuyu                   : Language = ... # 0xb2
    Bassa                    : Language = ... # 0x150
    Punjabi                  : Language = ... # 0x5c
    Tigre                    : Language = ... # 0x9d
    Bhojpuri                 : Language = ... # 0x157
    Warlpiri                 : Language = ... # 0x148
    Bhutani                  : Language = ... # 0x10
    AncientGreek             : Language = ... # 0x108
    Manipuri                 : Language = ... # 0x122
    RhaetoRomance            : Language = ... # 0x5e
    Icelandic                : Language = ... # 0x33
    AncientNorthArabian      : Language = ... # 0x14b
    InariSami                : Language = ... # 0x146
    Twi                      : Language = ... # 0x92
    Greenlandic              : Language = ... # 0x2c
    Gujarati                 : Language = ... # 0x2e
    Akkadian                 : Language = ... # 0x106
    Sindhi                   : Language = ... # 0x69
    Korean                   : Language = ... # 0x42
    Nyanja                   : Language = ... # 0xa5
    LargeFloweryMiao         : Language = ... # 0x11a
    Basaa                    : Language = ... # 0xee
    Kashmiri                 : Language = ... # 0x3e
    Luyia                    : Language = ... # 0xcc
    AncientEgyptian          : Language = ... # 0x107
    Saho                     : Language = ... # 0xcf
    Chiga                    : Language = ... # 0xd3
    Afar                     : Language = ... # 0x4
    Irish                    : Language = ... # 0x39
    Sicilian                 : Language = ... # 0x16a
    Czech                    : Language = ... # 0x1c
    Kiche                    : Language = ... # 0x143
    Belarusian               : Language = ... # 0x16
    Macedonian               : Language = ... # 0x4a
    PrakritLanguage          : Language = ... # 0x12c
    Tasawaq                  : Language = ... # 0xfb
    Romanian                 : Language = ... # 0x5f
    Sardinian                : Language = ... # 0x73
    Lao                      : Language = ... # 0x45
    Mende                    : Language = ... # 0x14a
    Ojibwa                   : Language = ... # 0xea
    Kurdish                  : Language = ... # 0x43
    Walamo                   : Language = ... # 0xa2
    Geez                     : Language = ... # 0x99
    Spanish                  : Language = ... # 0x6f
    Ido                      : Language = ... # 0x168
    Rundi                    : Language = ... # 0x44
    Abkhazian                : Language = ... # 0x2
    Ndonga                   : Language = ... # 0xe9
    Sabaean                  : Language = ... # 0x12e
    Cambodian                : Language = ... # 0x17
    Zhuang                   : Language = ... # 0x8b

    class MeasurementSystem(object): ...
    ImperialUKSystem         : MeasurementSystem = ... # 0x2
    ImperialUSSystem         : MeasurementSystem = ... # 0x1
    ImperialSystem           : MeasurementSystem = ... # 0x1
    MetricSystem             : MeasurementSystem = ... # 0x0

    class NumberOption(object): ...
    IncludeTrailingZeroesAfterDot: NumberOption = ... # 0x10
    RejectGroupSeparator     : NumberOption = ... # 0x2
    RejectTrailingZeroesAfterDot: NumberOption = ... # 0x20
    DefaultNumberOptions     : NumberOption = ... # 0x0
    RejectLeadingZeroInExponent: NumberOption = ... # 0x8
    OmitGroupSeparator       : NumberOption = ... # 0x1
    OmitLeadingZeroInExponent: NumberOption = ... # 0x4

    class NumberOptions(object): ...

    class QuotationStyle(object): ...
    StandardQuotation        : QuotationStyle = ... # 0x0
    AlternateQuotation       : QuotationStyle = ... # 0x1

    class Script(object): ...
    MultaniScript            : Script = ... # 0x83
    CherokeeScript           : Script = ... # 0xc
    VarangKshitiScript       : Script = ... # 0x7f
    ThaiScript               : Script = ... # 0x1e
    SinhalaScript            : Script = ... # 0x20
    PauCinHauScript          : Script = ... # 0x79
    KhmerScript              : Script = ... # 0x14
    CaucasianAlbanianScript  : Script = ... # 0x69
    NkoScript                : Script = ... # 0x4b
    PalmyreneScript          : Script = ... # 0x78
    ChakmaScript             : Script = ... # 0x2e
    NewTaiLueScript          : Script = ... # 0x4c
    AvestanScript            : Script = ... # 0x24
    MeroiticCursiveScript    : Script = ... # 0x4a
    HanunooScript            : Script = ... # 0x38
    YiScript                 : Script = ... # 0x22
    CuneiformScript          : Script = ... # 0x5e
    KhojkiScript             : Script = ... # 0x6f
    BassaVahScript           : Script = ... # 0x6a
    ModiScript               : Script = ... # 0x74
    RunicScript              : Script = ... # 0x58
    SyriacScript             : Script = ... # 0x21
    DuployanScript           : Script = ... # 0x6b
    MongolianScript          : Script = ... # 0x8
    TaiLeScript              : Script = ... # 0x63
    LinearBScript            : Script = ... # 0x44
    TagalogScript            : Script = ... # 0x61
    AhomScript               : Script = ... # 0x80
    InscriptionalPahlaviScript: Script = ... # 0x3a
    SiddhamScript            : Script = ... # 0x7c
    LimbuScript              : Script = ... # 0x43
    MahajaniScript           : Script = ... # 0x71
    ImperialAramaicScript    : Script = ... # 0x39
    GothicScript             : Script = ... # 0x35
    HanWithBopomofoScript    : Script = ... # 0x8c
    CyrillicScript           : Script = ... # 0x2
    OldSouthArabianScript    : Script = ... # 0x51
    MalayalamScript          : Script = ... # 0x18
    KannadaScript            : Script = ... # 0x15
    PhoenicianScript         : Script = ... # 0x55
    AdlamScript              : Script = ... # 0x86
    GujaratiScript           : Script = ... # 0x11
    SylotiNagriScript        : Script = ... # 0x60
    BopomofoScript           : Script = ... # 0x28
    LinearAScript            : Script = ... # 0x70
    BuhidScript              : Script = ... # 0x2b
    TagbanwaScript           : Script = ... # 0x62
    InscriptionalParthianScript: Script = ... # 0x3b
    MendeKikakuiScript       : Script = ... # 0x73
    GranthaScript            : Script = ... # 0x6d
    LannaScript              : Script = ... # 0x41
    CanadianAboriginalScript : Script = ... # 0x2c
    NabataeanScript          : Script = ... # 0x77
    TirhutaScript            : Script = ... # 0x7e
    TraditionalHanScript     : Script = ... # 0x6
    BengaliScript            : Script = ... # 0xb
    BrailleScript            : Script = ... # 0x67
    PollardPhoneticScript    : Script = ... # 0x56
    PhagsPaScript            : Script = ... # 0x54
    ShavianScript            : Script = ... # 0x5c
    SignWritingScript        : Script = ... # 0x85
    MeiteiMayekScript        : Script = ... # 0x48
    OghamScript              : Script = ... # 0x4d
    CypriotScript            : Script = ... # 0x31
    OldPersianScript         : Script = ... # 0x50
    TaiVietScript            : Script = ... # 0x64
    JapaneseScript           : Script = ... # 0x13
    VaiScript                : Script = ... # 0x23
    SimplifiedHanScript      : Script = ... # 0x5
    BatakScript              : Script = ... # 0x27
    TeluguScript             : Script = ... # 0x1c
    SimplifiedChineseScript  : Script = ... # 0x5
    AnatolianHieroglyphsScript: Script = ... # 0x81
    ManichaeanScript         : Script = ... # 0x72
    MeroiticScript           : Script = ... # 0x49
    PsalterPahlaviScript     : Script = ... # 0x7b
    LycianScript             : Script = ... # 0x45
    GreekScript              : Script = ... # 0x10
    PahawhHmongScript        : Script = ... # 0x6e
    EgyptianHieroglyphsScript: Script = ... # 0x32
    BamumScript              : Script = ... # 0x26
    NewaScript               : Script = ... # 0x89
    OldNorthArabianScript    : Script = ... # 0x76
    KatakanaScript           : Script = ... # 0x3e
    BrahmiScript             : Script = ... # 0x29
    GeorgianScript           : Script = ... # 0xf
    LepchaScript             : Script = ... # 0x42
    BhaiksukiScript          : Script = ... # 0x87
    MandaeanScript           : Script = ... # 0x47
    GlagoliticScript         : Script = ... # 0x34
    BugineseScript           : Script = ... # 0x2a
    SundaneseScript          : Script = ... # 0x5f
    MroScript                : Script = ... # 0x75
    OsageScript              : Script = ... # 0x8a
    HangulScript             : Script = ... # 0x37
    DevanagariScript         : Script = ... # 0xd
    LatinScript              : Script = ... # 0x7
    SaurashtraScript         : Script = ... # 0x5a
    OlChikiScript            : Script = ... # 0x4e
    DeseretScript            : Script = ... # 0x3
    RejangScript             : Script = ... # 0x57
    FraserScript             : Script = ... # 0x33
    OsmanyaScript            : Script = ... # 0x53
    GurmukhiScript           : Script = ... # 0x4
    OldHungarianScript       : Script = ... # 0x84
    LydianScript             : Script = ... # 0x46
    SamaritanScript          : Script = ... # 0x59
    TibetanScript            : Script = ... # 0x1f
    HatranScript             : Script = ... # 0x82
    HiraganaScript           : Script = ... # 0x68
    KaithiScript             : Script = ... # 0x3d
    HebrewScript             : Script = ... # 0x12
    EthiopicScript           : Script = ... # 0xe
    JavaneseScript           : Script = ... # 0x3c
    KayahLiScript            : Script = ... # 0x3f
    TangutScript             : Script = ... # 0x8b
    OrkhonScript             : Script = ... # 0x52
    TraditionalChineseScript : Script = ... # 0x6
    LastScript               : Script = ... # 0x8d
    KhudawadiScript          : Script = ... # 0x7d
    MyanmarScript            : Script = ... # 0x19
    KoreanScript             : Script = ... # 0x16
    OldPermicScript          : Script = ... # 0x7a
    AnyScript                : Script = ... # 0x0
    OldItalicScript          : Script = ... # 0x4f
    TakriScript              : Script = ... # 0x65
    UgariticScript           : Script = ... # 0x66
    OriyaScript              : Script = ... # 0x1a
    HanScript                : Script = ... # 0x36
    TifinaghScript           : Script = ... # 0x9
    ThaanaScript             : Script = ... # 0x1d
    LaoScript                : Script = ... # 0x17
    ArabicScript             : Script = ... # 0x1
    BalineseScript           : Script = ... # 0x25
    ChamScript               : Script = ... # 0x2f
    MarchenScript            : Script = ... # 0x88
    JamoScript               : Script = ... # 0x8d
    SharadaScript            : Script = ... # 0x5b
    ElbasanScript            : Script = ... # 0x6c
    KharoshthiScript         : Script = ... # 0x40
    CopticScript             : Script = ... # 0x30
    CarianScript             : Script = ... # 0x2d
    SoraSompengScript        : Script = ... # 0x5d
    ArmenianScript           : Script = ... # 0xa
    TamilScript              : Script = ... # 0x1b

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, language: PySide2.QtCore.QLocale.Language, country: PySide2.QtCore.QLocale.Country=...): ...
    @typing.overload
    def __init__(self, language: PySide2.QtCore.QLocale.Language, script: PySide2.QtCore.QLocale.Script, country: PySide2.QtCore.QLocale.Country): ...
    @typing.overload
    def __init__(self, name: str): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QLocale): ...

    def __copy__(self): ...
    def amText(self) -> str: ...
    def bcp47Name(self) -> str: ...
    @staticmethod
    def c() -> PySide2.QtCore.QLocale: ...
    @staticmethod
    def countriesForLanguage(lang: PySide2.QtCore.QLocale.Language) -> List[PySide2.QtCore.QLocale.Country]: ...
    def country(self) -> PySide2.QtCore.QLocale.Country: ...
    @staticmethod
    def countryToString(country: PySide2.QtCore.QLocale.Country) -> str: ...
    def createSeparatedList(self, strl: List[str]) -> str: ...
    def currencySymbol(self, arg__1: PySide2.QtCore.QLocale.CurrencySymbolFormat=...) -> str: ...
    def dateFormat(self, format: PySide2.QtCore.QLocale.FormatType=...) -> str: ...
    def dateTimeFormat(self, format: PySide2.QtCore.QLocale.FormatType=...) -> str: ...
    def dayName(self, arg__1: int, format: PySide2.QtCore.QLocale.FormatType=...) -> str: ...
    def decimalPoint(self) -> Char: ...
    def exponential(self) -> Char: ...
    def firstDayOfWeek(self) -> PySide2.QtCore.Qt.DayOfWeek: ...
    def formattedDataSize(self, bytes: int, precision: int=..., format: PySide2.QtCore.QLocale.DataSizeFormats=...) -> str: ...
    def groupSeparator(self) -> Char: ...
    def language(self) -> PySide2.QtCore.QLocale.Language: ...
    @staticmethod
    def languageToString(language: PySide2.QtCore.QLocale.Language) -> str: ...
    @staticmethod
    def matchingLocales(language: PySide2.QtCore.QLocale.Language, script: PySide2.QtCore.QLocale.Script, country: PySide2.QtCore.QLocale.Country) -> List[PySide2.QtCore.QLocale]: ...
    def measurementSystem(self) -> PySide2.QtCore.QLocale.MeasurementSystem: ...
    def monthName(self, arg__1: int, format: PySide2.QtCore.QLocale.FormatType=...) -> str: ...
    def name(self) -> str: ...
    def nativeCountryName(self) -> str: ...
    def nativeLanguageName(self) -> str: ...
    def negativeSign(self) -> Char: ...
    def numberOptions(self) -> PySide2.QtCore.QLocale.NumberOptions: ...
    def percent(self) -> Char: ...
    def pmText(self) -> str: ...
    def positiveSign(self) -> Char: ...
    @typing.overload
    def quoteString(self, str: str, style: PySide2.QtCore.QLocale.QuotationStyle=...) -> str: ...
    @typing.overload
    def quoteString(self, str: str, style: PySide2.QtCore.QLocale.QuotationStyle=...) -> str: ...
    def script(self) -> PySide2.QtCore.QLocale.Script: ...
    @staticmethod
    def scriptToString(script: PySide2.QtCore.QLocale.Script) -> str: ...
    @staticmethod
    def setDefault(locale: PySide2.QtCore.QLocale): ...
    def setNumberOptions(self, options: PySide2.QtCore.QLocale.NumberOptions): ...
    def standaloneDayName(self, arg__1: int, format: PySide2.QtCore.QLocale.FormatType=...) -> str: ...
    def standaloneMonthName(self, arg__1: int, format: PySide2.QtCore.QLocale.FormatType=...) -> str: ...
    def swap(self, other: PySide2.QtCore.QLocale): ...
    @staticmethod
    def system() -> PySide2.QtCore.QLocale: ...
    def textDirection(self) -> PySide2.QtCore.Qt.LayoutDirection: ...
    def timeFormat(self, format: PySide2.QtCore.QLocale.FormatType=...) -> str: ...
    @typing.overload
    def toCurrencyString(self, arg__1: float, symbol: str, precision: int) -> str: ...
    @typing.overload
    def toCurrencyString(self, arg__1: float, symbol: str=...) -> str: ...
    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str=...) -> str: ...
    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str=...) -> str: ...
    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str=...) -> str: ...
    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str=...) -> str: ...
    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str=...) -> str: ...
    @typing.overload
    def toCurrencyString(self, arg__1: int, symbol: str=...) -> str: ...
    @typing.overload
    def toCurrencyString(self, i: float, symbol: str, precision: int) -> str: ...
    @typing.overload
    def toCurrencyString(self, i: float, symbol: str=...) -> str: ...
    @typing.overload
    def toDate(self, string: str, format: PySide2.QtCore.QLocale.FormatType=...) -> PySide2.QtCore.QDate: ...
    @typing.overload
    def toDate(self, string: str, format: str) -> PySide2.QtCore.QDate: ...
    @typing.overload
    def toDateTime(self, string: str, format: PySide2.QtCore.QLocale.FormatType=...) -> PySide2.QtCore.QDateTime: ...
    @typing.overload
    def toDateTime(self, string: str, format: str) -> PySide2.QtCore.QDateTime: ...
    def toDouble(self, s: str, ok: bool) -> float: ...
    def toFloat(self, s: str, ok: bool) -> float: ...
    def toInt(self, s: str, ok: Optional[bool]=...) -> int: ...
    @typing.overload
    def toLong(self, s: str, ok: Optional[bool]=...) -> int: ...
    @typing.overload
    def toLong(self, s: str, ok: Optional[bool]=...) -> int: ...
    def toLongLong(self, s: str, ok: Optional[bool]=...) -> int: ...
    def toLower(self, str: str) -> str: ...
    def toShort(self, s: str, ok: Optional[bool]=...) -> int: ...
    @typing.overload
    def toString(self, date: PySide2.QtCore.QDate, format: PySide2.QtCore.QLocale.FormatType=...) -> str: ...
    @typing.overload
    def toString(self, date: PySide2.QtCore.QDate, formatStr: str) -> str: ...
    @typing.overload
    def toString(self, dateTime: PySide2.QtCore.QDateTime, format: PySide2.QtCore.QLocale.FormatType=...) -> str: ...
    @typing.overload
    def toString(self, dateTime: PySide2.QtCore.QDateTime, format: str) -> str: ...
    @typing.overload
    def toString(self, i: float, f: Char=..., prec: int=...) -> str: ...
    @typing.overload
    def toString(self, i: float, f: Char=..., prec: int=...) -> str: ...
    @typing.overload
    def toString(self, i: int) -> str: ...
    @typing.overload
    def toString(self, i: int) -> str: ...
    @typing.overload
    def toString(self, i: int) -> str: ...
    @typing.overload
    def toString(self, i: int) -> str: ...
    @typing.overload
    def toString(self, i: int) -> str: ...
    @typing.overload
    def toString(self, time: PySide2.QtCore.QTime, format: PySide2.QtCore.QLocale.FormatType=...) -> str: ...
    @typing.overload
    def toString(self, time: PySide2.QtCore.QTime, formatStr: str) -> str: ...
    @typing.overload
    def toTime(self, string: str, format: PySide2.QtCore.QLocale.FormatType=...) -> PySide2.QtCore.QTime: ...
    @typing.overload
    def toTime(self, string: str, format: str) -> PySide2.QtCore.QTime: ...
    def toUInt(self, s: str, ok: bool) -> int: ...
    @typing.overload
    def toULong(self, s: str, ok: Optional[bool]=...) -> int: ...
    @typing.overload
    def toULong(self, s: str, ok: Optional[bool]=...) -> int: ...
    def toULongLong(self, s: str, ok: bool) -> int: ...
    def toUShort(self, s: str, ok: Optional[bool]=...) -> int: ...
    def toUpper(self, str: str) -> str: ...
    def uiLanguages(self) -> List[str]: ...
    def weekdays(self) -> List[PySide2.QtCore.Qt.DayOfWeek]: ...
    def zeroDigit(self) -> Char: ...


class QLockFile(Shiboken.Object):

    class LockError(object): ...
    PermissionError          : LockError = ... # 0x2
    UnknownError             : LockError = ... # 0x3
    NoError                  : LockError = ... # 0x0
    LockFailedError          : LockError = ... # 0x1

    def __init__(self, fileName: str): ...

    def error(self) -> PySide2.QtCore.QLockFile.LockError: ...
    def getLockInfo(self, pid: int, hostname: str, appname: str) -> bool: ...
    def isLocked(self) -> bool: ...
    def lock(self) -> bool: ...
    def removeStaleLockFile(self) -> bool: ...
    def setStaleLockTime(self, arg__1: int): ...
    def staleLockTime(self) -> int: ...
    def tryLock(self, timeout: int=...) -> bool: ...
    def unlock(self): ...


class QMargins(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QMargins: PySide2.QtCore.QMargins): ...
    @typing.overload
    def __init__(self, left: int, top: int, right: int, bottom: int): ...

    @typing.overload
    def __add__(self, lhs: int) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __add__(self, m2: PySide2.QtCore.QMargins) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __add__(self, rhs: int) -> PySide2.QtCore.QMargins: ...
    def __copy__(self): ...
    @typing.overload
    def __div__(self, divisor: float) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __div__(self, divisor: int) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __iadd__(self, arg__1: int) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __iadd__(self, margins: PySide2.QtCore.QMargins) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __imul__(self, arg__1: float) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __imul__(self, arg__1: int) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __isub__(self, arg__1: int) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __isub__(self, margins: PySide2.QtCore.QMargins) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __mul__(self, factor: float) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __mul__(self, factor: int) -> PySide2.QtCore.QMargins: ...
    def __neg__(self) -> PySide2.QtCore.QMargins: ...
    def __pos__(self) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __sub__(self, m2: PySide2.QtCore.QMargins) -> PySide2.QtCore.QMargins: ...
    @typing.overload
    def __sub__(self, rhs: int) -> PySide2.QtCore.QMargins: ...
    def bottom(self) -> int: ...
    def isNull(self) -> bool: ...
    def left(self) -> int: ...
    def right(self) -> int: ...
    def setBottom(self, bottom: int): ...
    def setLeft(self, left: int): ...
    def setRight(self, right: int): ...
    def setTop(self, top: int): ...
    def top(self) -> int: ...


class QMarginsF(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QMarginsF: PySide2.QtCore.QMarginsF): ...
    @typing.overload
    def __init__(self, left: float, top: float, right: float, bottom: float): ...
    @typing.overload
    def __init__(self, margins: PySide2.QtCore.QMargins): ...

    @typing.overload
    def __add__(self, lhs: float) -> PySide2.QtCore.QMarginsF: ...
    @typing.overload
    def __add__(self, rhs: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QMarginsF: ...
    @typing.overload
    def __add__(self, rhs: float) -> PySide2.QtCore.QMarginsF: ...
    def __copy__(self): ...
    def __div__(self, divisor: float) -> PySide2.QtCore.QMarginsF: ...
    @typing.overload
    def __iadd__(self, addend: float) -> PySide2.QtCore.QMarginsF: ...
    @typing.overload
    def __iadd__(self, margins: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QMarginsF: ...
    def __imul__(self, factor: float) -> PySide2.QtCore.QMarginsF: ...
    @typing.overload
    def __isub__(self, margins: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QMarginsF: ...
    @typing.overload
    def __isub__(self, subtrahend: float) -> PySide2.QtCore.QMarginsF: ...
    @typing.overload
    def __mul__(self, lhs: float) -> PySide2.QtCore.QMarginsF: ...
    @typing.overload
    def __mul__(self, rhs: float) -> PySide2.QtCore.QMarginsF: ...
    def __neg__(self) -> PySide2.QtCore.QMarginsF: ...
    def __pos__(self) -> PySide2.QtCore.QMarginsF: ...
    @typing.overload
    def __sub__(self, rhs: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QMarginsF: ...
    @typing.overload
    def __sub__(self, rhs: float) -> PySide2.QtCore.QMarginsF: ...
    def bottom(self) -> float: ...
    def isNull(self) -> bool: ...
    def left(self) -> float: ...
    def right(self) -> float: ...
    def setBottom(self, bottom: float): ...
    def setLeft(self, left: float): ...
    def setRight(self, right: float): ...
    def setTop(self, top: float): ...
    def toMargins(self) -> PySide2.QtCore.QMargins: ...
    def top(self) -> float: ...


class QMessageAuthenticationCode(Shiboken.Object):

    def __init__(self, method: PySide2.QtCore.QCryptographicHash.Algorithm, key: PySide2.QtCore.QByteArray=...): ...

    @typing.overload
    def addData(self, data: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def addData(self, data: str, length: int): ...
    @typing.overload
    def addData(self, device: PySide2.QtCore.QIODevice) -> bool: ...
    @staticmethod
    def hash(message: PySide2.QtCore.QByteArray, key: PySide2.QtCore.QByteArray, method: PySide2.QtCore.QCryptographicHash.Algorithm) -> PySide2.QtCore.QByteArray: ...
    def reset(self): ...
    def result(self) -> PySide2.QtCore.QByteArray: ...
    def setKey(self, key: PySide2.QtCore.QByteArray): ...


class QMessageLogContext(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, fileName: str, lineNumber: int, functionName: str, categoryName: str): ...


class QMetaClassInfo(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QMetaClassInfo: PySide2.QtCore.QMetaClassInfo): ...

    def __copy__(self): ...
    def name(self) -> str: ...
    def value(self) -> str: ...


class QMetaEnum(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QMetaEnum: PySide2.QtCore.QMetaEnum): ...

    def __copy__(self): ...
    def enumName(self) -> str: ...
    def isFlag(self) -> bool: ...
    def isScoped(self) -> bool: ...
    def isValid(self) -> bool: ...
    def key(self, index: int) -> str: ...
    def keyCount(self) -> int: ...
    def keyToValue(self, key: str, ok: Optional[bool]=...) -> int: ...
    def keysToValue(self, keys: str, ok: Optional[bool]=...) -> int: ...
    def name(self) -> str: ...
    def scope(self) -> str: ...
    def value(self, index: int) -> int: ...
    def valueToKey(self, value: int) -> str: ...
    def valueToKeys(self, value: int) -> PySide2.QtCore.QByteArray: ...


class QMetaMethod(Shiboken.Object):

    class Access(object): ...
    Public                   : Access = ... # 0x2
    Protected                : Access = ... # 0x1
    Private                  : Access = ... # 0x0

    class MethodType(object): ...
    Slot                     : MethodType = ... # 0x2
    Constructor              : MethodType = ... # 0x3
    Method                   : MethodType = ... # 0x0
    Signal                   : MethodType = ... # 0x1

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QMetaMethod: PySide2.QtCore.QMetaMethod): ...

    def __copy__(self): ...
    def access(self) -> PySide2.QtCore.QMetaMethod.Access: ...
    def enclosingMetaObject(self) -> PySide2.QtCore.QMetaObject: ...
    @typing.overload
    def invoke(self, object: PySide2.QtCore.QObject, connectionType: PySide2.QtCore.Qt.ConnectionType, returnValue: PySide2.QtCore.QGenericReturnArgument, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> bool: ...
    @typing.overload
    def invoke(self, object: PySide2.QtCore.QObject, connectionType: PySide2.QtCore.Qt.ConnectionType, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> bool: ...
    @typing.overload
    def invoke(self, object: PySide2.QtCore.QObject, returnValue: PySide2.QtCore.QGenericReturnArgument, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> bool: ...
    @typing.overload
    def invoke(self, object: PySide2.QtCore.QObject, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> bool: ...
    @typing.overload
    def invokeOnGadget(self, gadget: int, returnValue: PySide2.QtCore.QGenericReturnArgument, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> bool: ...
    @typing.overload
    def invokeOnGadget(self, gadget: int, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> bool: ...
    def isValid(self) -> bool: ...
    def methodIndex(self) -> int: ...
    def methodSignature(self) -> PySide2.QtCore.QByteArray: ...
    def methodType(self) -> PySide2.QtCore.QMetaMethod.MethodType: ...
    def name(self) -> PySide2.QtCore.QByteArray: ...
    def parameterCount(self) -> int: ...
    def parameterNames(self) -> List[PySide2.QtCore.QByteArray]: ...
    def parameterType(self, index: int) -> int: ...
    def parameterTypes(self) -> List[PySide2.QtCore.QByteArray]: ...
    def returnType(self) -> int: ...
    def revision(self) -> int: ...
    def tag(self) -> str: ...
    def typeName(self) -> str: ...


class QMetaObject(Shiboken.Object):

    class Call(object): ...
    ResetProperty            : Call = ... # 0x3
    QueryPropertyUser        : Call = ... # 0x8
    RegisterMethodArgumentMetaType: Call = ... # 0xc
    ReadProperty             : Call = ... # 0x1
    RegisterPropertyMetaType : Call = ... # 0xb
    CreateInstance           : Call = ... # 0x9
    InvokeMetaMethod         : Call = ... # 0x0
    QueryPropertyDesignable  : Call = ... # 0x4
    IndexOfMethod            : Call = ... # 0xa
    WriteProperty            : Call = ... # 0x2
    QueryPropertyStored      : Call = ... # 0x6
    QueryPropertyScriptable  : Call = ... # 0x5
    QueryPropertyEditable    : Call = ... # 0x7

    class Connection(Shiboken.Object):

        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, other: PySide2.QtCore.QMetaObject.Connection): ...


    def __init__(self): ...

    def cast(self, obj: PySide2.QtCore.QObject) -> PySide2.QtCore.QObject: ...
    @typing.overload
    @staticmethod
    def checkConnectArgs(signal: PySide2.QtCore.QMetaMethod, method: PySide2.QtCore.QMetaMethod) -> bool: ...
    @typing.overload
    @staticmethod
    def checkConnectArgs(signal: str, method: str) -> bool: ...
    def classInfo(self, index: int) -> PySide2.QtCore.QMetaClassInfo: ...
    def classInfoCount(self) -> int: ...
    def classInfoOffset(self) -> int: ...
    def className(self) -> str: ...
    @staticmethod
    def connectSlotsByName(o: PySide2.QtCore.QObject): ...
    def constructor(self, index: int) -> PySide2.QtCore.QMetaMethod: ...
    def constructorCount(self) -> int: ...
    @staticmethod
    def disconnect(sender: PySide2.QtCore.QObject, signal_index: int, receiver: PySide2.QtCore.QObject, method_index: int) -> bool: ...
    @staticmethod
    def disconnectOne(sender: PySide2.QtCore.QObject, signal_index: int, receiver: PySide2.QtCore.QObject, method_index: int) -> bool: ...
    def enumerator(self, index: int) -> PySide2.QtCore.QMetaEnum: ...
    def enumeratorCount(self) -> int: ...
    def enumeratorOffset(self) -> int: ...
    def indexOfClassInfo(self, name: str) -> int: ...
    def indexOfConstructor(self, constructor: str) -> int: ...
    def indexOfEnumerator(self, name: str) -> int: ...
    def indexOfMethod(self, method: str) -> int: ...
    def indexOfProperty(self, name: str) -> int: ...
    def indexOfSignal(self, signal: str) -> int: ...
    def indexOfSlot(self, slot: str) -> int: ...
    def inherits(self, metaObject: PySide2.QtCore.QMetaObject) -> bool: ...
    @typing.overload
    @staticmethod
    def invokeMethod(obj: PySide2.QtCore.QObject, member: str, arg__3: PySide2.QtCore.Qt.ConnectionType, ret: PySide2.QtCore.QGenericReturnArgument, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> bool: ...
    @typing.overload
    @staticmethod
    def invokeMethod(obj: PySide2.QtCore.QObject, member: str, ret: PySide2.QtCore.QGenericReturnArgument, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> bool: ...
    @typing.overload
    @staticmethod
    def invokeMethod(obj: PySide2.QtCore.QObject, member: str, type: PySide2.QtCore.Qt.ConnectionType, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> bool: ...
    @typing.overload
    @staticmethod
    def invokeMethod(obj: PySide2.QtCore.QObject, member: str, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> bool: ...
    def method(self, index: int) -> PySide2.QtCore.QMetaMethod: ...
    def methodCount(self) -> int: ...
    def methodOffset(self) -> int: ...
    def newInstance(self, val0: PySide2.QtCore.QGenericArgument=..., val1: PySide2.QtCore.QGenericArgument=..., val2: PySide2.QtCore.QGenericArgument=..., val3: PySide2.QtCore.QGenericArgument=..., val4: PySide2.QtCore.QGenericArgument=..., val5: PySide2.QtCore.QGenericArgument=..., val6: PySide2.QtCore.QGenericArgument=..., val7: PySide2.QtCore.QGenericArgument=..., val8: PySide2.QtCore.QGenericArgument=..., val9: PySide2.QtCore.QGenericArgument=...) -> PySide2.QtCore.QObject: ...
    @staticmethod
    def normalizedSignature(method: str) -> PySide2.QtCore.QByteArray: ...
    @staticmethod
    def normalizedType(type: str) -> PySide2.QtCore.QByteArray: ...
    def property(self, index: int) -> PySide2.QtCore.QMetaProperty: ...
    def propertyCount(self) -> int: ...
    def propertyOffset(self) -> int: ...
    def superClass(self) -> PySide2.QtCore.QMetaObject: ...
    def userProperty(self) -> PySide2.QtCore.QMetaProperty: ...


class QMetaProperty(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QMetaProperty: PySide2.QtCore.QMetaProperty): ...

    def __copy__(self): ...
    def enumerator(self) -> PySide2.QtCore.QMetaEnum: ...
    def hasNotifySignal(self) -> bool: ...
    def hasStdCppSet(self) -> bool: ...
    def isConstant(self) -> bool: ...
    def isDesignable(self, obj: Optional[PySide2.QtCore.QObject]=...) -> bool: ...
    def isEditable(self, obj: Optional[PySide2.QtCore.QObject]=...) -> bool: ...
    def isEnumType(self) -> bool: ...
    def isFinal(self) -> bool: ...
    def isFlagType(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isResettable(self) -> bool: ...
    def isScriptable(self, obj: Optional[PySide2.QtCore.QObject]=...) -> bool: ...
    def isStored(self, obj: Optional[PySide2.QtCore.QObject]=...) -> bool: ...
    def isUser(self, obj: Optional[PySide2.QtCore.QObject]=...) -> bool: ...
    def isValid(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def name(self) -> str: ...
    def notifySignal(self) -> PySide2.QtCore.QMetaMethod: ...
    def notifySignalIndex(self) -> int: ...
    def propertyIndex(self) -> int: ...
    def read(self, obj: PySide2.QtCore.QObject) -> Any: ...
    def readOnGadget(self, gadget: int) -> Any: ...
    def reset(self, obj: PySide2.QtCore.QObject) -> bool: ...
    def resetOnGadget(self, gadget: int) -> bool: ...
    def revision(self) -> int: ...
    def type(self) -> type: ...
    def typeName(self) -> str: ...
    def userType(self) -> int: ...
    def write(self, obj: PySide2.QtCore.QObject, value: Any) -> bool: ...
    def writeOnGadget(self, gadget: int, value: Any) -> bool: ...


class QMimeData(PySide2.QtCore.QObject):

    def __init__(self): ...

    def clear(self): ...
    def colorData(self) -> Any: ...
    def data(self, mimetype: str) -> PySide2.QtCore.QByteArray: ...
    def formats(self) -> List[str]: ...
    def hasColor(self) -> bool: ...
    def hasFormat(self, mimetype: str) -> bool: ...
    def hasHtml(self) -> bool: ...
    def hasImage(self) -> bool: ...
    def hasText(self) -> bool: ...
    def hasUrls(self) -> bool: ...
    def html(self) -> str: ...
    def imageData(self) -> Any: ...
    def removeFormat(self, mimetype: str): ...
    def retrieveData(self, mimetype: str, preferredType: type) -> Any: ...
    def setColorData(self, color: Any): ...
    def setData(self, mimetype: str, data: PySide2.QtCore.QByteArray): ...
    def setHtml(self, html: str): ...
    def setImageData(self, image: Any): ...
    def setText(self, text: str): ...
    def setUrls(self, urls: List[PySide2.QtCore.QUrl]): ...
    def text(self) -> str: ...
    def urls(self) -> List[PySide2.QtCore.QUrl]: ...


class QMimeDatabase(Shiboken.Object):

    class MatchMode(object): ...
    MatchDefault             : MatchMode = ... # 0x0
    MatchExtension           : MatchMode = ... # 0x1
    MatchContent             : MatchMode = ... # 0x2

    def __init__(self): ...

    def allMimeTypes(self) -> List[PySide2.QtCore.QMimeType]: ...
    @typing.overload
    def mimeTypeForData(self, data: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QMimeType: ...
    @typing.overload
    def mimeTypeForData(self, device: PySide2.QtCore.QIODevice) -> PySide2.QtCore.QMimeType: ...
    @typing.overload
    def mimeTypeForFile(self, fileInfo: PySide2.QtCore.QFileInfo, mode: PySide2.QtCore.QMimeDatabase.MatchMode=...) -> PySide2.QtCore.QMimeType: ...
    @typing.overload
    def mimeTypeForFile(self, fileName: str, mode: PySide2.QtCore.QMimeDatabase.MatchMode=...) -> PySide2.QtCore.QMimeType: ...
    @typing.overload
    def mimeTypeForFileNameAndData(self, fileName: str, data: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QMimeType: ...
    @typing.overload
    def mimeTypeForFileNameAndData(self, fileName: str, device: PySide2.QtCore.QIODevice) -> PySide2.QtCore.QMimeType: ...
    def mimeTypeForName(self, nameOrAlias: str) -> PySide2.QtCore.QMimeType: ...
    def mimeTypeForUrl(self, url: PySide2.QtCore.QUrl) -> PySide2.QtCore.QMimeType: ...
    def mimeTypesForFileName(self, fileName: str) -> List[PySide2.QtCore.QMimeType]: ...
    def suffixForFileName(self, fileName: str) -> str: ...


class QMimeType(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QMimeType): ...

    def __copy__(self): ...
    def aliases(self) -> List[str]: ...
    def allAncestors(self) -> List[str]: ...
    def comment(self) -> str: ...
    def filterString(self) -> str: ...
    def genericIconName(self) -> str: ...
    def globPatterns(self) -> List[str]: ...
    def iconName(self) -> str: ...
    def inherits(self, mimeTypeName: str) -> bool: ...
    def isDefault(self) -> bool: ...
    def isValid(self) -> bool: ...
    def name(self) -> str: ...
    def parentMimeTypes(self) -> List[str]: ...
    def preferredSuffix(self) -> str: ...
    def suffixes(self) -> List[str]: ...
    def swap(self, other: PySide2.QtCore.QMimeType): ...


class QModelIndex(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QModelIndex: PySide2.QtCore.QModelIndex): ...

    def __copy__(self): ...
    def child(self, row: int, column: int) -> PySide2.QtCore.QModelIndex: ...
    def column(self) -> int: ...
    def data(self, role: int=...) -> Any: ...
    def flags(self) -> PySide2.QtCore.Qt.ItemFlags: ...
    def internalId(self) -> int: ...
    def internalPointer(self) -> int: ...
    def isValid(self) -> bool: ...
    def model(self) -> PySide2.QtCore.QAbstractItemModel: ...
    def parent(self) -> PySide2.QtCore.QModelIndex: ...
    def row(self) -> int: ...
    def sibling(self, row: int, column: int) -> PySide2.QtCore.QModelIndex: ...
    def siblingAtColumn(self, column: int) -> PySide2.QtCore.QModelIndex: ...
    def siblingAtRow(self, row: int) -> PySide2.QtCore.QModelIndex: ...


class QMutex(PySide2.QtCore.QBasicMutex):

    class RecursionMode(object): ...
    Recursive                : RecursionMode = ... # 0x1
    NonRecursive             : RecursionMode = ... # 0x0

    def __init__(self, mode: PySide2.QtCore.QMutex.RecursionMode=...): ...

    def isRecursive(self) -> bool: ...
    def lock(self): ...
    @typing.overload
    def tryLock(self) -> bool: ...
    @typing.overload
    def tryLock(self, timeout: int=...) -> bool: ...
    def try_lock(self) -> bool: ...
    def unlock(self): ...


class QMutexLocker(Shiboken.Object):

    def __init__(self, m: PySide2.QtCore.QBasicMutex): ...

    def __enter__(self): ...
    def __exit__(self, arg__1: object, arg__2: object, arg__3: object): ...
    def mutex(self) -> PySide2.QtCore.QMutex: ...
    def relock(self): ...
    def unlock(self): ...


class QObject(Shiboken.Object):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: PySide2.QtCore.QChildEvent): ...
    def children(self) -> List[PySide2.QtCore.QObject]: ...
    @typing.overload
    @staticmethod
    def connect(arg__1: PySide2.QtCore.QObject, arg__2: str, arg__3: Callable, type: PySide2.QtCore.Qt.ConnectionType=...) -> bool: ...
    @typing.overload
    @staticmethod
    def connect(arg__1: str, arg__2: Callable, type: PySide2.QtCore.Qt.ConnectionType=...) -> bool: ...
    @typing.overload
    @staticmethod
    def connect(arg__1: str, arg__2: PySide2.QtCore.QObject, arg__3: str, type: PySide2.QtCore.Qt.ConnectionType=...) -> bool: ...
    @typing.overload
    @staticmethod
    def connect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, method: PySide2.QtCore.QMetaMethod, type: PySide2.QtCore.Qt.ConnectionType=...) -> PySide2.QtCore.QMetaObject.Connection: ...
    @typing.overload
    @staticmethod
    def connect(sender: PySide2.QtCore.QObject, signal: str, member: str, type: PySide2.QtCore.Qt.ConnectionType=...) -> PySide2.QtCore.QMetaObject.Connection: ...
    @typing.overload
    @staticmethod
    def connect(sender: PySide2.QtCore.QObject, signal: str, receiver: PySide2.QtCore.QObject, member: str, type: PySide2.QtCore.Qt.ConnectionType=...) -> PySide2.QtCore.QMetaObject.Connection: ...
    def connectNotify(self, signal: PySide2.QtCore.QMetaMethod): ...
    def customEvent(self, event: PySide2.QtCore.QEvent): ...
    def deleteLater(self): ...
    @typing.overload
    @staticmethod
    def disconnect(arg__1: PySide2.QtCore.QMetaObject.Connection) -> bool: ...
    @typing.overload
    @staticmethod
    def disconnect(arg__1: PySide2.QtCore.QObject, arg__2: str, arg__3: Callable) -> bool: ...
    @typing.overload
    @staticmethod
    def disconnect(arg__1: str, arg__2: Callable) -> bool: ...
    @typing.overload
    @staticmethod
    def disconnect(receiver: PySide2.QtCore.QObject, member: Optional[str]=...) -> bool: ...
    @typing.overload
    @staticmethod
    def disconnect(sender: PySide2.QtCore.QObject, signal: PySide2.QtCore.QMetaMethod, receiver: PySide2.QtCore.QObject, member: PySide2.QtCore.QMetaMethod) -> bool: ...
    @typing.overload
    @staticmethod
    def disconnect(sender: PySide2.QtCore.QObject, signal: str, receiver: PySide2.QtCore.QObject, member: str) -> bool: ...
    @typing.overload
    @staticmethod
    def disconnect(signal: str, receiver: PySide2.QtCore.QObject, member: str) -> bool: ...
    def disconnectNotify(self, signal: PySide2.QtCore.QMetaMethod): ...
    def dumpObjectInfo(self): ...
    def dumpObjectTree(self): ...
    def dynamicPropertyNames(self) -> List[PySide2.QtCore.QByteArray]: ...
    def emit(self, arg__1: str, *args: None) -> bool: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    def findChild(self, arg__1: type, arg__2: str=...) -> object: ...
    @typing.overload
    def findChildren(self, arg__1: type, arg__2: PySide2.QtCore.QRegExp) -> Iterable: ...
    @typing.overload
    def findChildren(self, arg__1: type, arg__2: str=...) -> Iterable: ...
    def inherits(self, classname: str) -> bool: ...
    def installEventFilter(self, filterObj: PySide2.QtCore.QObject): ...
    def isSignalConnected(self, signal: PySide2.QtCore.QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int): ...
    def metaObject(self) -> PySide2.QtCore.QMetaObject: ...
    def moveToThread(self, thread: PySide2.QtCore.QThread): ...
    def objectName(self) -> str: ...
    def parent(self) -> PySide2.QtCore.QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: str) -> int: ...
    @staticmethod
    def registerUserData() -> int: ...
    def removeEventFilter(self, obj: PySide2.QtCore.QObject): ...
    def sender(self) -> PySide2.QtCore.QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str): ...
    def setParent(self, parent: PySide2.QtCore.QObject): ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: PySide2.QtCore.Qt.TimerType=...) -> int: ...
    def thread(self) -> PySide2.QtCore.QThread: ...
    def timerEvent(self, event: PySide2.QtCore.QTimerEvent): ...
    def tr(self, arg__1: str, arg__2: str=..., arg__3: int=...) -> str: ...


class QOperatingSystemVersion(Shiboken.Object):

    class OSType(object): ...
    WatchOS                  : OSType = ... # 0x5
    Unknown                  : OSType = ... # 0x0
    Android                  : OSType = ... # 0x6
    IOS                      : OSType = ... # 0x3
    MacOS                    : OSType = ... # 0x2
    Windows                  : OSType = ... # 0x1
    TvOS                     : OSType = ... # 0x4

    @typing.overload
    def __init__(self, QOperatingSystemVersion: PySide2.QtCore.QOperatingSystemVersion): ...
    @typing.overload
    def __init__(self, osType: PySide2.QtCore.QOperatingSystemVersion.OSType, vmajor: int, vminor: int=..., vmicro: int=...): ...

    def __copy__(self): ...
    @staticmethod
    def current() -> PySide2.QtCore.QOperatingSystemVersion: ...
    @staticmethod
    def currentType() -> PySide2.QtCore.QOperatingSystemVersion.OSType: ...
    def majorVersion(self) -> int: ...
    def microVersion(self) -> int: ...
    def minorVersion(self) -> int: ...
    def name(self) -> str: ...
    def segmentCount(self) -> int: ...
    def type(self) -> PySide2.QtCore.QOperatingSystemVersion.OSType: ...


class QParallelAnimationGroup(PySide2.QtCore.QAnimationGroup):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def duration(self) -> int: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def updateCurrentTime(self, currentTime: int): ...
    def updateDirection(self, direction: PySide2.QtCore.QAbstractAnimation.Direction): ...
    def updateState(self, newState: PySide2.QtCore.QAbstractAnimation.State, oldState: PySide2.QtCore.QAbstractAnimation.State): ...


class QPauseAnimation(PySide2.QtCore.QAbstractAnimation):

    @typing.overload
    def __init__(self, msecs: int, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def duration(self) -> int: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def setDuration(self, msecs: int): ...
    def updateCurrentTime(self, arg__1: int): ...


class QPersistentModelIndex(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, index: PySide2.QtCore.QModelIndex): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QPersistentModelIndex): ...

    def __copy__(self): ...
    def child(self, row: int, column: int) -> PySide2.QtCore.QModelIndex: ...
    def column(self) -> int: ...
    def data(self, role: int=...) -> Any: ...
    def flags(self) -> PySide2.QtCore.Qt.ItemFlags: ...
    def internalId(self) -> int: ...
    def internalPointer(self) -> int: ...
    def isValid(self) -> bool: ...
    def model(self) -> PySide2.QtCore.QAbstractItemModel: ...
    def parent(self) -> PySide2.QtCore.QModelIndex: ...
    def row(self) -> int: ...
    def sibling(self, row: int, column: int) -> PySide2.QtCore.QModelIndex: ...
    def swap(self, other: PySide2.QtCore.QPersistentModelIndex): ...


class QPluginLoader(PySide2.QtCore.QObject):

    @typing.overload
    def __init__(self, fileName: str, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def errorString(self) -> str: ...
    def fileName(self) -> str: ...
    def instance(self) -> PySide2.QtCore.QObject: ...
    def isLoaded(self) -> bool: ...
    def load(self) -> bool: ...
    def metaData(self) -> Dict[str, PySide2.QtCore.QJsonValue]: ...
    def setFileName(self, fileName: str): ...
    @staticmethod
    def staticInstances() -> List[PySide2.QtCore.QObject]: ...
    def unload(self) -> bool: ...


class QPoint(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QPoint: PySide2.QtCore.QPoint): ...
    @typing.overload
    def __init__(self, xpos: int, ypos: int): ...

    def __add__(self, p2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    def __copy__(self): ...
    def __div__(self, c: float) -> PySide2.QtCore.QPoint: ...
    def __iadd__(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    @typing.overload
    def __imul__(self, factor: float) -> PySide2.QtCore.QPoint: ...
    @typing.overload
    def __imul__(self, factor: float) -> PySide2.QtCore.QPoint: ...
    @typing.overload
    def __imul__(self, factor: int) -> PySide2.QtCore.QPoint: ...
    def __isub__(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    @typing.overload
    def __mul__(self, factor: float) -> PySide2.QtCore.QPoint: ...
    @typing.overload
    def __mul__(self, factor: float) -> PySide2.QtCore.QPoint: ...
    @typing.overload
    def __mul__(self, factor: int) -> PySide2.QtCore.QPoint: ...
    def __neg__(self) -> PySide2.QtCore.QPoint: ...
    def __pos__(self) -> PySide2.QtCore.QPoint: ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def __sub__(self, p2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    @staticmethod
    def dotProduct(p1: PySide2.QtCore.QPoint, p2: PySide2.QtCore.QPoint) -> int: ...
    def isNull(self) -> bool: ...
    def manhattanLength(self) -> int: ...
    def setX(self, x: int): ...
    def setY(self, y: int): ...
    def toTuple(self) -> object: ...
    def x(self) -> int: ...
    def y(self) -> int: ...


class QPointF(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QPointF: PySide2.QtCore.QPointF): ...
    @typing.overload
    def __init__(self, p: PySide2.QtCore.QPoint): ...
    @typing.overload
    def __init__(self, xpos: float, ypos: float): ...

    def __add__(self, p2: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def __copy__(self): ...
    def __div__(self, divisor: float) -> PySide2.QtCore.QPointF: ...
    def __iadd__(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def __imul__(self, c: float) -> PySide2.QtCore.QPointF: ...
    def __isub__(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def __mul__(self, c: float) -> PySide2.QtCore.QPointF: ...
    def __neg__(self) -> PySide2.QtCore.QPointF: ...
    def __pos__(self) -> PySide2.QtCore.QPointF: ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def __sub__(self, p2: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @staticmethod
    def dotProduct(p1: PySide2.QtCore.QPointF, p2: PySide2.QtCore.QPointF) -> float: ...
    def isNull(self) -> bool: ...
    def manhattanLength(self) -> float: ...
    def setX(self, x: float): ...
    def setY(self, y: float): ...
    def toPoint(self) -> PySide2.QtCore.QPoint: ...
    def toTuple(self) -> object: ...
    def x(self) -> float: ...
    def y(self) -> float: ...


class QProcess(PySide2.QtCore.QIODevice):

    class ExitStatus(object): ...
    CrashExit                : ExitStatus = ... # 0x1
    NormalExit               : ExitStatus = ... # 0x0

    class InputChannelMode(object): ...
    ForwardedInputChannel    : InputChannelMode = ... # 0x1
    ManagedInputChannel      : InputChannelMode = ... # 0x0

    class ProcessChannel(object): ...
    StandardOutput           : ProcessChannel = ... # 0x0
    StandardError            : ProcessChannel = ... # 0x1

    class ProcessChannelMode(object): ...
    ForwardedOutputChannel   : ProcessChannelMode = ... # 0x3
    MergedChannels           : ProcessChannelMode = ... # 0x1
    ForwardedChannels        : ProcessChannelMode = ... # 0x2
    SeparateChannels         : ProcessChannelMode = ... # 0x0
    ForwardedErrorChannel    : ProcessChannelMode = ... # 0x4

    class ProcessError(object): ...
    Crashed                  : ProcessError = ... # 0x1
    Timedout                 : ProcessError = ... # 0x2
    WriteError               : ProcessError = ... # 0x4
    UnknownError             : ProcessError = ... # 0x5
    ReadError                : ProcessError = ... # 0x3
    FailedToStart            : ProcessError = ... # 0x0

    class ProcessState(object): ...
    NotRunning               : ProcessState = ... # 0x0
    Starting                 : ProcessState = ... # 0x1
    Running                  : ProcessState = ... # 0x2

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def arguments(self) -> List[str]: ...
    def atEnd(self) -> bool: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def canReadLine(self) -> bool: ...
    def close(self): ...
    def closeReadChannel(self, channel: PySide2.QtCore.QProcess.ProcessChannel): ...
    def closeWriteChannel(self): ...
    def environment(self) -> List[str]: ...
    def error(self) -> PySide2.QtCore.QProcess.ProcessError: ...
    @typing.overload
    @staticmethod
    def execute(command: str) -> int: ...
    @typing.overload
    @staticmethod
    def execute(program: str, arguments: List[str]) -> int: ...
    def exitCode(self) -> int: ...
    def exitStatus(self) -> PySide2.QtCore.QProcess.ExitStatus: ...
    def inputChannelMode(self) -> PySide2.QtCore.QProcess.InputChannelMode: ...
    def isSequential(self) -> bool: ...
    def kill(self): ...
    @staticmethod
    def nullDevice() -> str: ...
    def open(self, mode: PySide2.QtCore.QIODevice.OpenMode=...) -> bool: ...
    def pid(self) -> int: ...
    def processChannelMode(self) -> PySide2.QtCore.QProcess.ProcessChannelMode: ...
    def processEnvironment(self) -> PySide2.QtCore.QProcessEnvironment: ...
    def processId(self) -> int: ...
    def program(self) -> str: ...
    def readAllStandardError(self) -> PySide2.QtCore.QByteArray: ...
    def readAllStandardOutput(self) -> PySide2.QtCore.QByteArray: ...
    def readChannel(self) -> PySide2.QtCore.QProcess.ProcessChannel: ...
    def readData(self, data: str, maxlen: int) -> int: ...
    def setArguments(self, arguments: List[str]): ...
    def setEnvironment(self, environment: List[str]): ...
    def setInputChannelMode(self, mode: PySide2.QtCore.QProcess.InputChannelMode): ...
    def setProcessChannelMode(self, mode: PySide2.QtCore.QProcess.ProcessChannelMode): ...
    def setProcessEnvironment(self, environment: PySide2.QtCore.QProcessEnvironment): ...
    def setProcessState(self, state: PySide2.QtCore.QProcess.ProcessState): ...
    def setProgram(self, program: str): ...
    def setReadChannel(self, channel: PySide2.QtCore.QProcess.ProcessChannel): ...
    def setStandardErrorFile(self, fileName: str, mode: PySide2.QtCore.QIODevice.OpenMode=...): ...
    def setStandardInputFile(self, fileName: str): ...
    def setStandardOutputFile(self, fileName: str, mode: PySide2.QtCore.QIODevice.OpenMode=...): ...
    def setStandardOutputProcess(self, destination: PySide2.QtCore.QProcess): ...
    def setWorkingDirectory(self, dir: str): ...
    def setupChildProcess(self): ...
    @typing.overload
    def start(self, command: str, mode: PySide2.QtCore.QIODevice.OpenMode=...): ...
    @typing.overload
    def start(self, mode: PySide2.QtCore.QIODevice.OpenMode=...): ...
    @typing.overload
    def start(self, program: str, arguments: List[str], mode: PySide2.QtCore.QIODevice.OpenMode=...): ...
    @typing.overload
    @staticmethod
    def startDetached(command: str) -> bool: ...
    @typing.overload
    @staticmethod
    def startDetached(pid: Optional[int]=...) -> bool: ...
    @typing.overload
    @staticmethod
    def startDetached(program: str, arguments: List[str]) -> bool: ...
    @typing.overload
    @staticmethod
    def startDetached(program: str, arguments: List[str], workingDirectory: str, pid: Optional[int]=...) -> bool: ...
    def state(self) -> PySide2.QtCore.QProcess.ProcessState: ...
    @staticmethod
    def systemEnvironment() -> List[str]: ...
    def terminate(self): ...
    def waitForBytesWritten(self, msecs: int=...) -> bool: ...
    def waitForFinished(self, msecs: int=...) -> bool: ...
    def waitForReadyRead(self, msecs: int=...) -> bool: ...
    def waitForStarted(self, msecs: int=...) -> bool: ...
    def workingDirectory(self) -> str: ...
    def writeData(self, data: str, len: int) -> int: ...


class QProcessEnvironment(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QProcessEnvironment): ...

    def __copy__(self): ...
    def clear(self): ...
    def contains(self, name: str) -> bool: ...
    @typing.overload
    def insert(self, e: PySide2.QtCore.QProcessEnvironment): ...
    @typing.overload
    def insert(self, name: str, value: str): ...
    def isEmpty(self) -> bool: ...
    def keys(self) -> List[str]: ...
    def remove(self, name: str): ...
    def swap(self, other: PySide2.QtCore.QProcessEnvironment): ...
    @staticmethod
    def systemEnvironment() -> PySide2.QtCore.QProcessEnvironment: ...
    def toStringList(self) -> List[str]: ...
    def value(self, name: str, defaultValue: str=...) -> str: ...


class QPropertyAnimation(PySide2.QtCore.QVariantAnimation):

    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, target: PySide2.QtCore.QObject, propertyName: PySide2.QtCore.QByteArray, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def propertyName(self) -> PySide2.QtCore.QByteArray: ...
    def setPropertyName(self, propertyName: PySide2.QtCore.QByteArray): ...
    def setTargetObject(self, target: PySide2.QtCore.QObject): ...
    def targetObject(self) -> PySide2.QtCore.QObject: ...
    def updateCurrentValue(self, value: Any): ...
    def updateState(self, newState: PySide2.QtCore.QAbstractAnimation.State, oldState: PySide2.QtCore.QAbstractAnimation.State): ...


class QRandomGenerator(Shiboken.Object):

    @typing.overload
    def __init__(self, begin: int, end: int): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QRandomGenerator): ...
    @typing.overload
    def __init__(self, seedBuffer: int, len: int): ...
    @typing.overload
    def __init__(self, seedValue: int=...): ...

    @typing.overload
    def bounded(self, highest: float) -> float: ...
    @typing.overload
    def bounded(self, highest: int) -> int: ...
    @typing.overload
    def bounded(self, highest: int) -> int: ...
    @typing.overload
    def bounded(self, lowest: int, highest: int) -> int: ...
    @typing.overload
    def bounded(self, lowest: int, highest: int) -> int: ...
    def discard(self, z: int): ...
    @typing.overload
    def generate(self) -> int: ...
    @typing.overload
    def generate(self, begin: int, end: int): ...
    def generate64(self) -> int: ...
    def generateDouble(self) -> float: ...
    @staticmethod
    def global_() -> PySide2.QtCore.QRandomGenerator: ...
    @staticmethod
    def max() -> int: ...
    @staticmethod
    def min() -> int: ...
    @staticmethod
    def securelySeeded() -> PySide2.QtCore.QRandomGenerator: ...
    def seed(self, s: int=...): ...
    @staticmethod
    def system() -> PySide2.QtCore.QRandomGenerator: ...


class QRandomGenerator64(PySide2.QtCore.QRandomGenerator):

    @typing.overload
    def __init__(self, begin: int, end: int): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QRandomGenerator): ...
    @typing.overload
    def __init__(self, seedBuffer: int, len: int): ...
    @typing.overload
    def __init__(self, seedValue: int=...): ...

    def discard(self, z: int): ...
    def generate(self) -> int: ...
    @staticmethod
    def global_() -> PySide2.QtCore.QRandomGenerator64: ...
    @staticmethod
    def max() -> int: ...
    @staticmethod
    def min() -> int: ...
    @staticmethod
    def securelySeeded() -> PySide2.QtCore.QRandomGenerator64: ...
    @staticmethod
    def system() -> PySide2.QtCore.QRandomGenerator64: ...


class QReadLocker(Shiboken.Object):

    def __init__(self, readWriteLock: PySide2.QtCore.QReadWriteLock): ...

    def __enter__(self): ...
    def __exit__(self, arg__1: object, arg__2: object, arg__3: object): ...
    def readWriteLock(self) -> PySide2.QtCore.QReadWriteLock: ...
    def relock(self): ...
    def unlock(self): ...


class QReadWriteLock(Shiboken.Object):

    class RecursionMode(object): ...
    Recursive                : RecursionMode = ... # 0x1
    NonRecursive             : RecursionMode = ... # 0x0

    def __init__(self, recursionMode: PySide2.QtCore.QReadWriteLock.RecursionMode=...): ...

    def lockForRead(self): ...
    def lockForWrite(self): ...
    @typing.overload
    def tryLockForRead(self) -> bool: ...
    @typing.overload
    def tryLockForRead(self, timeout: int) -> bool: ...
    @typing.overload
    def tryLockForWrite(self) -> bool: ...
    @typing.overload
    def tryLockForWrite(self, timeout: int) -> bool: ...
    def unlock(self): ...


class QRect(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QRect: PySide2.QtCore.QRect): ...
    @typing.overload
    def __init__(self, left: int, top: int, width: int, height: int): ...
    @typing.overload
    def __init__(self, topleft: PySide2.QtCore.QPoint, bottomright: PySide2.QtCore.QPoint): ...
    @typing.overload
    def __init__(self, topleft: PySide2.QtCore.QPoint, size: PySide2.QtCore.QSize): ...

    def __add__(self, margins: PySide2.QtCore.QMargins) -> PySide2.QtCore.QRect: ...
    def __and__(self, r: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    def __copy__(self): ...
    def __iadd__(self, margins: PySide2.QtCore.QMargins) -> PySide2.QtCore.QRect: ...
    def __iand__(self, r: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    def __ior__(self, r: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    def __isub__(self, margins: PySide2.QtCore.QMargins) -> PySide2.QtCore.QRect: ...
    def __or__(self, r: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def __sub__(self, rhs: PySide2.QtCore.QMargins) -> PySide2.QtCore.QRect: ...
    def adjust(self, x1: int, y1: int, x2: int, y2: int): ...
    def adjusted(self, x1: int, y1: int, x2: int, y2: int) -> PySide2.QtCore.QRect: ...
    def bottom(self) -> int: ...
    def bottomLeft(self) -> PySide2.QtCore.QPoint: ...
    def bottomRight(self) -> PySide2.QtCore.QPoint: ...
    def center(self) -> PySide2.QtCore.QPoint: ...
    @typing.overload
    def contains(self, p: PySide2.QtCore.QPoint, proper: bool=...) -> bool: ...
    @typing.overload
    def contains(self, r: PySide2.QtCore.QRect, proper: bool=...) -> bool: ...
    @typing.overload
    def contains(self, x: int, y: int) -> bool: ...
    @typing.overload
    def contains(self, x: int, y: int, proper: bool) -> bool: ...
    def getCoords(self, x1: int, y1: int, x2: int, y2: int): ...
    def getRect(self, x: int, y: int, w: int, h: int): ...
    def height(self) -> int: ...
    def intersected(self, other: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    def intersects(self, r: PySide2.QtCore.QRect) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    def left(self) -> int: ...
    def marginsAdded(self, margins: PySide2.QtCore.QMargins) -> PySide2.QtCore.QRect: ...
    def marginsRemoved(self, margins: PySide2.QtCore.QMargins) -> PySide2.QtCore.QRect: ...
    def moveBottom(self, pos: int): ...
    def moveBottomLeft(self, p: PySide2.QtCore.QPoint): ...
    def moveBottomRight(self, p: PySide2.QtCore.QPoint): ...
    def moveCenter(self, p: PySide2.QtCore.QPoint): ...
    def moveLeft(self, pos: int): ...
    def moveRight(self, pos: int): ...
    @typing.overload
    def moveTo(self, p: PySide2.QtCore.QPoint): ...
    @typing.overload
    def moveTo(self, x: int, t: int): ...
    def moveTop(self, pos: int): ...
    def moveTopLeft(self, p: PySide2.QtCore.QPoint): ...
    def moveTopRight(self, p: PySide2.QtCore.QPoint): ...
    def normalized(self) -> PySide2.QtCore.QRect: ...
    def right(self) -> int: ...
    def setBottom(self, pos: int): ...
    def setBottomLeft(self, p: PySide2.QtCore.QPoint): ...
    def setBottomRight(self, p: PySide2.QtCore.QPoint): ...
    def setCoords(self, x1: int, y1: int, x2: int, y2: int): ...
    def setHeight(self, h: int): ...
    def setLeft(self, pos: int): ...
    def setRect(self, x: int, y: int, w: int, h: int): ...
    def setRight(self, pos: int): ...
    def setSize(self, s: PySide2.QtCore.QSize): ...
    def setTop(self, pos: int): ...
    def setTopLeft(self, p: PySide2.QtCore.QPoint): ...
    def setTopRight(self, p: PySide2.QtCore.QPoint): ...
    def setWidth(self, w: int): ...
    def setX(self, x: int): ...
    def setY(self, y: int): ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def top(self) -> int: ...
    def topLeft(self) -> PySide2.QtCore.QPoint: ...
    def topRight(self) -> PySide2.QtCore.QPoint: ...
    @typing.overload
    def translate(self, dx: int, dy: int): ...
    @typing.overload
    def translate(self, p: PySide2.QtCore.QPoint): ...
    @typing.overload
    def translated(self, dx: int, dy: int) -> PySide2.QtCore.QRect: ...
    @typing.overload
    def translated(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QRect: ...
    def transposed(self) -> PySide2.QtCore.QRect: ...
    def united(self, other: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    def width(self) -> int: ...
    def x(self) -> int: ...
    def y(self) -> int: ...


class QRectF(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QRectF: PySide2.QtCore.QRectF): ...
    @typing.overload
    def __init__(self, left: float, top: float, width: float, height: float): ...
    @typing.overload
    def __init__(self, rect: PySide2.QtCore.QRect): ...
    @typing.overload
    def __init__(self, topleft: PySide2.QtCore.QPointF, bottomRight: PySide2.QtCore.QPointF): ...
    @typing.overload
    def __init__(self, topleft: PySide2.QtCore.QPointF, size: PySide2.QtCore.QSizeF): ...

    @typing.overload
    def __add__(self, lhs: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QRectF: ...
    @typing.overload
    def __add__(self, rhs: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QRectF: ...
    def __and__(self, r: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def __copy__(self): ...
    def __iadd__(self, margins: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QRectF: ...
    def __iand__(self, r: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def __ior__(self, r: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def __isub__(self, margins: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QRectF: ...
    def __or__(self, r: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def __sub__(self, rhs: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QRectF: ...
    def adjust(self, x1: float, y1: float, x2: float, y2: float): ...
    def adjusted(self, x1: float, y1: float, x2: float, y2: float) -> PySide2.QtCore.QRectF: ...
    def bottom(self) -> float: ...
    def bottomLeft(self) -> PySide2.QtCore.QPointF: ...
    def bottomRight(self) -> PySide2.QtCore.QPointF: ...
    def center(self) -> PySide2.QtCore.QPointF: ...
    @typing.overload
    def contains(self, p: PySide2.QtCore.QPointF) -> bool: ...
    @typing.overload
    def contains(self, r: PySide2.QtCore.QRectF) -> bool: ...
    @typing.overload
    def contains(self, x: float, y: float) -> bool: ...
    def getCoords(self, x1: float, y1: float, x2: float, y2: float): ...
    def getRect(self, x: float, y: float, w: float, h: float): ...
    def height(self) -> float: ...
    def intersected(self, other: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def intersects(self, r: PySide2.QtCore.QRectF) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    def left(self) -> float: ...
    def marginsAdded(self, margins: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QRectF: ...
    def marginsRemoved(self, margins: PySide2.QtCore.QMarginsF) -> PySide2.QtCore.QRectF: ...
    def moveBottom(self, pos: float): ...
    def moveBottomLeft(self, p: PySide2.QtCore.QPointF): ...
    def moveBottomRight(self, p: PySide2.QtCore.QPointF): ...
    def moveCenter(self, p: PySide2.QtCore.QPointF): ...
    def moveLeft(self, pos: float): ...
    def moveRight(self, pos: float): ...
    @typing.overload
    def moveTo(self, p: PySide2.QtCore.QPointF): ...
    @typing.overload
    def moveTo(self, x: float, y: float): ...
    def moveTop(self, pos: float): ...
    def moveTopLeft(self, p: PySide2.QtCore.QPointF): ...
    def moveTopRight(self, p: PySide2.QtCore.QPointF): ...
    def normalized(self) -> PySide2.QtCore.QRectF: ...
    def right(self) -> float: ...
    def setBottom(self, pos: float): ...
    def setBottomLeft(self, p: PySide2.QtCore.QPointF): ...
    def setBottomRight(self, p: PySide2.QtCore.QPointF): ...
    def setCoords(self, x1: float, y1: float, x2: float, y2: float): ...
    def setHeight(self, h: float): ...
    def setLeft(self, pos: float): ...
    def setRect(self, x: float, y: float, w: float, h: float): ...
    def setRight(self, pos: float): ...
    def setSize(self, s: PySide2.QtCore.QSizeF): ...
    def setTop(self, pos: float): ...
    def setTopLeft(self, p: PySide2.QtCore.QPointF): ...
    def setTopRight(self, p: PySide2.QtCore.QPointF): ...
    def setWidth(self, w: float): ...
    def setX(self, pos: float): ...
    def setY(self, pos: float): ...
    def size(self) -> PySide2.QtCore.QSizeF: ...
    def toAlignedRect(self) -> PySide2.QtCore.QRect: ...
    def toRect(self) -> PySide2.QtCore.QRect: ...
    def top(self) -> float: ...
    def topLeft(self) -> PySide2.QtCore.QPointF: ...
    def topRight(self) -> PySide2.QtCore.QPointF: ...
    @typing.overload
    def translate(self, dx: float, dy: float): ...
    @typing.overload
    def translate(self, p: PySide2.QtCore.QPointF): ...
    @typing.overload
    def translated(self, dx: float, dy: float) -> PySide2.QtCore.QRectF: ...
    @typing.overload
    def translated(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QRectF: ...
    def transposed(self) -> PySide2.QtCore.QRectF: ...
    def united(self, other: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def width(self) -> float: ...
    def x(self) -> float: ...
    def y(self) -> float: ...


class QRegExp(Shiboken.Object):

    class CaretMode(object): ...
    CaretAtZero              : CaretMode = ... # 0x0
    CaretAtOffset            : CaretMode = ... # 0x1
    CaretWontMatch           : CaretMode = ... # 0x2

    class PatternSyntax(object): ...
    Wildcard                 : PatternSyntax = ... # 0x1
    RegExp                   : PatternSyntax = ... # 0x0
    W3CXmlSchema11           : PatternSyntax = ... # 0x5
    RegExp2                  : PatternSyntax = ... # 0x3
    WildcardUnix             : PatternSyntax = ... # 0x4
    FixedString              : PatternSyntax = ... # 0x2

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, pattern: str, cs: PySide2.QtCore.Qt.CaseSensitivity=..., syntax: PySide2.QtCore.QRegExp.PatternSyntax=...): ...
    @typing.overload
    def __init__(self, rx: PySide2.QtCore.QRegExp): ...

    def __copy__(self): ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def cap(self, nth: int=...) -> str: ...
    def captureCount(self) -> int: ...
    def capturedTexts(self) -> List[str]: ...
    def caseSensitivity(self) -> PySide2.QtCore.Qt.CaseSensitivity: ...
    def errorString(self) -> str: ...
    @staticmethod
    def escape(str: str) -> str: ...
    def exactMatch(self, str: str) -> bool: ...
    def indexIn(self, str: str, offset: int=..., caretMode: PySide2.QtCore.QRegExp.CaretMode=...) -> int: ...
    def isEmpty(self) -> bool: ...
    def isMinimal(self) -> bool: ...
    def isValid(self) -> bool: ...
    def lastIndexIn(self, str: str, offset: int=..., caretMode: PySide2.QtCore.QRegExp.CaretMode=...) -> int: ...
    def matchedLength(self) -> int: ...
    def pattern(self) -> str: ...
    def patternSyntax(self) -> PySide2.QtCore.QRegExp.PatternSyntax: ...
    def pos(self, nth: int=...) -> int: ...
    def replace(self, sourceString: str, after: str) -> str: ...
    def setCaseSensitivity(self, cs: PySide2.QtCore.Qt.CaseSensitivity): ...
    def setMinimal(self, minimal: bool): ...
    def setPattern(self, pattern: str): ...
    def setPatternSyntax(self, syntax: PySide2.QtCore.QRegExp.PatternSyntax): ...
    def swap(self, other: PySide2.QtCore.QRegExp): ...


class QRegularExpression(Shiboken.Object):

    class MatchOption(object): ...
    AnchoredMatchOption      : MatchOption = ... # 0x1
    DontCheckSubjectStringMatchOption: MatchOption = ... # 0x2
    NoMatchOption            : MatchOption = ... # 0x0

    class MatchOptions(object): ...

    class MatchType(object): ...
    PartialPreferFirstMatch  : MatchType = ... # 0x2
    NormalMatch              : MatchType = ... # 0x0
    NoMatch                  : MatchType = ... # 0x3
    PartialPreferCompleteMatch: MatchType = ... # 0x1

    class PatternOption(object): ...
    InvertedGreedinessOption : PatternOption = ... # 0x10
    MultilineOption          : PatternOption = ... # 0x4
    OptimizeOnFirstUsageOption: PatternOption = ... # 0x80
    CaseInsensitiveOption    : PatternOption = ... # 0x1
    UseUnicodePropertiesOption: PatternOption = ... # 0x40
    NoPatternOption          : PatternOption = ... # 0x0
    DontAutomaticallyOptimizeOption: PatternOption = ... # 0x100
    ExtendedPatternSyntaxOption: PatternOption = ... # 0x8
    DontCaptureOption        : PatternOption = ... # 0x20
    DotMatchesEverythingOption: PatternOption = ... # 0x2

    class PatternOptions(object): ...

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, pattern: str, options: PySide2.QtCore.QRegularExpression.PatternOptions=...): ...
    @typing.overload
    def __init__(self, re: PySide2.QtCore.QRegularExpression): ...

    def __copy__(self): ...
    @staticmethod
    def anchoredPattern(expression: str) -> str: ...
    def captureCount(self) -> int: ...
    def errorString(self) -> str: ...
    @staticmethod
    def escape(str: str) -> str: ...
    @typing.overload
    def globalMatch(self, subject: str, offset: int=..., matchType: PySide2.QtCore.QRegularExpression.MatchType=..., matchOptions: PySide2.QtCore.QRegularExpression.MatchOptions=...) -> PySide2.QtCore.QRegularExpressionMatchIterator: ...
    @typing.overload
    def globalMatch(self, subjectRef: str, offset: int=..., matchType: PySide2.QtCore.QRegularExpression.MatchType=..., matchOptions: PySide2.QtCore.QRegularExpression.MatchOptions=...) -> PySide2.QtCore.QRegularExpressionMatchIterator: ...
    def isValid(self) -> bool: ...
    @typing.overload
    def match(self, subject: str, offset: int=..., matchType: PySide2.QtCore.QRegularExpression.MatchType=..., matchOptions: PySide2.QtCore.QRegularExpression.MatchOptions=...) -> PySide2.QtCore.QRegularExpressionMatch: ...
    @typing.overload
    def match(self, subjectRef: str, offset: int=..., matchType: PySide2.QtCore.QRegularExpression.MatchType=..., matchOptions: PySide2.QtCore.QRegularExpression.MatchOptions=...) -> PySide2.QtCore.QRegularExpressionMatch: ...
    def namedCaptureGroups(self) -> List[str]: ...
    def optimize(self): ...
    def pattern(self) -> str: ...
    def patternErrorOffset(self) -> int: ...
    def patternOptions(self) -> PySide2.QtCore.QRegularExpression.PatternOptions: ...
    def setPattern(self, pattern: str): ...
    def setPatternOptions(self, options: PySide2.QtCore.QRegularExpression.PatternOptions): ...
    def swap(self, other: PySide2.QtCore.QRegularExpression): ...
    @staticmethod
    def wildcardToRegularExpression(str: str) -> str: ...


class QRegularExpressionMatch(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, match: PySide2.QtCore.QRegularExpressionMatch): ...

    def __copy__(self): ...
    @typing.overload
    def captured(self, name: str) -> str: ...
    @typing.overload
    def captured(self, nth: int=...) -> str: ...
    @typing.overload
    def capturedEnd(self, name: str) -> int: ...
    @typing.overload
    def capturedEnd(self, nth: int=...) -> int: ...
    @typing.overload
    def capturedLength(self, name: str) -> int: ...
    @typing.overload
    def capturedLength(self, nth: int=...) -> int: ...
    @typing.overload
    def capturedRef(self, name: str) -> str: ...
    @typing.overload
    def capturedRef(self, nth: int=...) -> str: ...
    @typing.overload
    def capturedStart(self, name: str) -> int: ...
    @typing.overload
    def capturedStart(self, nth: int=...) -> int: ...
    def capturedTexts(self) -> List[str]: ...
    def hasMatch(self) -> bool: ...
    def hasPartialMatch(self) -> bool: ...
    def isValid(self) -> bool: ...
    def lastCapturedIndex(self) -> int: ...
    def matchOptions(self) -> PySide2.QtCore.QRegularExpression.MatchOptions: ...
    def matchType(self) -> PySide2.QtCore.QRegularExpression.MatchType: ...
    def regularExpression(self) -> PySide2.QtCore.QRegularExpression: ...
    def swap(self, other: PySide2.QtCore.QRegularExpressionMatch): ...


class QRegularExpressionMatchIterator(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, iterator: PySide2.QtCore.QRegularExpressionMatchIterator): ...

    def __copy__(self): ...
    def hasNext(self) -> bool: ...
    def isValid(self) -> bool: ...
    def matchOptions(self) -> PySide2.QtCore.QRegularExpression.MatchOptions: ...
    def matchType(self) -> PySide2.QtCore.QRegularExpression.MatchType: ...
    def next(self) -> PySide2.QtCore.QRegularExpressionMatch: ...
    def peekNext(self) -> PySide2.QtCore.QRegularExpressionMatch: ...
    def regularExpression(self) -> PySide2.QtCore.QRegularExpression: ...
    def swap(self, other: PySide2.QtCore.QRegularExpressionMatchIterator): ...


class QResource(Shiboken.Object):

    class Compression(object): ...
    ZlibCompression          : Compression = ... # 0x1
    ZstdCompression          : Compression = ... # 0x2
    NoCompression            : Compression = ... # 0x0

    def __init__(self, file: str=..., locale: PySide2.QtCore.QLocale=...): ...

    def absoluteFilePath(self) -> str: ...
    @staticmethod
    def addSearchPath(path: str): ...
    def children(self) -> List[str]: ...
    def compressionAlgorithm(self) -> PySide2.QtCore.QResource.Compression: ...
    def data(self) -> Char: ...
    def fileName(self) -> str: ...
    def isCompressed(self) -> bool: ...
    def isDir(self) -> bool: ...
    def isFile(self) -> bool: ...
    def isValid(self) -> bool: ...
    def lastModified(self) -> PySide2.QtCore.QDateTime: ...
    def locale(self) -> PySide2.QtCore.QLocale: ...
    @staticmethod
    def registerResource(rccFilename: str, resourceRoot: str=...) -> bool: ...
    @staticmethod
    def registerResourceData(rccData: Char, resourceRoot: str=...) -> bool: ...
    @staticmethod
    def searchPaths() -> List[str]: ...
    def setFileName(self, file: str): ...
    def setLocale(self, locale: PySide2.QtCore.QLocale): ...
    def size(self) -> int: ...
    @staticmethod
    def unregisterResource(rccFilename: str, resourceRoot: str=...) -> bool: ...
    @staticmethod
    def unregisterResourceData(rccData: Char, resourceRoot: str=...) -> bool: ...


class QRunnable(Shiboken.Object):

    def __init__(self): ...

    def autoDelete(self) -> bool: ...
    def run(self): ...
    def setAutoDelete(self, _autoDelete: bool): ...


class QSaveFile(PySide2.QtCore.QFileDevice):

    @typing.overload
    def __init__(self, name: str): ...
    @typing.overload
    def __init__(self, name: str, parent: PySide2.QtCore.QObject): ...
    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def cancelWriting(self): ...
    def close(self): ...
    def commit(self) -> bool: ...
    def directWriteFallback(self) -> bool: ...
    def fileName(self) -> str: ...
    def open(self, flags: PySide2.QtCore.QIODevice.OpenMode) -> bool: ...
    def setDirectWriteFallback(self, enabled: bool): ...
    def setFileName(self, name: str): ...
    def writeData(self, data: str, len: int) -> int: ...


class QSemaphore(Shiboken.Object):

    def __init__(self, n: int=...): ...

    def acquire(self, n: int=...): ...
    def available(self) -> int: ...
    def release(self, n: int=...): ...
    @typing.overload
    def tryAcquire(self, n: int, timeout: int) -> bool: ...
    @typing.overload
    def tryAcquire(self, n: int=...) -> bool: ...


class QSemaphoreReleaser(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, sem: PySide2.QtCore.QSemaphore, n: int=...): ...

    def cancel(self) -> PySide2.QtCore.QSemaphore: ...
    def semaphore(self) -> PySide2.QtCore.QSemaphore: ...
    def swap(self, other: PySide2.QtCore.QSemaphoreReleaser): ...


class QSequentialAnimationGroup(PySide2.QtCore.QAnimationGroup):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def addPause(self, msecs: int) -> PySide2.QtCore.QPauseAnimation: ...
    def currentAnimation(self) -> PySide2.QtCore.QAbstractAnimation: ...
    def duration(self) -> int: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def insertPause(self, index: int, msecs: int) -> PySide2.QtCore.QPauseAnimation: ...
    def updateCurrentTime(self, arg__1: int): ...
    def updateDirection(self, direction: PySide2.QtCore.QAbstractAnimation.Direction): ...
    def updateState(self, newState: PySide2.QtCore.QAbstractAnimation.State, oldState: PySide2.QtCore.QAbstractAnimation.State): ...


class QSettings(PySide2.QtCore.QObject):

    class Format(object): ...
    IniFormat                : Format = ... # 0x1
    CustomFormat8            : Format = ... # 0x18
    CustomFormat9            : Format = ... # 0x19
    CustomFormat1            : Format = ... # 0x11
    CustomFormat3            : Format = ... # 0x13
    CustomFormat2            : Format = ... # 0x12
    CustomFormat5            : Format = ... # 0x15
    CustomFormat7            : Format = ... # 0x17
    InvalidFormat            : Format = ... # 0x10
    NativeFormat             : Format = ... # 0x0
    CustomFormat15           : Format = ... # 0x1f
    CustomFormat14           : Format = ... # 0x1e
    CustomFormat11           : Format = ... # 0x1b
    CustomFormat10           : Format = ... # 0x1a
    CustomFormat13           : Format = ... # 0x1d
    CustomFormat12           : Format = ... # 0x1c
    CustomFormat16           : Format = ... # 0x20
    CustomFormat4            : Format = ... # 0x14
    CustomFormat6            : Format = ... # 0x16

    class Scope(object): ...
    SystemScope              : Scope = ... # 0x1
    UserScope                : Scope = ... # 0x0

    class Status(object): ...
    AccessError              : Status = ... # 0x1
    NoError                  : Status = ... # 0x0
    FormatError              : Status = ... # 0x2

    @typing.overload
    def __init__(self, fileName: str, format: PySide2.QtCore.QSettings.Format, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, format: PySide2.QtCore.QSettings.Format, scope: PySide2.QtCore.QSettings.Scope, organization: str, application: str=..., parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, organization: str, application: str=..., parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, scope: PySide2.QtCore.QSettings.Scope, organization: str, application: str=..., parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, scope: PySide2.QtCore.QSettings.Scope, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def allKeys(self) -> List[str]: ...
    def applicationName(self) -> str: ...
    def beginGroup(self, prefix: str): ...
    def beginReadArray(self, prefix: str) -> int: ...
    def beginWriteArray(self, prefix: str, size: int=...): ...
    def childGroups(self) -> List[str]: ...
    def childKeys(self) -> List[str]: ...
    def clear(self): ...
    def contains(self, key: str) -> bool: ...
    @staticmethod
    def defaultFormat() -> PySide2.QtCore.QSettings.Format: ...
    def endArray(self): ...
    def endGroup(self): ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def fallbacksEnabled(self) -> bool: ...
    def fileName(self) -> str: ...
    def format(self) -> PySide2.QtCore.QSettings.Format: ...
    def group(self) -> str: ...
    def iniCodec(self) -> PySide2.QtCore.QTextCodec: ...
    def isAtomicSyncRequired(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def organizationName(self) -> str: ...
    def remove(self, key: str): ...
    def scope(self) -> PySide2.QtCore.QSettings.Scope: ...
    def setArrayIndex(self, i: int): ...
    def setAtomicSyncRequired(self, enable: bool): ...
    @staticmethod
    def setDefaultFormat(format: PySide2.QtCore.QSettings.Format): ...
    def setFallbacksEnabled(self, b: bool): ...
    @typing.overload
    def setIniCodec(self, codec: PySide2.QtCore.QTextCodec): ...
    @typing.overload
    def setIniCodec(self, codecName: str): ...
    @staticmethod
    def setPath(format: PySide2.QtCore.QSettings.Format, scope: PySide2.QtCore.QSettings.Scope, path: str): ...
    def setValue(self, key: str, value: Any): ...
    def status(self) -> PySide2.QtCore.QSettings.Status: ...
    def sync(self): ...
    def value(self, arg__1: str, defaultValue: Optional[Any]=..., type: object=...) -> object: ...


class QSignalBlocker(Shiboken.Object):

    def __init__(self, o: PySide2.QtCore.QObject): ...

    def reblock(self): ...
    def unblock(self): ...


class QSignalMapper(PySide2.QtCore.QObject):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    @typing.overload
    def map(self): ...
    @typing.overload
    def map(self, sender: PySide2.QtCore.QObject): ...
    @typing.overload
    def mapping(self, id: int) -> PySide2.QtCore.QObject: ...
    @typing.overload
    def mapping(self, object: PySide2.QtCore.QObject) -> PySide2.QtCore.QObject: ...
    @typing.overload
    def mapping(self, text: str) -> PySide2.QtCore.QObject: ...
    def removeMappings(self, sender: PySide2.QtCore.QObject): ...
    @typing.overload
    def setMapping(self, sender: PySide2.QtCore.QObject, id: int): ...
    @typing.overload
    def setMapping(self, sender: PySide2.QtCore.QObject, object: PySide2.QtCore.QObject): ...
    @typing.overload
    def setMapping(self, sender: PySide2.QtCore.QObject, text: str): ...


class QSignalTransition(PySide2.QtCore.QAbstractTransition):

    @typing.overload
    def __init__(self, arg__1: object, arg__2: Optional[PySide2.QtCore.QState]=...) -> PySide2.QtCore.QSignalTransition: ...
    @typing.overload
    def __init__(self, sender: PySide2.QtCore.QObject, signal: str, sourceState: Optional[PySide2.QtCore.QState]=...): ...
    @typing.overload
    def __init__(self, sourceState: Optional[PySide2.QtCore.QState]=...): ...

    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def eventTest(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def onTransition(self, event: PySide2.QtCore.QEvent): ...
    def senderObject(self) -> PySide2.QtCore.QObject: ...
    def setSenderObject(self, sender: PySide2.QtCore.QObject): ...
    def setSignal(self, signal: PySide2.QtCore.QByteArray): ...
    def signal(self) -> PySide2.QtCore.QByteArray: ...


class QSize(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QSize: PySide2.QtCore.QSize): ...
    @typing.overload
    def __init__(self, w: int, h: int): ...

    def __add__(self, s2: PySide2.QtCore.QSize) -> PySide2.QtCore.QSize: ...
    def __copy__(self): ...
    def __div__(self, c: float) -> PySide2.QtCore.QSize: ...
    def __iadd__(self, arg__1: PySide2.QtCore.QSize) -> PySide2.QtCore.QSize: ...
    def __imul__(self, c: float) -> PySide2.QtCore.QSize: ...
    def __isub__(self, arg__1: PySide2.QtCore.QSize) -> PySide2.QtCore.QSize: ...
    def __mul__(self, c: float) -> PySide2.QtCore.QSize: ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def __sub__(self, s2: PySide2.QtCore.QSize) -> PySide2.QtCore.QSize: ...
    def boundedTo(self, arg__1: PySide2.QtCore.QSize) -> PySide2.QtCore.QSize: ...
    def expandedTo(self, arg__1: PySide2.QtCore.QSize) -> PySide2.QtCore.QSize: ...
    def height(self) -> int: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    @typing.overload
    def scale(self, s: PySide2.QtCore.QSize, mode: PySide2.QtCore.Qt.AspectRatioMode): ...
    @typing.overload
    def scale(self, w: int, h: int, mode: PySide2.QtCore.Qt.AspectRatioMode): ...
    @typing.overload
    def scaled(self, s: PySide2.QtCore.QSize, mode: PySide2.QtCore.Qt.AspectRatioMode) -> PySide2.QtCore.QSize: ...
    @typing.overload
    def scaled(self, w: int, h: int, mode: PySide2.QtCore.Qt.AspectRatioMode) -> PySide2.QtCore.QSize: ...
    def setHeight(self, h: int): ...
    def setWidth(self, w: int): ...
    def toTuple(self) -> object: ...
    def transpose(self): ...
    def transposed(self) -> PySide2.QtCore.QSize: ...
    def width(self) -> int: ...


class QSizeF(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QSizeF: PySide2.QtCore.QSizeF): ...
    @typing.overload
    def __init__(self, sz: PySide2.QtCore.QSize): ...
    @typing.overload
    def __init__(self, w: float, h: float): ...

    def __add__(self, s2: PySide2.QtCore.QSizeF) -> PySide2.QtCore.QSizeF: ...
    def __copy__(self): ...
    def __div__(self, c: float) -> PySide2.QtCore.QSizeF: ...
    def __iadd__(self, arg__1: PySide2.QtCore.QSizeF) -> PySide2.QtCore.QSizeF: ...
    def __imul__(self, c: float) -> PySide2.QtCore.QSizeF: ...
    def __isub__(self, arg__1: PySide2.QtCore.QSizeF) -> PySide2.QtCore.QSizeF: ...
    def __mul__(self, c: float) -> PySide2.QtCore.QSizeF: ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def __sub__(self, s2: PySide2.QtCore.QSizeF) -> PySide2.QtCore.QSizeF: ...
    def boundedTo(self, arg__1: PySide2.QtCore.QSizeF) -> PySide2.QtCore.QSizeF: ...
    def expandedTo(self, arg__1: PySide2.QtCore.QSizeF) -> PySide2.QtCore.QSizeF: ...
    def height(self) -> float: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    @typing.overload
    def scale(self, s: PySide2.QtCore.QSizeF, mode: PySide2.QtCore.Qt.AspectRatioMode): ...
    @typing.overload
    def scale(self, w: float, h: float, mode: PySide2.QtCore.Qt.AspectRatioMode): ...
    @typing.overload
    def scaled(self, s: PySide2.QtCore.QSizeF, mode: PySide2.QtCore.Qt.AspectRatioMode) -> PySide2.QtCore.QSizeF: ...
    @typing.overload
    def scaled(self, w: float, h: float, mode: PySide2.QtCore.Qt.AspectRatioMode) -> PySide2.QtCore.QSizeF: ...
    def setHeight(self, h: float): ...
    def setWidth(self, w: float): ...
    def toSize(self) -> PySide2.QtCore.QSize: ...
    def toTuple(self) -> object: ...
    def transpose(self): ...
    def transposed(self) -> PySide2.QtCore.QSizeF: ...
    def width(self) -> float: ...


class QSocketNotifier(PySide2.QtCore.QObject):

    class Type(object): ...
    Write                    : Type = ... # 0x1
    Read                     : Type = ... # 0x0
    Exception                : Type = ... # 0x2

    @typing.overload
    def __init__(self, arg__1: object, arg__2: PySide2.QtCore.QSocketNotifier.Type, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, socket: int, arg__2: PySide2.QtCore.QSocketNotifier.Type, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def isEnabled(self) -> bool: ...
    def setEnabled(self, arg__1: bool): ...
    def socket(self) -> int: ...
    def type(self) -> PySide2.QtCore.QSocketNotifier.Type: ...


class QSortFilterProxyModel(PySide2.QtCore.QAbstractProxyModel):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def buddy(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def canFetchMore(self, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def columnCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    def data(self, index: PySide2.QtCore.QModelIndex, role: int=...) -> Any: ...
    def dropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def dynamicSortFilter(self) -> bool: ...
    def fetchMore(self, parent: PySide2.QtCore.QModelIndex): ...
    def filterAcceptsColumn(self, source_column: int, source_parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def filterAcceptsRow(self, source_row: int, source_parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def filterCaseSensitivity(self) -> PySide2.QtCore.Qt.CaseSensitivity: ...
    def filterKeyColumn(self) -> int: ...
    def filterRegExp(self) -> PySide2.QtCore.QRegExp: ...
    def filterRegularExpression(self) -> PySide2.QtCore.QRegularExpression: ...
    def filterRole(self) -> int: ...
    def flags(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.Qt.ItemFlags: ...
    def hasChildren(self, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def headerData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, role: int=...) -> Any: ...
    def index(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex=...) -> PySide2.QtCore.QModelIndex: ...
    def insertColumns(self, column: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def insertRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def invalidate(self): ...
    def invalidateFilter(self): ...
    def isRecursiveFilteringEnabled(self) -> bool: ...
    def isSortLocaleAware(self) -> bool: ...
    def lessThan(self, source_left: PySide2.QtCore.QModelIndex, source_right: PySide2.QtCore.QModelIndex) -> bool: ...
    def mapFromSource(self, sourceIndex: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def mapSelectionFromSource(self, sourceSelection: PySide2.QtCore.QItemSelection) -> PySide2.QtCore.QItemSelection: ...
    def mapSelectionToSource(self, proxySelection: PySide2.QtCore.QItemSelection) -> PySide2.QtCore.QItemSelection: ...
    def mapToSource(self, proxyIndex: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def match(self, start: PySide2.QtCore.QModelIndex, role: int, value: Any, hits: int=..., flags: PySide2.QtCore.Qt.MatchFlags=...) -> List[int]: ...
    def mimeData(self, indexes: List[int]) -> PySide2.QtCore.QMimeData: ...
    def mimeTypes(self) -> List[str]: ...
    @typing.overload
    def parent(self) -> PySide2.QtCore.QObject: ...
    @typing.overload
    def parent(self, child: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def removeColumns(self, column: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def removeRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def rowCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    def setData(self, index: PySide2.QtCore.QModelIndex, value: Any, role: int=...) -> bool: ...
    def setDynamicSortFilter(self, enable: bool): ...
    def setFilterCaseSensitivity(self, cs: PySide2.QtCore.Qt.CaseSensitivity): ...
    def setFilterFixedString(self, pattern: str): ...
    def setFilterKeyColumn(self, column: int): ...
    @typing.overload
    def setFilterRegExp(self, pattern: str): ...
    @typing.overload
    def setFilterRegExp(self, regExp: PySide2.QtCore.QRegExp): ...
    @typing.overload
    def setFilterRegularExpression(self, pattern: str): ...
    @typing.overload
    def setFilterRegularExpression(self, regularExpression: PySide2.QtCore.QRegularExpression): ...
    def setFilterRole(self, role: int): ...
    def setFilterWildcard(self, pattern: str): ...
    def setHeaderData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, value: Any, role: int=...) -> bool: ...
    def setRecursiveFilteringEnabled(self, recursive: bool): ...
    def setSortCaseSensitivity(self, cs: PySide2.QtCore.Qt.CaseSensitivity): ...
    def setSortLocaleAware(self, on: bool): ...
    def setSortRole(self, role: int): ...
    def setSourceModel(self, sourceModel: PySide2.QtCore.QAbstractItemModel): ...
    def sibling(self, row: int, column: int, idx: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def sort(self, column: int, order: PySide2.QtCore.Qt.SortOrder=...): ...
    def sortCaseSensitivity(self) -> PySide2.QtCore.Qt.CaseSensitivity: ...
    def sortColumn(self) -> int: ...
    def sortOrder(self) -> PySide2.QtCore.Qt.SortOrder: ...
    def sortRole(self) -> int: ...
    def span(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QSize: ...
    def supportedDropActions(self) -> PySide2.QtCore.Qt.DropActions: ...


class QStandardPaths(Shiboken.Object):

    class LocateOption(object): ...
    LocateDirectory          : LocateOption = ... # 0x1
    LocateFile               : LocateOption = ... # 0x0

    class LocateOptions(object): ...

    class StandardLocation(object): ...
    AppDataLocation          : StandardLocation = ... # 0x11
    ApplicationsLocation     : StandardLocation = ... # 0x3
    FontsLocation            : StandardLocation = ... # 0x2
    PicturesLocation         : StandardLocation = ... # 0x6
    DesktopLocation          : StandardLocation = ... # 0x0
    MusicLocation            : StandardLocation = ... # 0x4
    HomeLocation             : StandardLocation = ... # 0x8
    MoviesLocation           : StandardLocation = ... # 0x5
    DocumentsLocation        : StandardLocation = ... # 0x1
    AppConfigLocation        : StandardLocation = ... # 0x12
    ConfigLocation           : StandardLocation = ... # 0xd
    CacheLocation            : StandardLocation = ... # 0xa
    GenericConfigLocation    : StandardLocation = ... # 0x10
    TempLocation             : StandardLocation = ... # 0x7
    RuntimeLocation          : StandardLocation = ... # 0xc
    AppLocalDataLocation     : StandardLocation = ... # 0x9
    DataLocation             : StandardLocation = ... # 0x9
    GenericCacheLocation     : StandardLocation = ... # 0xf
    GenericDataLocation      : StandardLocation = ... # 0xb
    DownloadLocation         : StandardLocation = ... # 0xe
    @staticmethod
    def displayName(type: PySide2.QtCore.QStandardPaths.StandardLocation) -> str: ...
    @staticmethod
    def enableTestMode(testMode: bool): ...
    @staticmethod
    def findExecutable(executableName: str, paths: List[str]=...) -> str: ...
    @staticmethod
    def isTestModeEnabled() -> bool: ...
    @staticmethod
    def locate(type: PySide2.QtCore.QStandardPaths.StandardLocation, fileName: str, options: PySide2.QtCore.QStandardPaths.LocateOptions=...) -> str: ...
    @staticmethod
    def locateAll(type: PySide2.QtCore.QStandardPaths.StandardLocation, fileName: str, options: PySide2.QtCore.QStandardPaths.LocateOptions=...) -> List[str]: ...
    @staticmethod
    def setTestModeEnabled(testMode: bool): ...
    @staticmethod
    def standardLocations(type: PySide2.QtCore.QStandardPaths.StandardLocation) -> List[str]: ...
    @staticmethod
    def writableLocation(type: PySide2.QtCore.QStandardPaths.StandardLocation) -> str: ...


class QState(PySide2.QtCore.QAbstractState):

    class ChildMode(object): ...
    ExclusiveStates          : ChildMode = ... # 0x0
    ParallelStates           : ChildMode = ... # 0x1

    class RestorePolicy(object): ...
    RestoreProperties        : RestorePolicy = ... # 0x1
    DontRestoreProperties    : RestorePolicy = ... # 0x0

    @typing.overload
    def __init__(self, childMode: PySide2.QtCore.QState.ChildMode, parent: Optional[PySide2.QtCore.QState]=...): ...
    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QState]=...): ...

    @typing.overload
    def addTransition(self, arg__1: object, arg__2: PySide2.QtCore.QAbstractState) -> PySide2.QtCore.QSignalTransition: ...
    @typing.overload
    def addTransition(self, sender: PySide2.QtCore.QObject, signal: str, target: PySide2.QtCore.QAbstractState) -> PySide2.QtCore.QSignalTransition: ...
    @typing.overload
    def addTransition(self, target: PySide2.QtCore.QAbstractState) -> PySide2.QtCore.QAbstractTransition: ...
    @typing.overload
    def addTransition(self, transition: PySide2.QtCore.QAbstractTransition): ...
    def assignProperty(self, object: PySide2.QtCore.QObject, name: str, value: Any): ...
    def childMode(self) -> PySide2.QtCore.QState.ChildMode: ...
    def errorState(self) -> PySide2.QtCore.QAbstractState: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def initialState(self) -> PySide2.QtCore.QAbstractState: ...
    def onEntry(self, event: PySide2.QtCore.QEvent): ...
    def onExit(self, event: PySide2.QtCore.QEvent): ...
    def removeTransition(self, transition: PySide2.QtCore.QAbstractTransition): ...
    def setChildMode(self, mode: PySide2.QtCore.QState.ChildMode): ...
    def setErrorState(self, state: PySide2.QtCore.QAbstractState): ...
    def setInitialState(self, state: PySide2.QtCore.QAbstractState): ...
    def transitions(self) -> List[PySide2.QtCore.QAbstractTransition]: ...


class QStateMachine(PySide2.QtCore.QState):

    class Error(object): ...
    NoCommonAncestorForTransitionError: Error = ... # 0x3
    NoDefaultStateInHistoryStateError: Error = ... # 0x2
    NoInitialStateError      : Error = ... # 0x1
    NoError                  : Error = ... # 0x0

    class EventPriority(object): ...
    NormalPriority           : EventPriority = ... # 0x0
    HighPriority             : EventPriority = ... # 0x1

    class SignalEvent(PySide2.QtCore.QEvent):

        @typing.overload
        def __init__(self, SignalEvent: PySide2.QtCore.QStateMachine.SignalEvent): ...
        @typing.overload
        def __init__(self, sender: PySide2.QtCore.QObject, signalIndex: int, arguments: List[Any]): ...

        def __copy__(self): ...
        def arguments(self) -> List[Any]: ...
        def sender(self) -> PySide2.QtCore.QObject: ...
        def signalIndex(self) -> int: ...

    class WrappedEvent(PySide2.QtCore.QEvent):

        @typing.overload
        def __init__(self, WrappedEvent: PySide2.QtCore.QStateMachine.WrappedEvent): ...
        @typing.overload
        def __init__(self, object: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent): ...

        def __copy__(self): ...
        def event(self) -> PySide2.QtCore.QEvent: ...
        def object(self) -> PySide2.QtCore.QObject: ...

    @typing.overload
    def __init__(self, childMode: PySide2.QtCore.QState.ChildMode, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def addDefaultAnimation(self, animation: PySide2.QtCore.QAbstractAnimation): ...
    def addState(self, state: PySide2.QtCore.QAbstractState): ...
    def beginMicrostep(self, event: PySide2.QtCore.QEvent): ...
    def beginSelectTransitions(self, event: PySide2.QtCore.QEvent): ...
    def cancelDelayedEvent(self, id: int) -> bool: ...
    def clearError(self): ...
    @typing.overload
    def configuration(self) -> Set[PySide2.QtCore.QAbstractState]: ...
    @typing.overload
    def configuration(self) -> List[PySide2.QtCore.QAbstractState]: ...
    def defaultAnimations(self) -> List[PySide2.QtCore.QAbstractAnimation]: ...
    def endMicrostep(self, event: PySide2.QtCore.QEvent): ...
    def endSelectTransitions(self, event: PySide2.QtCore.QEvent): ...
    def error(self) -> PySide2.QtCore.QStateMachine.Error: ...
    def errorString(self) -> str: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    def globalRestorePolicy(self) -> PySide2.QtCore.QState.RestorePolicy: ...
    def isAnimated(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def onEntry(self, event: PySide2.QtCore.QEvent): ...
    def onExit(self, event: PySide2.QtCore.QEvent): ...
    def postDelayedEvent(self, event: PySide2.QtCore.QEvent, delay: int) -> int: ...
    def postEvent(self, event: PySide2.QtCore.QEvent, priority: PySide2.QtCore.QStateMachine.EventPriority=...): ...
    def removeDefaultAnimation(self, animation: PySide2.QtCore.QAbstractAnimation): ...
    def removeState(self, state: PySide2.QtCore.QAbstractState): ...
    def setAnimated(self, enabled: bool): ...
    def setGlobalRestorePolicy(self, restorePolicy: PySide2.QtCore.QState.RestorePolicy): ...
    def setRunning(self, running: bool): ...
    def start(self): ...
    def stop(self): ...


class QStorageInfo(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, dir: PySide2.QtCore.QDir): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QStorageInfo): ...
    @typing.overload
    def __init__(self, path: str): ...

    def __copy__(self): ...
    def blockSize(self) -> int: ...
    def bytesAvailable(self) -> int: ...
    def bytesFree(self) -> int: ...
    def bytesTotal(self) -> int: ...
    def device(self) -> PySide2.QtCore.QByteArray: ...
    def displayName(self) -> str: ...
    def fileSystemType(self) -> PySide2.QtCore.QByteArray: ...
    def isReadOnly(self) -> bool: ...
    def isReady(self) -> bool: ...
    def isRoot(self) -> bool: ...
    def isValid(self) -> bool: ...
    @staticmethod
    def mountedVolumes() -> List[PySide2.QtCore.QStorageInfo]: ...
    def name(self) -> str: ...
    def refresh(self): ...
    @staticmethod
    def root() -> PySide2.QtCore.QStorageInfo: ...
    def rootPath(self) -> str: ...
    def setPath(self, path: str): ...
    def subvolume(self) -> PySide2.QtCore.QByteArray: ...
    def swap(self, other: PySide2.QtCore.QStorageInfo): ...


class QStringListModel(PySide2.QtCore.QAbstractListModel):

    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, strings: List[str], parent: Optional[PySide2.QtCore.QObject]=...): ...

    def data(self, index: PySide2.QtCore.QModelIndex, role: int=...) -> Any: ...
    def flags(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.Qt.ItemFlags: ...
    def insertRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def itemData(self, index: PySide2.QtCore.QModelIndex) -> Dict: ...
    def moveRows(self, sourceParent: PySide2.QtCore.QModelIndex, sourceRow: int, count: int, destinationParent: PySide2.QtCore.QModelIndex, destinationChild: int) -> bool: ...
    def removeRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def rowCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    def setData(self, index: PySide2.QtCore.QModelIndex, value: Any, role: int=...) -> bool: ...
    def setItemData(self, index: PySide2.QtCore.QModelIndex, roles: Dict) -> bool: ...
    def setStringList(self, strings: List[str]): ...
    def sibling(self, row: int, column: int, idx: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def sort(self, column: int, order: PySide2.QtCore.Qt.SortOrder=...): ...
    def stringList(self) -> List[str]: ...
    def supportedDropActions(self) -> PySide2.QtCore.Qt.DropActions: ...


class QSysInfo(Shiboken.Object):

    class Endian(object): ...
    LittleEndian             : Endian = ... # 0x1
    BigEndian                : Endian = ... # 0x0
    ByteOrder                : Endian = ... # 0x1

    class MacVersion(object): ...
    MV_WATCHOS_2_2           : MacVersion = ... # 0x422
    MV_WATCHOS_2_0           : MacVersion = ... # 0x420
    MV_LION                  : MacVersion = ... # 0x9
    MV_TVOS_9_2              : MacVersion = ... # 0x292
    MV_TVOS_9_0              : MacVersion = ... # 0x290
    MV_TVOS_9_1              : MacVersion = ... # 0x291
    MV_WATCHOS_2_1           : MacVersion = ... # 0x421
    MV_CHEETAH               : MacVersion = ... # 0x2
    MV_IOS_8_0               : MacVersion = ... # 0x180
    MV_Unknown               : MacVersion = ... # 0x0
    MV_MOUNTAINLION          : MacVersion = ... # 0xa
    MV_PUMA                  : MacVersion = ... # 0x3
    MV_9                     : MacVersion = ... # 0x1
    MV_YOSEMITE              : MacVersion = ... # 0xc
    MV_MAVERICKS             : MacVersion = ... # 0xb
    MV_SNOWLEOPARD           : MacVersion = ... # 0x8
    MV_10_11                 : MacVersion = ... # 0xd
    MV_10_10                 : MacVersion = ... # 0xc
    MV_10_12                 : MacVersion = ... # 0xe
    MV_10_1                  : MacVersion = ... # 0x3
    MV_10_0                  : MacVersion = ... # 0x2
    MV_10_3                  : MacVersion = ... # 0x5
    MV_10_2                  : MacVersion = ... # 0x4
    MV_10_5                  : MacVersion = ... # 0x7
    MV_10_4                  : MacVersion = ... # 0x6
    MV_10_7                  : MacVersion = ... # 0x9
    MV_10_6                  : MacVersion = ... # 0x8
    MV_10_9                  : MacVersion = ... # 0xb
    MV_10_8                  : MacVersion = ... # 0xa
    MV_SIERRA                : MacVersion = ... # 0xe
    MV_LEOPARD               : MacVersion = ... # 0x7
    MV_IOS_9_0               : MacVersion = ... # 0x190
    MV_IOS_9_1               : MacVersion = ... # 0x191
    MV_IOS_9_2               : MacVersion = ... # 0x192
    MV_IOS_9_3               : MacVersion = ... # 0x193
    MV_IOS_10_0              : MacVersion = ... # 0x1a0
    MV_IOS                   : MacVersion = ... # 0x100
    MV_IOS_7_0               : MacVersion = ... # 0x170
    MV_IOS_7_1               : MacVersion = ... # 0x171
    MV_TIGER                 : MacVersion = ... # 0x6
    MV_ELCAPITAN             : MacVersion = ... # 0xd
    MV_IOS_5_0               : MacVersion = ... # 0x150
    MV_IOS_5_1               : MacVersion = ... # 0x151
    MV_PANTHER               : MacVersion = ... # 0x5
    MV_WATCHOS_3_0           : MacVersion = ... # 0x430
    MV_IOS_8_1               : MacVersion = ... # 0x181
    MV_IOS_8_3               : MacVersion = ... # 0x183
    MV_IOS_8_2               : MacVersion = ... # 0x182
    MV_IOS_8_4               : MacVersion = ... # 0x184
    MV_TVOS                  : MacVersion = ... # 0x200
    MV_JAGUAR                : MacVersion = ... # 0x4
    MV_TVOS_10_0             : MacVersion = ... # 0x2a0
    MV_IOS_6_1               : MacVersion = ... # 0x161
    MV_IOS_6_0               : MacVersion = ... # 0x160
    MV_WATCHOS               : MacVersion = ... # 0x400
    MV_IOS_4_3               : MacVersion = ... # 0x143
    MV_None                  : MacVersion = ... # 0xffff

    class Sizes(object): ...
    WordSize                 : Sizes = ... # 0x40

    def __init__(self): ...

    @staticmethod
    def bootUniqueId() -> PySide2.QtCore.QByteArray: ...
    @staticmethod
    def buildAbi() -> str: ...
    @staticmethod
    def buildCpuArchitecture() -> str: ...
    @staticmethod
    def currentCpuArchitecture() -> str: ...
    @staticmethod
    def kernelType() -> str: ...
    @staticmethod
    def kernelVersion() -> str: ...
    @staticmethod
    def macVersion() -> PySide2.QtCore.QSysInfo.MacVersion: ...
    @staticmethod
    def machineHostName() -> str: ...
    @staticmethod
    def machineUniqueId() -> PySide2.QtCore.QByteArray: ...
    @staticmethod
    def prettyProductName() -> str: ...
    @staticmethod
    def productType() -> str: ...
    @staticmethod
    def productVersion() -> str: ...


class QSystemSemaphore(Shiboken.Object):

    class AccessMode(object): ...
    Create                   : AccessMode = ... # 0x1
    Open                     : AccessMode = ... # 0x0

    class SystemSemaphoreError(object): ...
    AlreadyExists            : SystemSemaphoreError = ... # 0x3
    OutOfResources           : SystemSemaphoreError = ... # 0x5
    PermissionDenied         : SystemSemaphoreError = ... # 0x1
    KeyError                 : SystemSemaphoreError = ... # 0x2
    UnknownError             : SystemSemaphoreError = ... # 0x6
    NoError                  : SystemSemaphoreError = ... # 0x0
    NotFound                 : SystemSemaphoreError = ... # 0x4

    def __init__(self, key: str, initialValue: int=..., mode: PySide2.QtCore.QSystemSemaphore.AccessMode=...): ...

    def acquire(self) -> bool: ...
    def error(self) -> PySide2.QtCore.QSystemSemaphore.SystemSemaphoreError: ...
    def errorString(self) -> str: ...
    def key(self) -> str: ...
    def release(self, n: int=...) -> bool: ...
    def setKey(self, key: str, initialValue: int=..., mode: PySide2.QtCore.QSystemSemaphore.AccessMode=...): ...


class QTemporaryDir(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, templateName: str): ...

    def autoRemove(self) -> bool: ...
    def errorString(self) -> str: ...
    def filePath(self, fileName: str) -> str: ...
    def isValid(self) -> bool: ...
    def path(self) -> str: ...
    def remove(self) -> bool: ...
    def setAutoRemove(self, b: bool): ...


class QTemporaryFile(PySide2.QtCore.QFile):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, parent: PySide2.QtCore.QObject): ...
    @typing.overload
    def __init__(self, templateName: str): ...
    @typing.overload
    def __init__(self, templateName: str, parent: PySide2.QtCore.QObject): ...

    def autoRemove(self) -> bool: ...
    @typing.overload
    @staticmethod
    def createLocalFile(file: PySide2.QtCore.QFile) -> PySide2.QtCore.QTemporaryFile: ...
    @typing.overload
    @staticmethod
    def createLocalFile(fileName: str) -> PySide2.QtCore.QTemporaryFile: ...
    @typing.overload
    @staticmethod
    def createNativeFile(file: PySide2.QtCore.QFile) -> PySide2.QtCore.QTemporaryFile: ...
    @typing.overload
    @staticmethod
    def createNativeFile(fileName: str) -> PySide2.QtCore.QTemporaryFile: ...
    def fileName(self) -> str: ...
    def fileTemplate(self) -> str: ...
    @typing.overload
    def open(self) -> bool: ...
    @typing.overload
    def open(self, flags: PySide2.QtCore.QIODevice.OpenMode) -> bool: ...
    def rename(self, newName: str) -> bool: ...
    def setAutoRemove(self, b: bool): ...
    def setFileTemplate(self, name: str): ...


class QTextBoundaryFinder(Shiboken.Object):

    class BoundaryReason(object): ...
    BreakOpportunity         : BoundaryReason = ... # 0x1f
    SoftHyphen               : BoundaryReason = ... # 0x100
    EndOfItem                : BoundaryReason = ... # 0x40
    NotAtBoundary            : BoundaryReason = ... # 0x0
    MandatoryBreak           : BoundaryReason = ... # 0x80
    StartOfItem              : BoundaryReason = ... # 0x20

    class BoundaryReasons(object): ...

    class BoundaryType(object): ...
    Grapheme                 : BoundaryType = ... # 0x0
    Line                     : BoundaryType = ... # 0x3
    Word                     : BoundaryType = ... # 0x1
    Sentence                 : BoundaryType = ... # 0x2

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QTextBoundaryFinder): ...
    @typing.overload
    def __init__(self, type: PySide2.QtCore.QTextBoundaryFinder.BoundaryType, string: str): ...

    def __copy__(self): ...
    def boundaryReasons(self) -> PySide2.QtCore.QTextBoundaryFinder.BoundaryReasons: ...
    def isAtBoundary(self) -> bool: ...
    def isValid(self) -> bool: ...
    def position(self) -> int: ...
    def setPosition(self, position: int): ...
    def string(self) -> str: ...
    def toEnd(self): ...
    def toNextBoundary(self) -> int: ...
    def toPreviousBoundary(self) -> int: ...
    def toStart(self): ...
    def type(self) -> PySide2.QtCore.QTextBoundaryFinder.BoundaryType: ...


class QTextCodec(Shiboken.Object):

    class ConversionFlag(object): ...
    FreeFunction             : ConversionFlag = ... # 0x2
    ConvertInvalidToNull     : ConversionFlag = ... # -0x80000000
    IgnoreHeader             : ConversionFlag = ... # 0x1
    DefaultConversion        : ConversionFlag = ... # 0x0

    class ConversionFlags(object): ...

    class ConverterState(Shiboken.Object):

        def __init__(self, f: PySide2.QtCore.QTextCodec.ConversionFlags=...): ...


    def __init__(self): ...

    def aliases(self) -> List[PySide2.QtCore.QByteArray]: ...
    @staticmethod
    def availableCodecs() -> List[PySide2.QtCore.QByteArray]: ...
    @staticmethod
    def availableMibs() -> List[int]: ...
    @typing.overload
    def canEncode(self, arg__1: Char) -> bool: ...
    @typing.overload
    def canEncode(self, arg__1: str) -> bool: ...
    @typing.overload
    @staticmethod
    def codecForHtml(ba: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QTextCodec: ...
    @typing.overload
    @staticmethod
    def codecForHtml(ba: PySide2.QtCore.QByteArray, defaultCodec: PySide2.QtCore.QTextCodec) -> PySide2.QtCore.QTextCodec: ...
    @staticmethod
    def codecForLocale() -> PySide2.QtCore.QTextCodec: ...
    @staticmethod
    def codecForMib(mib: int) -> PySide2.QtCore.QTextCodec: ...
    @typing.overload
    @staticmethod
    def codecForName(name: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QTextCodec: ...
    @typing.overload
    @staticmethod
    def codecForName(name: str) -> PySide2.QtCore.QTextCodec: ...
    @typing.overload
    @staticmethod
    def codecForUtfText(ba: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QTextCodec: ...
    @typing.overload
    @staticmethod
    def codecForUtfText(ba: PySide2.QtCore.QByteArray, defaultCodec: PySide2.QtCore.QTextCodec) -> PySide2.QtCore.QTextCodec: ...
    def convertToUnicode(self, in_: str, length: int, state: PySide2.QtCore.QTextCodec.ConverterState) -> str: ...
    def fromUnicode(self, uc: str) -> PySide2.QtCore.QByteArray: ...
    def makeDecoder(self, flags: PySide2.QtCore.QTextCodec.ConversionFlags=...) -> PySide2.QtCore.QTextDecoder: ...
    def makeEncoder(self, flags: PySide2.QtCore.QTextCodec.ConversionFlags=...) -> PySide2.QtCore.QTextEncoder: ...
    def mibEnum(self) -> int: ...
    def name(self) -> PySide2.QtCore.QByteArray: ...
    @staticmethod
    def setCodecForLocale(c: PySide2.QtCore.QTextCodec): ...
    @typing.overload
    def toUnicode(self, arg__1: PySide2.QtCore.QByteArray) -> str: ...
    @typing.overload
    def toUnicode(self, chars: str) -> str: ...
    @typing.overload
    def toUnicode(self, in_: str, length: int, state: Optional[PySide2.QtCore.QTextCodec.ConverterState]=...) -> str: ...


class QTextDecoder(Shiboken.Object):

    @typing.overload
    def __init__(self, codec: PySide2.QtCore.QTextCodec): ...
    @typing.overload
    def __init__(self, codec: PySide2.QtCore.QTextCodec, flags: PySide2.QtCore.QTextCodec.ConversionFlags): ...

    def hasFailure(self) -> bool: ...
    def needsMoreData(self) -> bool: ...
    def toUnicode(self, ba: PySide2.QtCore.QByteArray) -> str: ...


class QTextEncoder(Shiboken.Object):

    @typing.overload
    def __init__(self, codec: PySide2.QtCore.QTextCodec): ...
    @typing.overload
    def __init__(self, codec: PySide2.QtCore.QTextCodec, flags: PySide2.QtCore.QTextCodec.ConversionFlags): ...

    def fromUnicode(self, str: str) -> PySide2.QtCore.QByteArray: ...
    def hasFailure(self) -> bool: ...


class QTextStream(Shiboken.Object):

    class FieldAlignment(object): ...
    AlignAccountingStyle     : FieldAlignment = ... # 0x3
    AlignLeft                : FieldAlignment = ... # 0x0
    AlignCenter              : FieldAlignment = ... # 0x2
    AlignRight               : FieldAlignment = ... # 0x1

    class NumberFlag(object): ...
    ForceSign                : NumberFlag = ... # 0x4
    ShowBase                 : NumberFlag = ... # 0x1
    ForcePoint               : NumberFlag = ... # 0x2
    UppercaseBase            : NumberFlag = ... # 0x8
    UppercaseDigits          : NumberFlag = ... # 0x10

    class NumberFlags(object): ...

    class RealNumberNotation(object): ...
    ScientificNotation       : RealNumberNotation = ... # 0x2
    FixedNotation            : RealNumberNotation = ... # 0x1
    SmartNotation            : RealNumberNotation = ... # 0x0

    class Status(object): ...
    WriteFailed              : Status = ... # 0x3
    ReadPastEnd              : Status = ... # 0x1
    Ok                       : Status = ... # 0x0
    ReadCorruptData          : Status = ... # 0x2

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, array: PySide2.QtCore.QByteArray, openMode: PySide2.QtCore.QIODevice.OpenMode=...): ...
    @typing.overload
    def __init__(self, device: PySide2.QtCore.QIODevice): ...

    @typing.overload
    def __lshift__(self, array: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QTextStream: ...
    @typing.overload
    def __lshift__(self, ch: Char) -> PySide2.QtCore.QTextStream: ...
    @typing.overload
    def __lshift__(self, ch: Char) -> PySide2.QtCore.QTextStream: ...
    @typing.overload
    def __lshift__(self, f: float) -> PySide2.QtCore.QTextStream: ...
    @typing.overload
    def __lshift__(self, i: int) -> PySide2.QtCore.QTextStream: ...
    @typing.overload
    def __lshift__(self, i: int) -> PySide2.QtCore.QTextStream: ...
    @typing.overload
    def __lshift__(self, m: PySide2.QtCore.QTextStreamManipulator) -> PySide2.QtCore.QTextStream: ...
    @typing.overload
    def __lshift__(self, s: str) -> PySide2.QtCore.QTextStream: ...
    @typing.overload
    def __lshift__(self, s: str) -> PySide2.QtCore.QTextStream: ...
    def __rshift__(self, array: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QTextStream: ...
    def atEnd(self) -> bool: ...
    def autoDetectUnicode(self) -> bool: ...
    def codec(self) -> PySide2.QtCore.QTextCodec: ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def fieldAlignment(self) -> PySide2.QtCore.QTextStream.FieldAlignment: ...
    def fieldWidth(self) -> int: ...
    def flush(self): ...
    def generateByteOrderMark(self) -> bool: ...
    def integerBase(self) -> int: ...
    def locale(self) -> PySide2.QtCore.QLocale: ...
    def numberFlags(self) -> PySide2.QtCore.QTextStream.NumberFlags: ...
    def padChar(self) -> Char: ...
    def pos(self) -> int: ...
    def read(self, maxlen: int) -> str: ...
    def readAll(self) -> str: ...
    def readLine(self, maxlen: int=...) -> str: ...
    def realNumberNotation(self) -> PySide2.QtCore.QTextStream.RealNumberNotation: ...
    def realNumberPrecision(self) -> int: ...
    def reset(self): ...
    def resetStatus(self): ...
    def seek(self, pos: int) -> bool: ...
    def setAutoDetectUnicode(self, enabled: bool): ...
    @typing.overload
    def setCodec(self, codec: PySide2.QtCore.QTextCodec): ...
    @typing.overload
    def setCodec(self, codecName: str): ...
    def setDevice(self, device: PySide2.QtCore.QIODevice): ...
    def setFieldAlignment(self, alignment: PySide2.QtCore.QTextStream.FieldAlignment): ...
    def setFieldWidth(self, width: int): ...
    def setGenerateByteOrderMark(self, generate: bool): ...
    def setIntegerBase(self, base: int): ...
    def setLocale(self, locale: PySide2.QtCore.QLocale): ...
    def setNumberFlags(self, flags: PySide2.QtCore.QTextStream.NumberFlags): ...
    def setPadChar(self, ch: Char): ...
    def setRealNumberNotation(self, notation: PySide2.QtCore.QTextStream.RealNumberNotation): ...
    def setRealNumberPrecision(self, precision: int): ...
    def setStatus(self, status: PySide2.QtCore.QTextStream.Status): ...
    def skipWhiteSpace(self): ...
    def status(self) -> PySide2.QtCore.QTextStream.Status: ...
    def string(self) -> str: ...


class QTextStreamManipulator(Shiboken.Object):
    def __copy__(self): ...
    def exec_(self, s: PySide2.QtCore.QTextStream): ...


class QThread(PySide2.QtCore.QObject):

    class Priority(object): ...
    NormalPriority           : Priority = ... # 0x3
    HighestPriority          : Priority = ... # 0x5
    TimeCriticalPriority     : Priority = ... # 0x6
    LowestPriority           : Priority = ... # 0x1
    IdlePriority             : Priority = ... # 0x0
    HighPriority             : Priority = ... # 0x4
    LowPriority              : Priority = ... # 0x2
    InheritPriority          : Priority = ... # 0x7

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    @staticmethod
    def currentThread() -> PySide2.QtCore.QThread: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def eventDispatcher(self) -> PySide2.QtCore.QAbstractEventDispatcher: ...
    def exec_(self) -> int: ...
    def exit(self, retcode: int=...): ...
    @staticmethod
    def idealThreadCount() -> int: ...
    def isFinished(self) -> bool: ...
    def isInterruptionRequested(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def loopLevel(self) -> int: ...
    @staticmethod
    def msleep(arg__1: int): ...
    def priority(self) -> PySide2.QtCore.QThread.Priority: ...
    def quit(self): ...
    def requestInterruption(self): ...
    def run(self): ...
    def setEventDispatcher(self, eventDispatcher: PySide2.QtCore.QAbstractEventDispatcher): ...
    def setPriority(self, priority: PySide2.QtCore.QThread.Priority): ...
    def setStackSize(self, stackSize: int): ...
    @staticmethod
    def setTerminationEnabled(enabled: bool=...): ...
    @staticmethod
    def sleep(arg__1: int): ...
    def stackSize(self) -> int: ...
    def start(self, priority: PySide2.QtCore.QThread.Priority=...): ...
    def terminate(self): ...
    @staticmethod
    def usleep(arg__1: int): ...
    def wait(self, time: int=...) -> bool: ...
    @staticmethod
    def yieldCurrentThread(): ...


class QThreadPool(PySide2.QtCore.QObject):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def activeThreadCount(self) -> int: ...
    def cancel(self, runnable: PySide2.QtCore.QRunnable): ...
    def clear(self): ...
    def expiryTimeout(self) -> int: ...
    @staticmethod
    def globalInstance() -> PySide2.QtCore.QThreadPool: ...
    def maxThreadCount(self) -> int: ...
    def releaseThread(self): ...
    def reserveThread(self): ...
    def setExpiryTimeout(self, expiryTimeout: int): ...
    def setMaxThreadCount(self, maxThreadCount: int): ...
    def setStackSize(self, stackSize: int): ...
    def stackSize(self) -> int: ...
    def start(self, runnable: PySide2.QtCore.QRunnable, priority: int=...): ...
    def tryStart(self, runnable: PySide2.QtCore.QRunnable) -> bool: ...
    def tryTake(self, runnable: PySide2.QtCore.QRunnable) -> bool: ...
    def waitForDone(self, msecs: int=...) -> bool: ...


class QTime(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QTime: PySide2.QtCore.QTime): ...
    @typing.overload
    def __init__(self, h: int, m: int, s: int=..., ms: int=...): ...

    def __copy__(self): ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def addMSecs(self, ms: int) -> PySide2.QtCore.QTime: ...
    def addSecs(self, secs: int) -> PySide2.QtCore.QTime: ...
    @staticmethod
    def currentTime() -> PySide2.QtCore.QTime: ...
    def elapsed(self) -> int: ...
    @staticmethod
    def fromMSecsSinceStartOfDay(msecs: int) -> PySide2.QtCore.QTime: ...
    @typing.overload
    @staticmethod
    def fromString(s: str, f: PySide2.QtCore.Qt.DateFormat=...) -> PySide2.QtCore.QTime: ...
    @typing.overload
    @staticmethod
    def fromString(s: str, format: str) -> PySide2.QtCore.QTime: ...
    def hour(self) -> int: ...
    def isNull(self) -> bool: ...
    @typing.overload
    @staticmethod
    def isValid() -> bool: ...
    @typing.overload
    @staticmethod
    def isValid(h: int, m: int, s: int, ms: int=...) -> bool: ...
    def minute(self) -> int: ...
    def msec(self) -> int: ...
    def msecsSinceStartOfDay(self) -> int: ...
    def msecsTo(self, arg__1: PySide2.QtCore.QTime) -> int: ...
    def restart(self) -> int: ...
    def second(self) -> int: ...
    def secsTo(self, arg__1: PySide2.QtCore.QTime) -> int: ...
    def setHMS(self, h: int, m: int, s: int, ms: int=...) -> bool: ...
    def start(self): ...
    def toPython(self) -> object: ...
    @typing.overload
    def toString(self, f: PySide2.QtCore.Qt.DateFormat=...) -> str: ...
    @typing.overload
    def toString(self, format: str) -> str: ...


class QTimeLine(PySide2.QtCore.QObject):

    class CurveShape(object): ...
    CosineCurve              : CurveShape = ... # 0x5
    EaseOutCurve             : CurveShape = ... # 0x1
    SineCurve                : CurveShape = ... # 0x4
    EaseInOutCurve           : CurveShape = ... # 0x2
    LinearCurve              : CurveShape = ... # 0x3
    EaseInCurve              : CurveShape = ... # 0x0

    class Direction(object): ...
    Backward                 : Direction = ... # 0x1
    Forward                  : Direction = ... # 0x0

    class State(object): ...
    NotRunning               : State = ... # 0x0
    Paused                   : State = ... # 0x1
    Running                  : State = ... # 0x2

    def __init__(self, duration: int=..., parent: Optional[PySide2.QtCore.QObject]=...): ...

    def currentFrame(self) -> int: ...
    def currentTime(self) -> int: ...
    def currentValue(self) -> float: ...
    def curveShape(self) -> PySide2.QtCore.QTimeLine.CurveShape: ...
    def direction(self) -> PySide2.QtCore.QTimeLine.Direction: ...
    def duration(self) -> int: ...
    def easingCurve(self) -> PySide2.QtCore.QEasingCurve: ...
    def endFrame(self) -> int: ...
    def frameForTime(self, msec: int) -> int: ...
    def loopCount(self) -> int: ...
    def resume(self): ...
    def setCurrentTime(self, msec: int): ...
    def setCurveShape(self, shape: PySide2.QtCore.QTimeLine.CurveShape): ...
    def setDirection(self, direction: PySide2.QtCore.QTimeLine.Direction): ...
    def setDuration(self, duration: int): ...
    def setEasingCurve(self, curve: PySide2.QtCore.QEasingCurve): ...
    def setEndFrame(self, frame: int): ...
    def setFrameRange(self, startFrame: int, endFrame: int): ...
    def setLoopCount(self, count: int): ...
    def setPaused(self, paused: bool): ...
    def setStartFrame(self, frame: int): ...
    def setUpdateInterval(self, interval: int): ...
    def start(self): ...
    def startFrame(self) -> int: ...
    def state(self) -> PySide2.QtCore.QTimeLine.State: ...
    def stop(self): ...
    def timerEvent(self, event: PySide2.QtCore.QTimerEvent): ...
    def toggleDirection(self): ...
    def updateInterval(self) -> int: ...
    def valueForTime(self, msec: int) -> float: ...


class QTimeZone(Shiboken.Object):

    class NameType(object): ...
    OffsetName               : NameType = ... # 0x3
    LongName                 : NameType = ... # 0x1
    ShortName                : NameType = ... # 0x2
    DefaultName              : NameType = ... # 0x0

    class OffsetData(Shiboken.Object):

        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, OffsetData: PySide2.QtCore.QTimeZone.OffsetData): ...

        def __copy__(self): ...

    class TimeType(object): ...
    DaylightTime             : TimeType = ... # 0x1
    GenericTime              : TimeType = ... # 0x2
    StandardTime             : TimeType = ... # 0x0

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, ianaId: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, offsetSeconds: int): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QTimeZone): ...
    @typing.overload
    def __init__(self, zoneId: PySide2.QtCore.QByteArray, offsetSeconds: int, name: str, abbreviation: str, country: PySide2.QtCore.QLocale.Country=..., comment: str=...): ...

    def __copy__(self): ...
    def abbreviation(self, atDateTime: PySide2.QtCore.QDateTime) -> str: ...
    @typing.overload
    @staticmethod
    def availableTimeZoneIds() -> List[PySide2.QtCore.QByteArray]: ...
    @typing.overload
    @staticmethod
    def availableTimeZoneIds(country: PySide2.QtCore.QLocale.Country) -> List[PySide2.QtCore.QByteArray]: ...
    @typing.overload
    @staticmethod
    def availableTimeZoneIds(offsetSeconds: int) -> List[PySide2.QtCore.QByteArray]: ...
    def comment(self) -> str: ...
    def country(self) -> PySide2.QtCore.QLocale.Country: ...
    def daylightTimeOffset(self, atDateTime: PySide2.QtCore.QDateTime) -> int: ...
    @typing.overload
    def displayName(self, atDateTime: PySide2.QtCore.QDateTime, nameType: PySide2.QtCore.QTimeZone.NameType=..., locale: PySide2.QtCore.QLocale=...) -> str: ...
    @typing.overload
    def displayName(self, timeType: PySide2.QtCore.QTimeZone.TimeType, nameType: PySide2.QtCore.QTimeZone.NameType=..., locale: PySide2.QtCore.QLocale=...) -> str: ...
    def hasDaylightTime(self) -> bool: ...
    def hasTransitions(self) -> bool: ...
    @staticmethod
    def ianaIdToWindowsId(ianaId: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    def id(self) -> PySide2.QtCore.QByteArray: ...
    def isDaylightTime(self, atDateTime: PySide2.QtCore.QDateTime) -> bool: ...
    @staticmethod
    def isTimeZoneIdAvailable(ianaId: PySide2.QtCore.QByteArray) -> bool: ...
    def isValid(self) -> bool: ...
    def nextTransition(self, afterDateTime: PySide2.QtCore.QDateTime) -> PySide2.QtCore.QTimeZone.OffsetData: ...
    def offsetData(self, forDateTime: PySide2.QtCore.QDateTime) -> PySide2.QtCore.QTimeZone.OffsetData: ...
    def offsetFromUtc(self, atDateTime: PySide2.QtCore.QDateTime) -> int: ...
    def previousTransition(self, beforeDateTime: PySide2.QtCore.QDateTime) -> PySide2.QtCore.QTimeZone.OffsetData: ...
    def standardTimeOffset(self, atDateTime: PySide2.QtCore.QDateTime) -> int: ...
    def swap(self, other: PySide2.QtCore.QTimeZone): ...
    @staticmethod
    def systemTimeZone() -> PySide2.QtCore.QTimeZone: ...
    @staticmethod
    def systemTimeZoneId() -> PySide2.QtCore.QByteArray: ...
    def transitions(self, fromDateTime: PySide2.QtCore.QDateTime, toDateTime: PySide2.QtCore.QDateTime) -> List[PySide2.QtCore.QTimeZone.OffsetData]: ...
    @staticmethod
    def utc() -> PySide2.QtCore.QTimeZone: ...
    @typing.overload
    @staticmethod
    def windowsIdToDefaultIanaId(windowsId: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    @staticmethod
    def windowsIdToDefaultIanaId(windowsId: PySide2.QtCore.QByteArray, country: PySide2.QtCore.QLocale.Country) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    @staticmethod
    def windowsIdToIanaIds(windowsId: PySide2.QtCore.QByteArray) -> List[PySide2.QtCore.QByteArray]: ...
    @typing.overload
    @staticmethod
    def windowsIdToIanaIds(windowsId: PySide2.QtCore.QByteArray, country: PySide2.QtCore.QLocale.Country) -> List[PySide2.QtCore.QByteArray]: ...


class QTimer(PySide2.QtCore.QObject):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def interval(self) -> int: ...
    def isActive(self) -> bool: ...
    def isSingleShot(self) -> bool: ...
    def killTimer(self, arg__1: int): ...
    def remainingTime(self) -> int: ...
    def setInterval(self, msec: int): ...
    def setSingleShot(self, singleShot: bool): ...
    def setTimerType(self, atype: PySide2.QtCore.Qt.TimerType): ...
    @typing.overload
    @staticmethod
    def singleShot(arg__1: int, arg__2: Callable): ...
    @typing.overload
    @staticmethod
    def singleShot(msec: int, receiver: PySide2.QtCore.QObject, member: str): ...
    @typing.overload
    @staticmethod
    def singleShot(msec: int, timerType: PySide2.QtCore.Qt.TimerType, receiver: PySide2.QtCore.QObject, member: str): ...
    @typing.overload
    def start(self): ...
    @typing.overload
    def start(self, msec: int): ...
    def stop(self): ...
    def timerEvent(self, arg__1: PySide2.QtCore.QTimerEvent): ...
    def timerId(self) -> int: ...
    def timerType(self) -> PySide2.QtCore.Qt.TimerType: ...


class QTimerEvent(PySide2.QtCore.QEvent):

    def __init__(self, timerId: int): ...

    def timerId(self) -> int: ...


class QTranslator(PySide2.QtCore.QObject):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def isEmpty(self) -> bool: ...
    @typing.overload
    def load(self, data: Char, len: int, directory: str=...) -> bool: ...
    @typing.overload
    def load(self, filename: str, directory: str=..., search_delimiters: str=..., suffix: str=...) -> bool: ...
    @typing.overload
    def load(self, locale: PySide2.QtCore.QLocale, filename: str, prefix: str=..., directory: str=..., suffix: str=...) -> bool: ...
    def translate(self, context: str, sourceText: str, disambiguation: Optional[str]=..., n: int=...) -> str: ...


class QTransposeProxyModel(PySide2.QtCore.QAbstractProxyModel):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def columnCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    def headerData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, role: int=...) -> Any: ...
    def index(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex=...) -> PySide2.QtCore.QModelIndex: ...
    def insertColumns(self, column: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def insertRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def itemData(self, index: PySide2.QtCore.QModelIndex) -> Dict: ...
    def mapFromSource(self, sourceIndex: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def mapToSource(self, proxyIndex: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def moveColumns(self, sourceParent: PySide2.QtCore.QModelIndex, sourceColumn: int, count: int, destinationParent: PySide2.QtCore.QModelIndex, destinationChild: int) -> bool: ...
    def moveRows(self, sourceParent: PySide2.QtCore.QModelIndex, sourceRow: int, count: int, destinationParent: PySide2.QtCore.QModelIndex, destinationChild: int) -> bool: ...
    @typing.overload
    def parent(self) -> PySide2.QtCore.QObject: ...
    @typing.overload
    def parent(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def removeColumns(self, column: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def removeRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex=...) -> bool: ...
    def rowCount(self, parent: PySide2.QtCore.QModelIndex=...) -> int: ...
    def setHeaderData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, value: Any, role: int=...) -> bool: ...
    def setItemData(self, index: PySide2.QtCore.QModelIndex, roles: Dict) -> bool: ...
    def setSourceModel(self, newSourceModel: PySide2.QtCore.QAbstractItemModel): ...
    def sort(self, column: int, order: PySide2.QtCore.Qt.SortOrder=...): ...
    def span(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QSize: ...


class QUrl(Shiboken.Object):

    class ComponentFormattingOption(object): ...
    EncodeDelimiters         : ComponentFormattingOption = ... # 0xc00000
    EncodeUnicode            : ComponentFormattingOption = ... # 0x200000
    FullyEncoded             : ComponentFormattingOption = ... # 0x1f00000
    DecodeReserved           : ComponentFormattingOption = ... # 0x2000000
    EncodeReserved           : ComponentFormattingOption = ... # 0x1000000
    PrettyDecoded            : ComponentFormattingOption = ... # 0x0
    FullyDecoded             : ComponentFormattingOption = ... # 0x7f00000
    EncodeSpaces             : ComponentFormattingOption = ... # 0x100000

    class FormattingOptions(object): ...

    class ParsingMode(object): ...
    TolerantMode             : ParsingMode = ... # 0x0
    StrictMode               : ParsingMode = ... # 0x1
    DecodedMode              : ParsingMode = ... # 0x2

    class UrlFormattingOption(object): ...
    RemoveFilename           : UrlFormattingOption = ... # 0x800
    None_                    : UrlFormattingOption = ... # 0x0
    RemoveScheme             : UrlFormattingOption = ... # 0x1
    RemoveAuthority          : UrlFormattingOption = ... # 0x1e
    NormalizePathSegments    : UrlFormattingOption = ... # 0x1000
    RemoveUserInfo           : UrlFormattingOption = ... # 0x6
    RemoveFragment           : UrlFormattingOption = ... # 0x80
    RemovePort               : UrlFormattingOption = ... # 0x8
    PreferLocalFile          : UrlFormattingOption = ... # 0x200
    RemoveQuery              : UrlFormattingOption = ... # 0x40
    RemovePassword           : UrlFormattingOption = ... # 0x2
    StripTrailingSlash       : UrlFormattingOption = ... # 0x400
    RemovePath               : UrlFormattingOption = ... # 0x20

    class UserInputResolutionOption(object): ...
    DefaultResolution        : UserInputResolutionOption = ... # 0x0
    AssumeLocalFile          : UserInputResolutionOption = ... # 0x1

    class UserInputResolutionOptions(object): ...

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, copy: PySide2.QtCore.QUrl): ...
    @typing.overload
    def __init__(self, url: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...

    def __copy__(self): ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def adjusted(self, options: PySide2.QtCore.QUrl.FormattingOptions) -> PySide2.QtCore.QUrl: ...
    def authority(self, options: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    def clear(self): ...
    def errorString(self) -> str: ...
    def fileName(self, options: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    def fragment(self, options: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    @staticmethod
    def fromAce(arg__1: PySide2.QtCore.QByteArray) -> str: ...
    @staticmethod
    def fromEncoded(url: PySide2.QtCore.QByteArray, mode: PySide2.QtCore.QUrl.ParsingMode=...) -> PySide2.QtCore.QUrl: ...
    @staticmethod
    def fromLocalFile(localfile: str) -> PySide2.QtCore.QUrl: ...
    @staticmethod
    def fromPercentEncoding(arg__1: PySide2.QtCore.QByteArray) -> str: ...
    @staticmethod
    def fromStringList(uris: List[str], mode: PySide2.QtCore.QUrl.ParsingMode=...) -> List[PySide2.QtCore.QUrl]: ...
    @typing.overload
    @staticmethod
    def fromUserInput(userInput: str) -> PySide2.QtCore.QUrl: ...
    @typing.overload
    @staticmethod
    def fromUserInput(userInput: str, workingDirectory: str, options: PySide2.QtCore.QUrl.UserInputResolutionOptions=...) -> PySide2.QtCore.QUrl: ...
    def hasFragment(self) -> bool: ...
    def hasQuery(self) -> bool: ...
    def host(self, arg__1: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    @staticmethod
    def idnWhitelist() -> List[str]: ...
    def isEmpty(self) -> bool: ...
    def isLocalFile(self) -> bool: ...
    def isParentOf(self, url: PySide2.QtCore.QUrl) -> bool: ...
    def isRelative(self) -> bool: ...
    def isValid(self) -> bool: ...
    def matches(self, url: PySide2.QtCore.QUrl, options: PySide2.QtCore.QUrl.FormattingOptions) -> bool: ...
    def password(self, arg__1: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    def path(self, options: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    def port(self, defaultPort: int=...) -> int: ...
    def query(self, arg__1: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    def resolved(self, relative: PySide2.QtCore.QUrl) -> PySide2.QtCore.QUrl: ...
    def scheme(self) -> str: ...
    def setAuthority(self, authority: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    def setFragment(self, fragment: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    def setHost(self, host: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    @staticmethod
    def setIdnWhitelist(arg__1: List[str]): ...
    def setPassword(self, password: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    def setPath(self, path: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    def setPort(self, port: int): ...
    @typing.overload
    def setQuery(self, query: PySide2.QtCore.QUrlQuery): ...
    @typing.overload
    def setQuery(self, query: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    def setScheme(self, scheme: str): ...
    def setUrl(self, url: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    def setUserInfo(self, userInfo: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    def setUserName(self, userName: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    def swap(self, other: PySide2.QtCore.QUrl): ...
    @staticmethod
    def toAce(arg__1: str) -> PySide2.QtCore.QByteArray: ...
    def toDisplayString(self, options: PySide2.QtCore.QUrl.FormattingOptions=...) -> str: ...
    def toEncoded(self, options: PySide2.QtCore.QUrl.FormattingOptions=...) -> PySide2.QtCore.QByteArray: ...
    def toLocalFile(self) -> str: ...
    @staticmethod
    def toPercentEncoding(arg__1: str, exclude: PySide2.QtCore.QByteArray=..., include: PySide2.QtCore.QByteArray=...) -> PySide2.QtCore.QByteArray: ...
    def toString(self, options: PySide2.QtCore.QUrl.FormattingOptions=...) -> str: ...
    @staticmethod
    def toStringList(uris: List[PySide2.QtCore.QUrl], options: PySide2.QtCore.QUrl.FormattingOptions=...) -> List[str]: ...
    def topLevelDomain(self, options: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    def url(self, options: PySide2.QtCore.QUrl.FormattingOptions=...) -> str: ...
    def userInfo(self, options: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    def userName(self, options: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...


class QUrlQuery(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtCore.QUrlQuery): ...
    @typing.overload
    def __init__(self, queryString: str): ...
    @typing.overload
    def __init__(self, url: PySide2.QtCore.QUrl): ...

    def __copy__(self): ...
    def addQueryItem(self, key: str, value: str): ...
    def allQueryItemValues(self, key: str, encoding: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> List[str]: ...
    def clear(self): ...
    @staticmethod
    def defaultQueryPairDelimiter() -> Char: ...
    @staticmethod
    def defaultQueryValueDelimiter() -> Char: ...
    def hasQueryItem(self, key: str) -> bool: ...
    def isEmpty(self) -> bool: ...
    def query(self, encoding: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    def queryItemValue(self, key: str, encoding: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    def queryItems(self, encoding: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> List[Tuple]: ...
    def queryPairDelimiter(self) -> Char: ...
    def queryValueDelimiter(self) -> Char: ...
    def removeAllQueryItems(self, key: str): ...
    def removeQueryItem(self, key: str): ...
    def setQuery(self, queryString: str): ...
    def setQueryDelimiters(self, valueDelimiter: Char, pairDelimiter: Char): ...
    def setQueryItems(self, query: List[Tuple]): ...
    def swap(self, other: PySide2.QtCore.QUrlQuery): ...
    def toString(self, encoding: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...


class QUuid(Shiboken.Object):

    class StringFormat(object): ...
    WithBraces               : StringFormat = ... # 0x0
    WithoutBraces            : StringFormat = ... # 0x1
    Id128                    : StringFormat = ... # 0x3

    class Variant(object): ...
    DCE                      : Variant = ... # 0x2
    Microsoft                : Variant = ... # 0x6
    Reserved                 : Variant = ... # 0x7
    VarUnknown               : Variant = ... # -0x1
    NCS                      : Variant = ... # 0x0

    class Version(object): ...
    Time                     : Version = ... # 0x1
    EmbeddedPOSIX            : Version = ... # 0x2
    VerUnknown               : Version = ... # -0x1
    Sha1                     : Version = ... # 0x5
    Name                     : Version = ... # 0x3
    Random                   : Version = ... # 0x4
    Md5                      : Version = ... # 0x3

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, arg__1: str): ...
    @typing.overload
    def __init__(self, arg__1: str): ...
    @typing.overload
    def __init__(self, l: int, w1: int, w2: int, b1: Char, b2: Char, b3: Char, b4: Char, b5: Char, b6: Char, b7: Char, b8: Char): ...

    def __copy__(self): ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    @staticmethod
    def createUuid() -> PySide2.QtCore.QUuid: ...
    @typing.overload
    @staticmethod
    def createUuidV3(ns: PySide2.QtCore.QUuid, baseData: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QUuid: ...
    @typing.overload
    @staticmethod
    def createUuidV3(ns: PySide2.QtCore.QUuid, baseData: str) -> PySide2.QtCore.QUuid: ...
    @typing.overload
    @staticmethod
    def createUuidV5(ns: PySide2.QtCore.QUuid, baseData: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QUuid: ...
    @typing.overload
    @staticmethod
    def createUuidV5(ns: PySide2.QtCore.QUuid, baseData: str) -> PySide2.QtCore.QUuid: ...
    @staticmethod
    def fromRfc4122(arg__1: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QUuid: ...
    def isNull(self) -> bool: ...
    @typing.overload
    def toByteArray(self) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def toByteArray(self, mode: PySide2.QtCore.QUuid.StringFormat) -> PySide2.QtCore.QByteArray: ...
    def toRfc4122(self) -> PySide2.QtCore.QByteArray: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, mode: PySide2.QtCore.QUuid.StringFormat) -> str: ...
    def variant(self) -> PySide2.QtCore.QUuid.Variant: ...
    def version(self) -> PySide2.QtCore.QUuid.Version: ...


class QVariantAnimation(PySide2.QtCore.QAbstractAnimation):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def currentValue(self) -> Any: ...
    def duration(self) -> int: ...
    def easingCurve(self) -> PySide2.QtCore.QEasingCurve: ...
    def endValue(self) -> Any: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def interpolated(self, from_: Any, to: Any, progress: float) -> Any: ...
    def keyValueAt(self, step: float) -> Any: ...
    def keyValues(self) -> List[Tuple]: ...
    def setDuration(self, msecs: int): ...
    def setEasingCurve(self, easing: PySide2.QtCore.QEasingCurve): ...
    def setEndValue(self, value: Any): ...
    def setKeyValueAt(self, step: float, value: Any): ...
    def setKeyValues(self, values: List[Tuple]): ...
    def setStartValue(self, value: Any): ...
    def startValue(self) -> Any: ...
    def updateCurrentTime(self, arg__1: int): ...
    def updateCurrentValue(self, value: Any): ...
    def updateState(self, newState: PySide2.QtCore.QAbstractAnimation.State, oldState: PySide2.QtCore.QAbstractAnimation.State): ...


class QVersionNumber(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, maj: int): ...
    @typing.overload
    def __init__(self, maj: int, min: int): ...
    @typing.overload
    def __init__(self, maj: int, min: int, mic: int): ...
    @typing.overload
    def __init__(self, seg: List[int]): ...

    def __copy__(self): ...
    @staticmethod
    def commonPrefix(v1: PySide2.QtCore.QVersionNumber, v2: PySide2.QtCore.QVersionNumber) -> PySide2.QtCore.QVersionNumber: ...
    @staticmethod
    def compare(v1: PySide2.QtCore.QVersionNumber, v2: PySide2.QtCore.QVersionNumber) -> int: ...
    @staticmethod
    def fromString(string: str, suffixIndex: Optional[int]=...) -> PySide2.QtCore.QVersionNumber: ...
    def isNormalized(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isPrefixOf(self, other: PySide2.QtCore.QVersionNumber) -> bool: ...
    def majorVersion(self) -> int: ...
    def microVersion(self) -> int: ...
    def minorVersion(self) -> int: ...
    def normalized(self) -> PySide2.QtCore.QVersionNumber: ...
    def segmentAt(self, index: int) -> int: ...
    def segmentCount(self) -> int: ...
    def segments(self) -> List[int]: ...
    def toString(self) -> str: ...


class QWaitCondition(Shiboken.Object):

    def __init__(self): ...

    def notify_all(self): ...
    def notify_one(self): ...
    @typing.overload
    def wait(self, lockedMutex: PySide2.QtCore.QMutex, time: int=...) -> bool: ...
    @typing.overload
    def wait(self, lockedReadWriteLock: PySide2.QtCore.QReadWriteLock, time: int=...) -> bool: ...
    def wakeAll(self): ...
    def wakeOne(self): ...


class QWriteLocker(Shiboken.Object):

    def __init__(self, readWriteLock: PySide2.QtCore.QReadWriteLock): ...

    def __enter__(self): ...
    def __exit__(self, arg__1: object, arg__2: object, arg__3: object): ...
    def readWriteLock(self) -> PySide2.QtCore.QReadWriteLock: ...
    def relock(self): ...
    def unlock(self): ...


class QXmlStreamAttribute(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QXmlStreamAttribute): ...
    @typing.overload
    def __init__(self, namespaceUri: str, name: str, value: str): ...
    @typing.overload
    def __init__(self, qualifiedName: str, value: str): ...

    def __copy__(self): ...
    def isDefault(self) -> bool: ...
    def name(self) -> str: ...
    def namespaceUri(self) -> str: ...
    def prefix(self) -> str: ...
    def qualifiedName(self) -> str: ...
    def value(self) -> str: ...


class QXmlStreamAttributes(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QXmlStreamAttributes: PySide2.QtCore.QXmlStreamAttributes): ...

    def __add__(self, l: List[PySide2.QtCore.QXmlStreamAttribute]) -> List[PySide2.QtCore.QXmlStreamAttribute]: ...
    def __copy__(self): ...
    def __iadd__(self, t: PySide2.QtCore.QXmlStreamAttribute) -> List[PySide2.QtCore.QXmlStreamAttribute]: ...
    @typing.overload
    def __lshift__(self, l: List[PySide2.QtCore.QXmlStreamAttribute]) -> List[PySide2.QtCore.QXmlStreamAttribute]: ...
    @typing.overload
    def __lshift__(self, t: PySide2.QtCore.QXmlStreamAttribute) -> List[PySide2.QtCore.QXmlStreamAttribute]: ...
    @typing.overload
    def append(self, namespaceUri: str, name: str, value: str): ...
    @typing.overload
    def append(self, qualifiedName: str, value: str): ...
    def at(self, i: int) -> PySide2.QtCore.QXmlStreamAttribute: ...
    def back(self) -> PySide2.QtCore.QXmlStreamAttribute: ...
    def capacity(self) -> int: ...
    def clear(self): ...
    def constData(self) -> PySide2.QtCore.QXmlStreamAttribute: ...
    def constFirst(self) -> PySide2.QtCore.QXmlStreamAttribute: ...
    def constLast(self) -> PySide2.QtCore.QXmlStreamAttribute: ...
    def contains(self, t: PySide2.QtCore.QXmlStreamAttribute) -> bool: ...
    @typing.overload
    def count(self) -> int: ...
    @typing.overload
    def count(self, t: PySide2.QtCore.QXmlStreamAttribute) -> int: ...
    def data(self) -> PySide2.QtCore.QXmlStreamAttribute: ...
    def empty(self) -> bool: ...
    def endsWith(self, t: PySide2.QtCore.QXmlStreamAttribute) -> bool: ...
    def fill(self, t: PySide2.QtCore.QXmlStreamAttribute, size: int=...) -> List[PySide2.QtCore.QXmlStreamAttribute]: ...
    def first(self) -> PySide2.QtCore.QXmlStreamAttribute: ...
    def front(self) -> PySide2.QtCore.QXmlStreamAttribute: ...
    @typing.overload
    def hasAttribute(self, namespaceUri: str, name: str) -> bool: ...
    @typing.overload
    def hasAttribute(self, qualifiedName: str) -> bool: ...
    def indexOf(self, t: PySide2.QtCore.QXmlStreamAttribute, from_: int=...) -> int: ...
    @typing.overload
    def insert(self, i: int, n: int, t: PySide2.QtCore.QXmlStreamAttribute): ...
    @typing.overload
    def insert(self, i: int, t: PySide2.QtCore.QXmlStreamAttribute): ...
    def isEmpty(self) -> bool: ...
    def isSharedWith(self, other: List[PySide2.QtCore.QXmlStreamAttribute]) -> bool: ...
    def last(self) -> PySide2.QtCore.QXmlStreamAttribute: ...
    def lastIndexOf(self, t: PySide2.QtCore.QXmlStreamAttribute, from_: int=...) -> int: ...
    def length(self) -> int: ...
    def mid(self, pos: int, len: int=...) -> List[PySide2.QtCore.QXmlStreamAttribute]: ...
    def move(self, from_: int, to: int): ...
    def prepend(self, t: PySide2.QtCore.QXmlStreamAttribute): ...
    @typing.overload
    def remove(self, i: int): ...
    @typing.overload
    def remove(self, i: int, n: int): ...
    def removeAll(self, t: PySide2.QtCore.QXmlStreamAttribute) -> int: ...
    def removeAt(self, i: int): ...
    def removeFirst(self): ...
    def removeLast(self): ...
    def removeOne(self, t: PySide2.QtCore.QXmlStreamAttribute) -> bool: ...
    def replace(self, i: int, t: PySide2.QtCore.QXmlStreamAttribute): ...
    def reserve(self, size: int): ...
    def resize(self, size: int): ...
    def setSharable(self, sharable: bool): ...
    def shrink_to_fit(self): ...
    def size(self) -> int: ...
    def squeeze(self): ...
    def startsWith(self, t: PySide2.QtCore.QXmlStreamAttribute) -> bool: ...
    def swap(self, other: List[PySide2.QtCore.QXmlStreamAttribute]): ...
    def takeAt(self, i: int) -> PySide2.QtCore.QXmlStreamAttribute: ...
    def takeFirst(self) -> PySide2.QtCore.QXmlStreamAttribute: ...
    def takeLast(self) -> PySide2.QtCore.QXmlStreamAttribute: ...
    @typing.overload
    def value(self, namespaceUri: str, name: str) -> str: ...
    @typing.overload
    def value(self, qualifiedName: str) -> str: ...


class QXmlStreamEntityDeclaration(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QXmlStreamEntityDeclaration): ...

    def __copy__(self): ...
    def name(self) -> str: ...
    def notationName(self) -> str: ...
    def publicId(self) -> str: ...
    def systemId(self) -> str: ...
    def value(self) -> str: ...


class QXmlStreamEntityResolver(Shiboken.Object):

    def __init__(self): ...

    def resolveEntity(self, publicId: str, systemId: str) -> str: ...
    def resolveUndeclaredEntity(self, name: str) -> str: ...


class QXmlStreamNamespaceDeclaration(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QXmlStreamNamespaceDeclaration): ...
    @typing.overload
    def __init__(self, prefix: str, namespaceUri: str): ...

    def __copy__(self): ...
    def namespaceUri(self) -> str: ...
    def prefix(self) -> str: ...


class QXmlStreamNotationDeclaration(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1: PySide2.QtCore.QXmlStreamNotationDeclaration): ...

    def __copy__(self): ...
    def name(self) -> str: ...
    def publicId(self) -> str: ...
    def systemId(self) -> str: ...


class QXmlStreamReader(Shiboken.Object):

    class Error(object): ...
    PrematureEndOfDocumentError: Error = ... # 0x4
    NoError                  : Error = ... # 0x0
    UnexpectedElementError   : Error = ... # 0x1
    CustomError              : Error = ... # 0x2
    NotWellFormedError       : Error = ... # 0x3

    class ReadElementTextBehaviour(object): ...
    SkipChildElements        : ReadElementTextBehaviour = ... # 0x2
    ErrorOnUnexpectedElement : ReadElementTextBehaviour = ... # 0x0
    IncludeChildElements     : ReadElementTextBehaviour = ... # 0x1

    class TokenType(object): ...
    EndDocument              : TokenType = ... # 0x3
    Invalid                  : TokenType = ... # 0x1
    EntityReference          : TokenType = ... # 0x9
    NoToken                  : TokenType = ... # 0x0
    Characters               : TokenType = ... # 0x6
    StartDocument            : TokenType = ... # 0x2
    DTD                      : TokenType = ... # 0x8
    Comment                  : TokenType = ... # 0x7
    ProcessingInstruction    : TokenType = ... # 0xa
    EndElement               : TokenType = ... # 0x5
    StartElement             : TokenType = ... # 0x4

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, data: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, data: str): ...
    @typing.overload
    def __init__(self, data: str): ...
    @typing.overload
    def __init__(self, device: PySide2.QtCore.QIODevice): ...

    @typing.overload
    def addData(self, data: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def addData(self, data: str): ...
    @typing.overload
    def addData(self, data: str): ...
    def addExtraNamespaceDeclaration(self, extraNamespaceDeclaraction: PySide2.QtCore.QXmlStreamNamespaceDeclaration): ...
    def addExtraNamespaceDeclarations(self, extraNamespaceDeclaractions: List[PySide2.QtCore.QXmlStreamNamespaceDeclaration]): ...
    def atEnd(self) -> bool: ...
    def attributes(self) -> PySide2.QtCore.QXmlStreamAttributes: ...
    def characterOffset(self) -> int: ...
    def clear(self): ...
    def columnNumber(self) -> int: ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def documentEncoding(self) -> str: ...
    def documentVersion(self) -> str: ...
    def dtdName(self) -> str: ...
    def dtdPublicId(self) -> str: ...
    def dtdSystemId(self) -> str: ...
    def entityDeclarations(self) -> List[PySide2.QtCore.QXmlStreamEntityDeclaration]: ...
    def entityResolver(self) -> PySide2.QtCore.QXmlStreamEntityResolver: ...
    def error(self) -> PySide2.QtCore.QXmlStreamReader.Error: ...
    def errorString(self) -> str: ...
    def hasError(self) -> bool: ...
    def isCDATA(self) -> bool: ...
    def isCharacters(self) -> bool: ...
    def isComment(self) -> bool: ...
    def isDTD(self) -> bool: ...
    def isEndDocument(self) -> bool: ...
    def isEndElement(self) -> bool: ...
    def isEntityReference(self) -> bool: ...
    def isProcessingInstruction(self) -> bool: ...
    def isStandaloneDocument(self) -> bool: ...
    def isStartDocument(self) -> bool: ...
    def isStartElement(self) -> bool: ...
    def isWhitespace(self) -> bool: ...
    def lineNumber(self) -> int: ...
    def name(self) -> str: ...
    def namespaceDeclarations(self) -> List[PySide2.QtCore.QXmlStreamNamespaceDeclaration]: ...
    def namespaceProcessing(self) -> bool: ...
    def namespaceUri(self) -> str: ...
    def notationDeclarations(self) -> List[PySide2.QtCore.QXmlStreamNotationDeclaration]: ...
    def prefix(self) -> str: ...
    def processingInstructionData(self) -> str: ...
    def processingInstructionTarget(self) -> str: ...
    def qualifiedName(self) -> str: ...
    def raiseError(self, message: str=...): ...
    def readElementText(self, behaviour: PySide2.QtCore.QXmlStreamReader.ReadElementTextBehaviour=...) -> str: ...
    def readNext(self) -> PySide2.QtCore.QXmlStreamReader.TokenType: ...
    def readNextStartElement(self) -> bool: ...
    def setDevice(self, device: PySide2.QtCore.QIODevice): ...
    def setEntityResolver(self, resolver: PySide2.QtCore.QXmlStreamEntityResolver): ...
    def setNamespaceProcessing(self, arg__1: bool): ...
    def skipCurrentElement(self): ...
    def text(self) -> str: ...
    def tokenString(self) -> str: ...
    def tokenType(self) -> PySide2.QtCore.QXmlStreamReader.TokenType: ...


class QXmlStreamWriter(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, array: PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, device: PySide2.QtCore.QIODevice): ...

    def autoFormatting(self) -> bool: ...
    def autoFormattingIndent(self) -> int: ...
    def codec(self) -> PySide2.QtCore.QTextCodec: ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def hasError(self) -> bool: ...
    def setAutoFormatting(self, arg__1: bool): ...
    def setAutoFormattingIndent(self, spacesOrTabs: int): ...
    @typing.overload
    def setCodec(self, codec: PySide2.QtCore.QTextCodec): ...
    @typing.overload
    def setCodec(self, codecName: str): ...
    def setDevice(self, device: PySide2.QtCore.QIODevice): ...
    @typing.overload
    def writeAttribute(self, attribute: PySide2.QtCore.QXmlStreamAttribute): ...
    @typing.overload
    def writeAttribute(self, namespaceUri: str, name: str, value: str): ...
    @typing.overload
    def writeAttribute(self, qualifiedName: str, value: str): ...
    def writeAttributes(self, attributes: PySide2.QtCore.QXmlStreamAttributes): ...
    def writeCDATA(self, text: str): ...
    def writeCharacters(self, text: str): ...
    def writeComment(self, text: str): ...
    def writeCurrentToken(self, reader: PySide2.QtCore.QXmlStreamReader): ...
    def writeDTD(self, dtd: str): ...
    def writeDefaultNamespace(self, namespaceUri: str): ...
    @typing.overload
    def writeEmptyElement(self, namespaceUri: str, name: str): ...
    @typing.overload
    def writeEmptyElement(self, qualifiedName: str): ...
    def writeEndDocument(self): ...
    def writeEndElement(self): ...
    def writeEntityReference(self, name: str): ...
    def writeNamespace(self, namespaceUri: str, prefix: str=...): ...
    def writeProcessingInstruction(self, target: str, data: str=...): ...
    @typing.overload
    def writeStartDocument(self): ...
    @typing.overload
    def writeStartDocument(self, version: str): ...
    @typing.overload
    def writeStartDocument(self, version: str, standalone: bool): ...
    @typing.overload
    def writeStartElement(self, namespaceUri: str, name: str): ...
    @typing.overload
    def writeStartElement(self, qualifiedName: str): ...
    @typing.overload
    def writeTextElement(self, namespaceUri: str, name: str, text: str): ...
    @typing.overload
    def writeTextElement(self, qualifiedName: str, text: str): ...


class Qt(Shiboken.Object):

    class Alignment(object): ...

    class AlignmentFlag(object): ...
    AlignBottom              : AlignmentFlag = ... # 0x40
    AlignHCenter             : AlignmentFlag = ... # 0x4
    AlignTop                 : AlignmentFlag = ... # 0x20
    AlignLeading             : AlignmentFlag = ... # 0x1
    AlignVCenter             : AlignmentFlag = ... # 0x80
    AlignLeft                : AlignmentFlag = ... # 0x1
    AlignAbsolute            : AlignmentFlag = ... # 0x10
    AlignHorizontal_Mask     : AlignmentFlag = ... # 0x1f
    AlignBaseline            : AlignmentFlag = ... # 0x100
    AlignVertical_Mask       : AlignmentFlag = ... # 0x1e0
    AlignTrailing            : AlignmentFlag = ... # 0x2
    AlignCenter              : AlignmentFlag = ... # 0x84
    AlignJustify             : AlignmentFlag = ... # 0x8
    AlignRight               : AlignmentFlag = ... # 0x2

    class AnchorPoint(object): ...
    AnchorRight              : AnchorPoint = ... # 0x2
    AnchorTop                : AnchorPoint = ... # 0x3
    AnchorHorizontalCenter   : AnchorPoint = ... # 0x1
    AnchorVerticalCenter     : AnchorPoint = ... # 0x4
    AnchorBottom             : AnchorPoint = ... # 0x5
    AnchorLeft               : AnchorPoint = ... # 0x0

    class ApplicationAttribute(object): ...
    AA_DontShowIconsInMenus  : ApplicationAttribute = ... # 0x2
    AA_DontUseNativeMenuBar  : ApplicationAttribute = ... # 0x6
    AA_DisableWindowContextHelpButton: ApplicationAttribute = ... # 0x1e
    AA_NativeWindows         : ApplicationAttribute = ... # 0x3
    AA_SynthesizeTouchForUnhandledMouseEvents: ApplicationAttribute = ... # 0xb
    AA_DontShowShortcutsInContextMenus: ApplicationAttribute = ... # 0x1c
    AA_MacDontSwapCtrlAndMeta: ApplicationAttribute = ... # 0x7
    AA_SetPalette            : ApplicationAttribute = ... # 0x13
    AA_ShareOpenGLContexts   : ApplicationAttribute = ... # 0x12
    AA_PluginApplication     : ApplicationAttribute = ... # 0x5
    AA_DisableHighDpiScaling : ApplicationAttribute = ... # 0x15
    AA_DisableShaderDiskCache: ApplicationAttribute = ... # 0x1b
    AA_DontUseNativeDialogs  : ApplicationAttribute = ... # 0x17
    AA_UseStyleSheetPropagationInWidgetStyles: ApplicationAttribute = ... # 0x16
    AA_ForceRasterWidgets    : ApplicationAttribute = ... # 0xe
    AA_AttributeCount        : ApplicationAttribute = ... # 0x1f
    AA_CompressTabletEvents  : ApplicationAttribute = ... # 0x1d
    AA_DontCheckOpenGLContextThreadAffinity: ApplicationAttribute = ... # 0x1a
    AA_UseDesktopOpenGL      : ApplicationAttribute = ... # 0xf
    AA_X11InitThreads        : ApplicationAttribute = ... # 0xa
    AA_CompressHighFrequencyEvents: ApplicationAttribute = ... # 0x19
    AA_ImmediateWidgetCreation: ApplicationAttribute = ... # 0x0
    AA_SynthesizeMouseForUnhandledTouchEvents: ApplicationAttribute = ... # 0xc
    AA_Use96Dpi              : ApplicationAttribute = ... # 0x8
    AA_UseOpenGLES           : ApplicationAttribute = ... # 0x10
    AA_EnableHighDpiScaling  : ApplicationAttribute = ... # 0x14
    AA_SynthesizeMouseForUnhandledTabletEvents: ApplicationAttribute = ... # 0x18
    AA_UseSoftwareOpenGL     : ApplicationAttribute = ... # 0x11
    AA_DontCreateNativeWidgetSiblings: ApplicationAttribute = ... # 0x4
    AA_MSWindowsUseDirect3DByDefault: ApplicationAttribute = ... # 0x1
    AA_UseHighDpiPixmaps     : ApplicationAttribute = ... # 0xd
    AA_MacPluginApplication  : ApplicationAttribute = ... # 0x5

    class ApplicationState(object): ...
    ApplicationSuspended     : ApplicationState = ... # 0x0
    ApplicationInactive      : ApplicationState = ... # 0x2
    ApplicationHidden        : ApplicationState = ... # 0x1
    ApplicationActive        : ApplicationState = ... # 0x4

    class ApplicationStates(object): ...

    class ArrowType(object): ...
    DownArrow                : ArrowType = ... # 0x2
    RightArrow               : ArrowType = ... # 0x4
    NoArrow                  : ArrowType = ... # 0x0
    LeftArrow                : ArrowType = ... # 0x3
    UpArrow                  : ArrowType = ... # 0x1

    class AspectRatioMode(object): ...
    KeepAspectRatioByExpanding: AspectRatioMode = ... # 0x2
    IgnoreAspectRatio        : AspectRatioMode = ... # 0x0
    KeepAspectRatio          : AspectRatioMode = ... # 0x1

    class Axis(object): ...
    YAxis                    : Axis = ... # 0x1
    ZAxis                    : Axis = ... # 0x2
    XAxis                    : Axis = ... # 0x0

    class BGMode(object): ...
    TransparentMode          : BGMode = ... # 0x0
    OpaqueMode               : BGMode = ... # 0x1

    class BrushStyle(object): ...
    SolidPattern             : BrushStyle = ... # 0x1
    Dense5Pattern            : BrushStyle = ... # 0x6
    Dense7Pattern            : BrushStyle = ... # 0x8
    DiagCrossPattern         : BrushStyle = ... # 0xe
    CrossPattern             : BrushStyle = ... # 0xb
    RadialGradientPattern    : BrushStyle = ... # 0x10
    HorPattern               : BrushStyle = ... # 0x9
    VerPattern               : BrushStyle = ... # 0xa
    Dense2Pattern            : BrushStyle = ... # 0x3
    ConicalGradientPattern   : BrushStyle = ... # 0x11
    Dense4Pattern            : BrushStyle = ... # 0x5
    Dense6Pattern            : BrushStyle = ... # 0x7
    Dense3Pattern            : BrushStyle = ... # 0x4
    TexturePattern           : BrushStyle = ... # 0x18
    NoBrush                  : BrushStyle = ... # 0x0
    LinearGradientPattern    : BrushStyle = ... # 0xf
    BDiagPattern             : BrushStyle = ... # 0xc
    Dense1Pattern            : BrushStyle = ... # 0x2
    FDiagPattern             : BrushStyle = ... # 0xd

    class CaseSensitivity(object): ...
    CaseInsensitive          : CaseSensitivity = ... # 0x0
    CaseSensitive            : CaseSensitivity = ... # 0x1

    class CheckState(object): ...
    Checked                  : CheckState = ... # 0x2
    PartiallyChecked         : CheckState = ... # 0x1
    Unchecked                : CheckState = ... # 0x0

    class ChecksumType(object): ...
    ChecksumItuV41           : ChecksumType = ... # 0x1
    ChecksumIso3309          : ChecksumType = ... # 0x0

    class ClipOperation(object): ...
    ReplaceClip              : ClipOperation = ... # 0x1
    IntersectClip            : ClipOperation = ... # 0x2
    NoClip                   : ClipOperation = ... # 0x0

    class ConnectionType(object): ...
    UniqueConnection         : ConnectionType = ... # 0x80
    BlockingQueuedConnection : ConnectionType = ... # 0x3
    AutoConnection           : ConnectionType = ... # 0x0
    QueuedConnection         : ConnectionType = ... # 0x2
    DirectConnection         : ConnectionType = ... # 0x1

    class ContextMenuPolicy(object): ...
    ActionsContextMenu       : ContextMenuPolicy = ... # 0x2
    CustomContextMenu        : ContextMenuPolicy = ... # 0x3
    PreventContextMenu       : ContextMenuPolicy = ... # 0x4
    DefaultContextMenu       : ContextMenuPolicy = ... # 0x1
    NoContextMenu            : ContextMenuPolicy = ... # 0x0

    class CoordinateSystem(object): ...
    LogicalCoordinates       : CoordinateSystem = ... # 0x1
    DeviceCoordinates        : CoordinateSystem = ... # 0x0

    class Corner(object): ...
    BottomLeftCorner         : Corner = ... # 0x2
    TopRightCorner           : Corner = ... # 0x1
    BottomRightCorner        : Corner = ... # 0x3
    TopLeftCorner            : Corner = ... # 0x0

    class CursorMoveStyle(object): ...
    LogicalMoveStyle         : CursorMoveStyle = ... # 0x0
    VisualMoveStyle          : CursorMoveStyle = ... # 0x1

    class CursorShape(object): ...
    DragCopyCursor           : CursorShape = ... # 0x13
    CrossCursor              : CursorShape = ... # 0x2
    SizeFDiagCursor          : CursorShape = ... # 0x8
    SizeAllCursor            : CursorShape = ... # 0x9
    SizeHorCursor            : CursorShape = ... # 0x6
    CustomCursor             : CursorShape = ... # 0x19
    LastCursor               : CursorShape = ... # 0x15
    IBeamCursor              : CursorShape = ... # 0x4
    DragLinkCursor           : CursorShape = ... # 0x15
    SizeVerCursor            : CursorShape = ... # 0x5
    SplitVCursor             : CursorShape = ... # 0xb
    SplitHCursor             : CursorShape = ... # 0xc
    OpenHandCursor           : CursorShape = ... # 0x11
    BusyCursor               : CursorShape = ... # 0x10
    WhatsThisCursor          : CursorShape = ... # 0xf
    BitmapCursor             : CursorShape = ... # 0x18
    DragMoveCursor           : CursorShape = ... # 0x14
    UpArrowCursor            : CursorShape = ... # 0x1
    ArrowCursor              : CursorShape = ... # 0x0
    ClosedHandCursor         : CursorShape = ... # 0x12
    WaitCursor               : CursorShape = ... # 0x3
    BlankCursor              : CursorShape = ... # 0xa
    PointingHandCursor       : CursorShape = ... # 0xd
    ForbiddenCursor          : CursorShape = ... # 0xe
    SizeBDiagCursor          : CursorShape = ... # 0x7

    class DateFormat(object): ...
    ISODate                  : DateFormat = ... # 0x1
    TextDate                 : DateFormat = ... # 0x0
    DefaultLocaleLongDate    : DateFormat = ... # 0x7
    LocalDate                : DateFormat = ... # 0x2
    ISODateWithMs            : DateFormat = ... # 0x9
    SystemLocaleDate         : DateFormat = ... # 0x2
    DefaultLocaleShortDate   : DateFormat = ... # 0x6
    SystemLocaleShortDate    : DateFormat = ... # 0x4
    LocaleDate               : DateFormat = ... # 0x3
    RFC2822Date              : DateFormat = ... # 0x8
    SystemLocaleLongDate     : DateFormat = ... # 0x5

    class DayOfWeek(object): ...
    Thursday                 : DayOfWeek = ... # 0x4
    Sunday                   : DayOfWeek = ... # 0x7
    Monday                   : DayOfWeek = ... # 0x1
    Friday                   : DayOfWeek = ... # 0x5
    Wednesday                : DayOfWeek = ... # 0x3
    Tuesday                  : DayOfWeek = ... # 0x2
    Saturday                 : DayOfWeek = ... # 0x6

    class DockWidgetArea(object): ...
    LeftDockWidgetArea       : DockWidgetArea = ... # 0x1
    NoDockWidgetArea         : DockWidgetArea = ... # 0x0
    BottomDockWidgetArea     : DockWidgetArea = ... # 0x8
    AllDockWidgetAreas       : DockWidgetArea = ... # 0xf
    TopDockWidgetArea        : DockWidgetArea = ... # 0x4
    DockWidgetArea_Mask      : DockWidgetArea = ... # 0xf
    RightDockWidgetArea      : DockWidgetArea = ... # 0x2

    class DockWidgetAreaSizes(object): ...
    NDockWidgetAreas         : DockWidgetAreaSizes = ... # 0x4

    class DockWidgetAreas(object): ...

    class DropAction(object): ...
    MoveAction               : DropAction = ... # 0x2
    TargetMoveAction         : DropAction = ... # 0x8002
    LinkAction               : DropAction = ... # 0x4
    CopyAction               : DropAction = ... # 0x1
    IgnoreAction             : DropAction = ... # 0x0
    ActionMask               : DropAction = ... # 0xff

    class DropActions(object): ...

    class Edge(object): ...
    BottomEdge               : Edge = ... # 0x8
    TopEdge                  : Edge = ... # 0x1
    RightEdge                : Edge = ... # 0x4
    LeftEdge                 : Edge = ... # 0x2

    class Edges(object): ...

    class EnterKeyType(object): ...
    EnterKeyReturn           : EnterKeyType = ... # 0x1
    EnterKeyDone             : EnterKeyType = ... # 0x2
    EnterKeyGo               : EnterKeyType = ... # 0x3
    EnterKeyPrevious         : EnterKeyType = ... # 0x7
    EnterKeySearch           : EnterKeyType = ... # 0x5
    EnterKeyNext             : EnterKeyType = ... # 0x6
    EnterKeyDefault          : EnterKeyType = ... # 0x0
    EnterKeySend             : EnterKeyType = ... # 0x4

    class EventPriority(object): ...
    LowEventPriority         : EventPriority = ... # -0x1
    HighEventPriority        : EventPriority = ... # 0x1
    NormalEventPriority      : EventPriority = ... # 0x0

    class FillRule(object): ...
    OddEvenFill              : FillRule = ... # 0x0
    WindingFill              : FillRule = ... # 0x1

    class FindChildOption(object): ...
    FindDirectChildrenOnly   : FindChildOption = ... # 0x0
    FindChildrenRecursively  : FindChildOption = ... # 0x1

    class FindChildOptions(object): ...

    class FocusPolicy(object): ...
    WheelFocus               : FocusPolicy = ... # 0xf
    NoFocus                  : FocusPolicy = ... # 0x0
    ClickFocus               : FocusPolicy = ... # 0x2
    StrongFocus              : FocusPolicy = ... # 0xb
    TabFocus                 : FocusPolicy = ... # 0x1

    class FocusReason(object): ...
    MenuBarFocusReason       : FocusReason = ... # 0x6
    TabFocusReason           : FocusReason = ... # 0x1
    ActiveWindowFocusReason  : FocusReason = ... # 0x3
    OtherFocusReason         : FocusReason = ... # 0x7
    PopupFocusReason         : FocusReason = ... # 0x4
    MouseFocusReason         : FocusReason = ... # 0x0
    BacktabFocusReason       : FocusReason = ... # 0x2
    ShortcutFocusReason      : FocusReason = ... # 0x5
    NoFocusReason            : FocusReason = ... # 0x8

    class GestureFlag(object): ...
    IgnoredGesturesPropagateToParent: GestureFlag = ... # 0x4
    DontStartGestureOnChildren: GestureFlag = ... # 0x1
    ReceivePartialGestures   : GestureFlag = ... # 0x2

    class GestureFlags(object): ...

    class GestureState(object): ...
    GestureStarted           : GestureState = ... # 0x1
    GestureUpdated           : GestureState = ... # 0x2
    NoGesture                : GestureState = ... # 0x0
    GestureCanceled          : GestureState = ... # 0x4
    GestureFinished          : GestureState = ... # 0x3

    class GestureType(object): ...
    CustomGesture            : GestureType = ... # 0x100
    TapAndHoldGesture        : GestureType = ... # 0x2
    PinchGesture             : GestureType = ... # 0x4
    TapGesture               : GestureType = ... # 0x1
    LastGestureType          : GestureType = ... # 0xffffffff
    SwipeGesture             : GestureType = ... # 0x5
    PanGesture               : GestureType = ... # 0x3

    class GlobalColor(object): ...
    darkGreen                : GlobalColor = ... # 0xe
    darkGray                 : GlobalColor = ... # 0x4
    yellow                   : GlobalColor = ... # 0xc
    magenta                  : GlobalColor = ... # 0xb
    blue                     : GlobalColor = ... # 0x9
    darkYellow               : GlobalColor = ... # 0x12
    black                    : GlobalColor = ... # 0x2
    green                    : GlobalColor = ... # 0x8
    white                    : GlobalColor = ... # 0x3
    red                      : GlobalColor = ... # 0x7
    lightGray                : GlobalColor = ... # 0x6
    darkMagenta              : GlobalColor = ... # 0x11
    darkCyan                 : GlobalColor = ... # 0x10
    darkBlue                 : GlobalColor = ... # 0xf
    color1                   : GlobalColor = ... # 0x1
    color0                   : GlobalColor = ... # 0x0
    cyan                     : GlobalColor = ... # 0xa
    gray                     : GlobalColor = ... # 0x5
    transparent              : GlobalColor = ... # 0x13
    darkRed                  : GlobalColor = ... # 0xd

    class HitTestAccuracy(object): ...
    ExactHit                 : HitTestAccuracy = ... # 0x0
    FuzzyHit                 : HitTestAccuracy = ... # 0x1

    class ImageConversionFlag(object): ...
    NoOpaqueDetection        : ImageConversionFlag = ... # 0x100
    DiffuseDither            : ImageConversionFlag = ... # 0x0
    AutoDither               : ImageConversionFlag = ... # 0x0
    AutoColor                : ImageConversionFlag = ... # 0x0
    ColorOnly                : ImageConversionFlag = ... # 0x3
    AlphaDither_Mask         : ImageConversionFlag = ... # 0xc
    OrderedDither            : ImageConversionFlag = ... # 0x10
    PreferDither             : ImageConversionFlag = ... # 0x40
    ThresholdAlphaDither     : ImageConversionFlag = ... # 0x0
    AvoidDither              : ImageConversionFlag = ... # 0x80
    MonoOnly                 : ImageConversionFlag = ... # 0x2
    OrderedAlphaDither       : ImageConversionFlag = ... # 0x4
    NoAlpha                  : ImageConversionFlag = ... # 0xc
    NoFormatConversion       : ImageConversionFlag = ... # 0x200
    DiffuseAlphaDither       : ImageConversionFlag = ... # 0x8
    ThresholdDither          : ImageConversionFlag = ... # 0x20
    ColorMode_Mask           : ImageConversionFlag = ... # 0x3
    Dither_Mask              : ImageConversionFlag = ... # 0x30
    DitherMode_Mask          : ImageConversionFlag = ... # 0xc0

    class ImageConversionFlags(object): ...

    class InputMethodHint(object): ...
    ImhDigitsOnly            : InputMethodHint = ... # 0x10000
    ImhPreferLatin           : InputMethodHint = ... # 0x200
    ImhMultiLine             : InputMethodHint = ... # 0x400
    ImhTime                  : InputMethodHint = ... # 0x100
    ImhLatinOnly             : InputMethodHint = ... # 0x800000
    ImhNoPredictiveText      : InputMethodHint = ... # 0x40
    ImhNoTextHandles         : InputMethodHint = ... # 0x1000
    ImhFormattedNumbersOnly  : InputMethodHint = ... # 0x20000
    ImhPreferLowercase       : InputMethodHint = ... # 0x20
    ImhPreferNumbers         : InputMethodHint = ... # 0x8
    ImhDate                  : InputMethodHint = ... # 0x80
    ImhNoEditMenu            : InputMethodHint = ... # 0x800
    ImhLowercaseOnly         : InputMethodHint = ... # 0x80000
    ImhPreferUppercase       : InputMethodHint = ... # 0x10
    ImhSensitiveData         : InputMethodHint = ... # 0x2
    ImhHiddenText            : InputMethodHint = ... # 0x1
    ImhExclusiveInputMask    : InputMethodHint = ... # -0x10000
    ImhNoAutoUppercase       : InputMethodHint = ... # 0x4
    ImhDialableCharactersOnly: InputMethodHint = ... # 0x100000
    ImhEmailCharactersOnly   : InputMethodHint = ... # 0x200000
    ImhUrlCharactersOnly     : InputMethodHint = ... # 0x400000
    ImhUppercaseOnly         : InputMethodHint = ... # 0x40000
    ImhNone                  : InputMethodHint = ... # 0x0

    class InputMethodHints(object): ...

    class InputMethodQueries(object): ...

    class InputMethodQuery(object): ...
    ImCursorPosition         : InputMethodQuery = ... # 0x8
    ImPreferredLanguage      : InputMethodQuery = ... # 0x200
    ImMaximumTextLength      : InputMethodQuery = ... # 0x40
    ImQueryInput             : InputMethodQuery = ... # 0x40ba
    ImSurroundingText        : InputMethodQuery = ... # 0x10
    ImEnterKeyType           : InputMethodQuery = ... # 0x2000
    ImPlatformData           : InputMethodQuery = ... # -0x80000000
    ImTextAfterCursor        : InputMethodQuery = ... # 0x1000
    ImQueryAll               : InputMethodQuery = ... # -0x1
    ImInputItemClipRectangle : InputMethodQuery = ... # 0x8000
    ImAnchorRectangle        : InputMethodQuery = ... # 0x4000
    ImFont                   : InputMethodQuery = ... # 0x4
    ImEnabled                : InputMethodQuery = ... # 0x1
    ImAnchorPosition         : InputMethodQuery = ... # 0x80
    ImMicroFocus             : InputMethodQuery = ... # 0x2
    ImAbsolutePosition       : InputMethodQuery = ... # 0x400
    ImCurrentSelection       : InputMethodQuery = ... # 0x20
    ImCursorRectangle        : InputMethodQuery = ... # 0x2
    ImHints                  : InputMethodQuery = ... # 0x100
    ImTextBeforeCursor       : InputMethodQuery = ... # 0x800

    class ItemDataRole(object): ...
    AccessibleTextRole       : ItemDataRole = ... # 0xb
    SizeHintRole             : ItemDataRole = ... # 0xd
    AccessibleDescriptionRole: ItemDataRole = ... # 0xc
    CheckStateRole           : ItemDataRole = ... # 0xa
    DecorationRole           : ItemDataRole = ... # 0x1
    BackgroundRole           : ItemDataRole = ... # 0x8
    WhatsThisRole            : ItemDataRole = ... # 0x5
    UserRole                 : ItemDataRole = ... # 0x100
    BackgroundColorRole      : ItemDataRole = ... # 0x8
    DisplayRole              : ItemDataRole = ... # 0x0
    WhatsThisPropertyRole    : ItemDataRole = ... # 0x1f
    DisplayPropertyRole      : ItemDataRole = ... # 0x1b
    TextColorRole            : ItemDataRole = ... # 0x9
    EditRole                 : ItemDataRole = ... # 0x2
    TextAlignmentRole        : ItemDataRole = ... # 0x7
    DecorationPropertyRole   : ItemDataRole = ... # 0x1c
    ToolTipRole              : ItemDataRole = ... # 0x3
    StatusTipRole            : ItemDataRole = ... # 0x4
    ForegroundRole           : ItemDataRole = ... # 0x9
    StatusTipPropertyRole    : ItemDataRole = ... # 0x1e
    InitialSortOrderRole     : ItemDataRole = ... # 0xe
    FontRole                 : ItemDataRole = ... # 0x6
    ToolTipPropertyRole      : ItemDataRole = ... # 0x1d

    class ItemFlag(object): ...
    ItemIsAutoTristate       : ItemFlag = ... # 0x40
    ItemIsEnabled            : ItemFlag = ... # 0x20
    ItemNeverHasChildren     : ItemFlag = ... # 0x80
    ItemIsEditable           : ItemFlag = ... # 0x2
    ItemIsUserTristate       : ItemFlag = ... # 0x100
    ItemIsUserCheckable      : ItemFlag = ... # 0x10
    ItemIsDropEnabled        : ItemFlag = ... # 0x8
    ItemIsSelectable         : ItemFlag = ... # 0x1
    NoItemFlags              : ItemFlag = ... # 0x0
    ItemIsDragEnabled        : ItemFlag = ... # 0x4
    ItemIsTristate           : ItemFlag = ... # 0x40

    class ItemFlags(object): ...

    class ItemSelectionMode(object): ...
    ContainsItemShape        : ItemSelectionMode = ... # 0x0
    IntersectsItemShape      : ItemSelectionMode = ... # 0x1
    IntersectsItemBoundingRect: ItemSelectionMode = ... # 0x3
    ContainsItemBoundingRect : ItemSelectionMode = ... # 0x2

    class ItemSelectionOperation(object): ...
    AddToSelection           : ItemSelectionOperation = ... # 0x1
    ReplaceSelection         : ItemSelectionOperation = ... # 0x0

    class Key(object): ...
    Key_Excel                : Key = ... # 0x10000d4
    Key_hyphen               : Key = ... # 0xad
    Key_Space                : Key = ... # 0x20
    Key_Blue                 : Key = ... # 0x1000117
    Key_Pause                : Key = ... # 0x1000008
    Key_F27                  : Key = ... # 0x100004a
    Key_F26                  : Key = ... # 0x1000049
    Key_F25                  : Key = ... # 0x1000048
    Key_F24                  : Key = ... # 0x1000047
    Key_F23                  : Key = ... # 0x1000046
    Key_F22                  : Key = ... # 0x1000045
    Key_F21                  : Key = ... # 0x1000044
    Key_F20                  : Key = ... # 0x1000043
    Key_DOS                  : Key = ... # 0x10000d2
    Key_F29                  : Key = ... # 0x100004c
    Key_F28                  : Key = ... # 0x100004b
    Key_OpenUrl              : Key = ... # 0x1000094
    Key_Launch8              : Key = ... # 0x10000aa
    Key_Launch9              : Key = ... # 0x10000ab
    Key_Dead_Belowdot        : Key = ... # 0x1001260
    Key_onequarter           : Key = ... # 0xbc
    Key_HomePage             : Key = ... # 0x1000090
    Key_Launch1              : Key = ... # 0x10000a3
    Key_Launch2              : Key = ... # 0x10000a4
    Key_Launch3              : Key = ... # 0x10000a5
    Key_Launch4              : Key = ... # 0x10000a6
    Key_Launch5              : Key = ... # 0x10000a7
    Key_Launch6              : Key = ... # 0x10000a8
    Key_Launch7              : Key = ... # 0x10000a9
    Key_LaunchH              : Key = ... # 0x100010f
    Key_Ediaeresis           : Key = ... # 0xcb
    Key_Dead_Belowdiaeresis  : Key = ... # 0x100126c
    Key_Shift                : Key = ... # 0x1000020
    Key_LaunchA              : Key = ... # 0x10000ac
    Key_LaunchB              : Key = ... # 0x10000ad
    Key_LaunchC              : Key = ... # 0x10000ae
    Key_LaunchD              : Key = ... # 0x10000af
    Key_LaunchE              : Key = ... # 0x10000b0
    Key_LaunchF              : Key = ... # 0x10000b1
    Key_LaunchG              : Key = ... # 0x100010e
    Key_Left                 : Key = ... # 0x1000012
    Key_Dead_Caron           : Key = ... # 0x100125a
    Key_Hangul_Special       : Key = ... # 0x100113f
    Key_Hangul_Jamo          : Key = ... # 0x1001135
    Key_Period               : Key = ... # 0x2e
    Key_Dead_Voiced_Sound    : Key = ... # 0x100125e
    Key_Ooblique             : Key = ... # 0xd8
    Key_OfficeHome           : Key = ... # 0x10000e0
    Key_Colon                : Key = ... # 0x3a
    Key_Forward              : Key = ... # 0x1000062
    Key_UWB                  : Key = ... # 0x1000101
    Key_Katakana             : Key = ... # 0x1001126
    Key_Eisu_toggle          : Key = ... # 0x1001130
    Key_Zoom                 : Key = ... # 0x1020006
    Key_Zenkaku              : Key = ... # 0x1001128
    Key_Save                 : Key = ... # 0x10000ea
    Key_BassUp               : Key = ... # 0x1000074
    Key_Dead_Belowcircumflex : Key = ... # 0x1001269
    Key_Undo                 : Key = ... # 0x1000123
    Key_Greater              : Key = ... # 0x3e
    Key_WebCam               : Key = ... # 0x10000fa
    Key_VolumeMute           : Key = ... # 0x1000071
    Key_ParenRight           : Key = ... # 0x29
    Key_MenuKB               : Key = ... # 0x10000dc
    Key_Oacute               : Key = ... # 0xd3
    Key_NumLock              : Key = ... # 0x1000025
    Key_Multi_key            : Key = ... # 0x1001120
    Key_Yellow               : Key = ... # 0x1000116
    Key_Dead_Lowline         : Key = ... # 0x1001290
    Key_Dead_Belowcomma      : Key = ... # 0x100126e
    Key_ydiaeresis           : Key = ... # 0xff
    Key_Ccedilla             : Key = ... # 0xc7
    Key_Dead_Horn            : Key = ... # 0x1001262
    Key_Hangul_Hanja         : Key = ... # 0x1001134
    Key_Call                 : Key = ... # 0x1100004
    Key_AudioForward         : Key = ... # 0x1000102
    Key_macron               : Key = ... # 0xaf
    Key_Away                 : Key = ... # 0x10000f8
    Key_MenuPB               : Key = ... # 0x10000dd
    Key_Hangul_Jeonja        : Key = ... # 0x1001138
    Key_Equal                : Key = ... # 0x3d
    Key_Standby              : Key = ... # 0x1000093
    Key_TrebleDown           : Key = ... # 0x1000077
    Key_Launch0              : Key = ... # 0x10000a2
    Key_Hankaku              : Key = ... # 0x1001129
    Key_Enter                : Key = ... # 0x1000005
    Key_Dead_Semivoiced_Sound: Key = ... # 0x100125f
    Key_Dead_Tilde           : Key = ... # 0x1001253
    Key_ChannelUp            : Key = ... # 0x1000118
    Key_ScreenSaver          : Key = ... # 0x10000ba
    Key_Less                 : Key = ... # 0x3c
    Key_Redo                 : Key = ... # 0x1000124
    Key_Game                 : Key = ... # 0x10000d6
    Key_Alt                  : Key = ... # 0x1000023
    Key_yen                  : Key = ... # 0xa5
    Key_NumberSign           : Key = ... # 0x23
    Key_AudioRewind          : Key = ... # 0x10000c5
    Key_Hangul_Banja         : Key = ... # 0x1001139
    Key_Printer              : Key = ... # 0x1020002
    Key_twosuperior          : Key = ... # 0xb2
    Key_masculine            : Key = ... # 0xba
    Key_Exclam               : Key = ... # 0x21
    Key_Xfer                 : Key = ... # 0x10000f5
    Key_AltGr                : Key = ... # 0x1001103
    Key_Kana_Lock            : Key = ... # 0x100112d
    Key_Insert               : Key = ... # 0x1000006
    Key_Guide                : Key = ... # 0x100011a
    Key_guillemotright       : Key = ... # 0xbb
    Key_Subtitle             : Key = ... # 0x1000105
    Key_acute                : Key = ... # 0xb4
    Key_Market               : Key = ... # 0x10000da
    Key_MediaPause           : Key = ... # 0x1000085
    Key_Suspend              : Key = ... # 0x100010c
    Key_VolumeDown           : Key = ... # 0x1000070
    Key_Send                 : Key = ... # 0x10000eb
    Key_ScrollLock           : Key = ... # 0x1000026
    Key_Travel               : Key = ... # 0x10000f2
    Key_BassDown             : Key = ... # 0x1000075
    Key_ApplicationLeft      : Key = ... # 0x10000c7
    Key_Dead_Invertedbreve   : Key = ... # 0x100126d
    Key_BassBoost            : Key = ... # 0x1000073
    Key_Hiragana             : Key = ... # 0x1001125
    Key_TaskPane             : Key = ... # 0x10000ef
    Key_MediaTogglePlayPause : Key = ... # 0x1000086
    Key_LastNumberRedial     : Key = ... # 0x1100009
    Key_Muhenkan             : Key = ... # 0x1001122
    Key_Option               : Key = ... # 0x10000e1
    Key_Favorites            : Key = ... # 0x1000091
    Key_Question             : Key = ... # 0x3f
    Key_Phone                : Key = ... # 0x10000e3
    Key_AE                   : Key = ... # 0xc6
    Key_Refresh              : Key = ... # 0x1000064
    Key_MailForward          : Key = ... # 0x10000fb
    Key_Super_R              : Key = ... # 0x1000054
    Key_Context3             : Key = ... # 0x1100002
    Key_Context2             : Key = ... # 0x1100001
    Key_F34                  : Key = ... # 0x1000051
    Key_F35                  : Key = ... # 0x1000052
    Key_F30                  : Key = ... # 0x100004d
    Key_F31                  : Key = ... # 0x100004e
    Key_F32                  : Key = ... # 0x100004f
    Key_F33                  : Key = ... # 0x1000050
    Key_Super_L              : Key = ... # 0x1000053
    Key_Dollar               : Key = ... # 0x24
    Key_ApplicationRight     : Key = ... # 0x10000c8
    Key_Backslash            : Key = ... # 0x5c
    Key_Community            : Key = ... # 0x10000c4
    Key_At                   : Key = ... # 0x40
    Key_MicVolumeDown        : Key = ... # 0x100011e
    Key_Comma                : Key = ... # 0x2c
    Key_RotateWindows        : Key = ... # 0x10000e7
    Key_notsign              : Key = ... # 0xac
    Key_LightBulb            : Key = ... # 0x10000bd
    Key_questiondown         : Key = ... # 0xbf
    Key_QuoteLeft            : Key = ... # 0x60
    Key_Hangul_PreHanja      : Key = ... # 0x100113a
    Key_Hangul_Romaja        : Key = ... # 0x1001136
    Key_Calculator           : Key = ... # 0x10000cb
    Key_Red                  : Key = ... # 0x1000114
    Key_MicMute              : Key = ... # 0x1000113
    Key_ClearGrab            : Key = ... # 0x10000cd
    Key_Eisu_Shift           : Key = ... # 0x100112f
    Key_cent                 : Key = ... # 0xa2
    Key_Messenger            : Key = ... # 0x10000f9
    Key_BrightnessAdjust     : Key = ... # 0x10000c2
    Key_Paste                : Key = ... # 0x10000e2
    Key_BraceRight           : Key = ... # 0x7d
    Key_Dead_I               : Key = ... # 0x1001285
    Key_Open                 : Key = ... # 0x1000121
    Key_Sleep                : Key = ... # 0x1020004
    Key_KeyboardLightOnOff   : Key = ... # 0x10000b4
    Key_VolumeUp             : Key = ... # 0x1000072
    Key_AddFavorite          : Key = ... # 0x10000c0
    Key_Ograve               : Key = ... # 0xd2
    Key_Hangul_Start         : Key = ... # 0x1001132
    Key_Codeinput            : Key = ... # 0x1001137
    Key_Yes                  : Key = ... # 0x1010001
    Key_LaunchMedia          : Key = ... # 0x10000a1
    Key_exclamdown           : Key = ... # 0xa1
    Key_Dead_i               : Key = ... # 0x1001284
    Key_plusminus            : Key = ... # 0xb1
    Key_Dead_o               : Key = ... # 0x1001286
    Key_Dead_a               : Key = ... # 0x1001280
    Key_Context4             : Key = ... # 0x1100003
    Key_Dead_e               : Key = ... # 0x1001282
    Key_Dead_Small_Schwa     : Key = ... # 0x100128a
    Key_Context1             : Key = ... # 0x1100000
    Key_AsciiTilde           : Key = ... # 0x7e
    Key_Dead_u               : Key = ... # 0x1001288
    Key_SingleCandidate      : Key = ... # 0x100113c
    Key_Dead_Abovering       : Key = ... # 0x1001258
    Key_Dead_O               : Key = ... # 0x1001287
    Key_Dead_A               : Key = ... # 0x1001281
    Key_Finance              : Key = ... # 0x10000c3
    Key_Dead_E               : Key = ... # 0x1001283
    Key_Underscore           : Key = ... # 0x5f
    Key_KeyboardBrightnessDown: Key = ... # 0x10000b6
    Key_Ugrave               : Key = ... # 0xd9
    Key_Dead_Breve           : Key = ... # 0x1001255
    Key_Dead_U               : Key = ... # 0x1001289
    Key_Kanji                : Key = ... # 0x1001121
    Key_sterling             : Key = ... # 0xa3
    Key_Eject                : Key = ... # 0x10000b9
    Key_Copy                 : Key = ... # 0x10000cf
    Key_PageUp               : Key = ... # 0x1000016
    Key_Display              : Key = ... # 0x10000d1
    Key_Green                : Key = ... # 0x1000115
    Key_WWW                  : Key = ... # 0x10000bb
    Key_HotLinks             : Key = ... # 0x10000c1
    Key_Dead_Belowmacron     : Key = ... # 0x1001268
    Key_Agrave               : Key = ... # 0xc0
    Key_Cut                  : Key = ... # 0x10000d0
    Key_Idiaeresis           : Key = ... # 0xcf
    Key_CameraFocus          : Key = ... # 0x1100021
    Key_Dead_Macron          : Key = ... # 0x1001254
    Key_RotationPB           : Key = ... # 0x10000e8
    Key_Hibernate            : Key = ... # 0x1000108
    Key_Return               : Key = ... # 0x1000004
    Key_Select               : Key = ... # 0x1010000
    Key_Dead_Stroke          : Key = ... # 0x1001263
    Key_Dead_Diaeresis       : Key = ... # 0x1001257
    Key_PowerDown            : Key = ... # 0x100010b
    Key_BracketLeft          : Key = ... # 0x5b
    Key_Minus                : Key = ... # 0x2d
    Key_Apostrophe           : Key = ... # 0x27
    Key_TouchpadToggle       : Key = ... # 0x1000110
    Key_Adiaeresis           : Key = ... # 0xc4
    Key_Shop                 : Key = ... # 0x10000be
    Key_Home                 : Key = ... # 0x1000010
    Key_LaunchMail           : Key = ... # 0x10000a0
    Key_End                  : Key = ... # 0x1000011
    Key_Otilde               : Key = ... # 0xd5
    Key_BackForward          : Key = ... # 0x10000c6
    Key_TrebleUp             : Key = ... # 0x1000076
    Key_Pictures             : Key = ... # 0x10000fc
    Key_Ntilde               : Key = ... # 0xd1
    Key_Menu                 : Key = ... # 0x1000055
    Key_Uacute               : Key = ... # 0xda
    Key_Zenkaku_Hankaku      : Key = ... # 0x100112a
    Key_Play                 : Key = ... # 0x1020005
    Key_MySites              : Key = ... # 0x10000de
    Key_Icircumflex          : Key = ... # 0xce
    Key_VoiceDial            : Key = ... # 0x1100008
    Key_Acircumflex          : Key = ... # 0xc2
    Key_Dead_Grave           : Key = ... # 0x1001250
    Key_Bar                  : Key = ... # 0x7c
    Key_Backtab              : Key = ... # 0x1000002
    Key_History              : Key = ... # 0x10000bf
    Key_multiply             : Key = ... # 0xd7
    Key_Dead_Acute           : Key = ... # 0x1001251
    Key_AudioRepeat          : Key = ... # 0x1000103
    Key_Aring                : Key = ... # 0xc5
    Key_PageDown             : Key = ... # 0x1000017
    Key_Calendar             : Key = ... # 0x10000e4
    Key_ContrastAdjust       : Key = ... # 0x100010d
    Key_AudioCycleTrack      : Key = ... # 0x1000106
    Key_Meeting              : Key = ... # 0x10000db
    Key_Terminal             : Key = ... # 0x10000f0
    Key_Slash                : Key = ... # 0x2f
    Key_threequarters        : Key = ... # 0xbe
    Key_copyright            : Key = ... # 0xa9
    Key_unknown              : Key = ... # 0x1ffffff
    Key_Asterisk             : Key = ... # 0x2a
    Key_iTouch               : Key = ... # 0x10000d8
    Key_ChannelDown          : Key = ... # 0x1000119
    Key_Eacute               : Key = ... # 0xc9
    Key_periodcentered       : Key = ... # 0xb7
    Key_Camera               : Key = ... # 0x1100020
    Key_Flip                 : Key = ... # 0x1100006
    Key_MediaNext            : Key = ... # 0x1000083
    Key_Search               : Key = ... # 0x1000092
    Key_Kana_Shift           : Key = ... # 0x100112e
    Key_Igrave               : Key = ... # 0xcc
    Key_Battery              : Key = ... # 0x10000fe
    Key_Henkan               : Key = ... # 0x1001123
    Key_Tools                : Key = ... # 0x10000f1
    Key_Dead_Belowring       : Key = ... # 0x1001267
    Key_Hangul_PostHanja     : Key = ... # 0x100113b
    Key_Any                  : Key = ... # 0x20
    Key_Hangul               : Key = ... # 0x1001131
    Key_Ucircumflex          : Key = ... # 0xdb
    Key_Hangup               : Key = ... # 0x1100005
    Key_Stop                 : Key = ... # 0x1000063
    Key_Dead_Currency        : Key = ... # 0x100126f
    Key_ZoomOut              : Key = ... # 0x10000f7
    Key_section              : Key = ... # 0xa7
    Key_5                    : Key = ... # 0x35
    Key_4                    : Key = ... # 0x34
    Key_7                    : Key = ... # 0x37
    Key_6                    : Key = ... # 0x36
    Key_1                    : Key = ... # 0x31
    Key_0                    : Key = ... # 0x30
    Key_3                    : Key = ... # 0x33
    Key_2                    : Key = ... # 0x32
    Key_Dead_Iota            : Key = ... # 0x100125d
    Key_9                    : Key = ... # 0x39
    Key_E                    : Key = ... # 0x45
    Key_D                    : Key = ... # 0x44
    Key_G                    : Key = ... # 0x47
    Key_F                    : Key = ... # 0x46
    Key_A                    : Key = ... # 0x41
    Key_division             : Key = ... # 0xf7
    Key_C                    : Key = ... # 0x43
    Key_B                    : Key = ... # 0x42
    Key_M                    : Key = ... # 0x4d
    Key_L                    : Key = ... # 0x4c
    Key_O                    : Key = ... # 0x4f
    Key_N                    : Key = ... # 0x4e
    Key_I                    : Key = ... # 0x49
    Key_Semicolon            : Key = ... # 0x3b
    Key_registered           : Key = ... # 0xae
    Key_J                    : Key = ... # 0x4a
    Key_U                    : Key = ... # 0x55
    Key_T                    : Key = ... # 0x54
    Key_W                    : Key = ... # 0x57
    Key_V                    : Key = ... # 0x56
    Key_MediaRecord          : Key = ... # 0x1000084
    Key_P                    : Key = ... # 0x50
    Key_S                    : Key = ... # 0x53
    Key_R                    : Key = ... # 0x52
    Key_Y                    : Key = ... # 0x59
    Key_X                    : Key = ... # 0x58
    Key_Z                    : Key = ... # 0x5a
    Key_F4                   : Key = ... # 0x1000033
    Key_F5                   : Key = ... # 0x1000034
    Key_F6                   : Key = ... # 0x1000035
    Key_F7                   : Key = ... # 0x1000036
    Key_F1                   : Key = ... # 0x1000030
    Key_F2                   : Key = ... # 0x1000031
    Key_F3                   : Key = ... # 0x1000032
    Key_F8                   : Key = ... # 0x1000037
    Key_F9                   : Key = ... # 0x1000038
    Key_Odiaeresis           : Key = ... # 0xd6
    Key_Escape               : Key = ... # 0x1000000
    Key_Dead_Belowverticalline: Key = ... # 0x1001292
    Key_Meta                 : Key = ... # 0x1000022
    Key_Support              : Key = ... # 0x10000ee
    Key_Documents            : Key = ... # 0x10000d3
    Key_Egrave               : Key = ... # 0xc8
    Key_Settings             : Key = ... # 0x100011c
    Key_nobreakspace         : Key = ... # 0xa0
    Key_PowerOff             : Key = ... # 0x10000b7
    Key_Direction_L          : Key = ... # 0x1000059
    Key_Exit                 : Key = ... # 0x102000a
    Key_MicVolumeUp          : Key = ... # 0x100011d
    Key_Explorer             : Key = ... # 0x10000d5
    Key_Dead_Greek           : Key = ... # 0x100128c
    Key_Cancel               : Key = ... # 0x1020001
    Key_MonBrightnessDown    : Key = ... # 0x10000b3
    Key_degree               : Key = ... # 0xb0
    Key_View                 : Key = ... # 0x1000109
    Key_BraceLeft            : Key = ... # 0x7b
    Key_Reload               : Key = ... # 0x10000e6
    Key_threesuperior        : Key = ... # 0xb3
    Key_Dead_Abovereversedcomma: Key = ... # 0x1001265
    Key_mu                   : Key = ... # 0xb5
    Key_SysReq               : Key = ... # 0x100000a
    Key_CapsLock             : Key = ... # 0x1000024
    Key_WLAN                 : Key = ... # 0x1000100
    Key_Dead_Hook            : Key = ... # 0x1001261
    Key_TouchpadOff          : Key = ... # 0x1000112
    Key_ParenLeft            : Key = ... # 0x28
    Key_Time                 : Key = ... # 0x1000107
    Key_Iacute               : Key = ... # 0xcd
    Key_News                 : Key = ... # 0x10000df
    Key_LogOff               : Key = ... # 0x10000d9
    Key_onehalf              : Key = ... # 0xbd
    Key_Clear                : Key = ... # 0x100000b
    Key_Word                 : Key = ... # 0x10000f4
    Key_Udiaeresis           : Key = ... # 0xdc
    Key_Romaji               : Key = ... # 0x1001124
    Key_KeyboardBrightnessUp : Key = ... # 0x10000b5
    Key_onesuperior          : Key = ... # 0xb9
    Key_Dead_Longsolidusoverlay: Key = ... # 0x1001293
    Key_MediaStop            : Key = ... # 0x1000081
    Key_Bluetooth            : Key = ... # 0x10000ff
    Key_Ocircumflex          : Key = ... # 0xd4
    Key_Right                : Key = ... # 0x1000014
    Key_paragraph            : Key = ... # 0xb6
    Key_Down                 : Key = ... # 0x1000015
    Key_Dead_Cedilla         : Key = ... # 0x100125b
    Key_QuoteDbl             : Key = ... # 0x22
    Key_Backspace            : Key = ... # 0x1000003
    Key_ZoomIn               : Key = ... # 0x10000f6
    Key_Reply                : Key = ... # 0x10000e5
    Key_Dead_Ogonek          : Key = ... # 0x100125c
    Key_Music                : Key = ... # 0x10000fd
    Key_Yacute               : Key = ... # 0xdd
    Key_Dead_Abovecomma      : Key = ... # 0x1001264
    Key_Atilde               : Key = ... # 0xc3
    Key_New                  : Key = ... # 0x1000120
    Key_ETH                  : Key = ... # 0xd0
    Key_Ecircumflex          : Key = ... # 0xca
    Key_Find                 : Key = ... # 0x1000122
    Key_Hiragana_Katakana    : Key = ... # 0x1001127
    Key_CD                   : Key = ... # 0x10000ca
    Key_cedilla              : Key = ... # 0xb8
    Key_Execute              : Key = ... # 0x1020003
    Key_F18                  : Key = ... # 0x1000041
    Key_F19                  : Key = ... # 0x1000042
    Key_F16                  : Key = ... # 0x100003f
    Key_F17                  : Key = ... # 0x1000040
    Key_F14                  : Key = ... # 0x100003d
    Key_F15                  : Key = ... # 0x100003e
    Key_F12                  : Key = ... # 0x100003b
    Key_F13                  : Key = ... # 0x100003c
    Key_F10                  : Key = ... # 0x1000039
    Key_F11                  : Key = ... # 0x100003a
    Key_Back                 : Key = ... # 0x1000061
    Key_Memo                 : Key = ... # 0x10000bc
    Key_Control              : Key = ... # 0x1000021
    Key_Dead_Doublegrave     : Key = ... # 0x1001266
    Key_No                   : Key = ... # 0x1010002
    Key_ordfeminine          : Key = ... # 0xaa
    Key_Ampersand            : Key = ... # 0x26
    Key_currency             : Key = ... # 0xa4
    Key_Dead_Belowtilde      : Key = ... # 0x100126a
    Key_Book                 : Key = ... # 0x10000c9
    Key_BracketRight         : Key = ... # 0x5d
    Key_MonBrightnessUp      : Key = ... # 0x10000b2
    Key_Dead_Doubleacute     : Key = ... # 0x1001259
    Key_MultipleCandidate    : Key = ... # 0x100113d
    Key_TopMenu              : Key = ... # 0x100010a
    Key_Touroku              : Key = ... # 0x100112b
    Key_Massyo               : Key = ... # 0x100112c
    Key_Up                   : Key = ... # 0x1000013
    Key_MediaLast            : Key = ... # 0x100ffff
    Key_Info                 : Key = ... # 0x100011b
    Key_Hangul_End           : Key = ... # 0x1001133
    Key_Plus                 : Key = ... # 0x2b
    Key_Video                : Key = ... # 0x10000f3
    Key_AsciiCircum          : Key = ... # 0x5e
    Key_MediaPlay            : Key = ... # 0x1000080
    Key_Help                 : Key = ... # 0x1000058
    Key_8                    : Key = ... # 0x38
    Key_Tab                  : Key = ... # 0x1000001
    Key_TouchpadOn           : Key = ... # 0x1000111
    Key_Percent              : Key = ... # 0x25
    Key_brokenbar            : Key = ... # 0xa6
    Key_Direction_R          : Key = ... # 0x1000060
    Key_Print                : Key = ... # 0x1000009
    Key_Dead_Belowbreve      : Key = ... # 0x100126b
    Key_RotationKB           : Key = ... # 0x10000e9
    Key_Dead_Aboveverticalline: Key = ... # 0x1001291
    Key_Aacute               : Key = ... # 0xc1
    Key_Spell                : Key = ... # 0x10000ec
    Key_ToDoList             : Key = ... # 0x10000cc
    Key_Dead_Capital_Schwa   : Key = ... # 0x100128b
    Key_SplitScreen          : Key = ... # 0x10000ed
    Key_diaeresis            : Key = ... # 0xa8
    Key_PreviousCandidate    : Key = ... # 0x100113e
    Key_WakeUp               : Key = ... # 0x10000b8
    Key_Hyper_L              : Key = ... # 0x1000056
    Key_Dead_Abovedot        : Key = ... # 0x1001256
    Key_THORN                : Key = ... # 0xde
    Key_H                    : Key = ... # 0x48
    Key_Delete               : Key = ... # 0x1000007
    Key_K                    : Key = ... # 0x4b
    Key_Hyper_R              : Key = ... # 0x1000057
    Key_Dead_Circumflex      : Key = ... # 0x1001252
    Key_MediaPrevious        : Key = ... # 0x1000082
    Key_ToggleCallHangup     : Key = ... # 0x1100007
    Key_ssharp               : Key = ... # 0xdf
    Key_AudioRandomPlay      : Key = ... # 0x1000104
    Key_Mode_switch          : Key = ... # 0x100117e
    Key_Close                : Key = ... # 0x10000ce
    Key_guillemotleft        : Key = ... # 0xab
    Key_Q                    : Key = ... # 0x51
    Key_Go                   : Key = ... # 0x10000d7

    class KeyboardModifier(object): ...
    GroupSwitchModifier      : KeyboardModifier = ... # 0x40000000
    ControlModifier          : KeyboardModifier = ... # 0x4000000
    KeyboardModifierMask     : KeyboardModifier = ... # -0x2000000
    NoModifier               : KeyboardModifier = ... # 0x0
    ShiftModifier            : KeyboardModifier = ... # 0x2000000
    AltModifier              : KeyboardModifier = ... # 0x8000000
    MetaModifier             : KeyboardModifier = ... # 0x10000000
    KeypadModifier           : KeyboardModifier = ... # 0x20000000

    class KeyboardModifiers(object): ...

    class LayoutDirection(object): ...
    LayoutDirectionAuto      : LayoutDirection = ... # 0x2
    LeftToRight              : LayoutDirection = ... # 0x0
    RightToLeft              : LayoutDirection = ... # 0x1

    class MaskMode(object): ...
    MaskInColor              : MaskMode = ... # 0x0
    MaskOutColor             : MaskMode = ... # 0x1

    class MatchFlag(object): ...
    MatchStartsWith          : MatchFlag = ... # 0x2
    MatchEndsWith            : MatchFlag = ... # 0x3
    MatchContains            : MatchFlag = ... # 0x1
    MatchCaseSensitive       : MatchFlag = ... # 0x10
    MatchWildcard            : MatchFlag = ... # 0x5
    MatchWrap                : MatchFlag = ... # 0x20
    MatchRecursive           : MatchFlag = ... # 0x40
    MatchRegExp              : MatchFlag = ... # 0x4
    MatchFixedString         : MatchFlag = ... # 0x8
    MatchExactly             : MatchFlag = ... # 0x0

    class MatchFlags(object): ...

    class Modifier(object): ...
    CTRL                     : Modifier = ... # 0x4000000
    SHIFT                    : Modifier = ... # 0x2000000
    META                     : Modifier = ... # 0x10000000
    ALT                      : Modifier = ... # 0x8000000
    MODIFIER_MASK            : Modifier = ... # 0xfe000000
    UNICODE_ACCEL            : Modifier = ... # 0x0

    class MouseButton(object): ...
    ExtraButton19            : MouseButton = ... # 0x200000
    ExtraButton21            : MouseButton = ... # 0x800000
    TaskButton               : MouseButton = ... # 0x20
    ExtraButton23            : MouseButton = ... # 0x2000000
    ExtraButton22            : MouseButton = ... # 0x1000000
    XButton1                 : MouseButton = ... # 0x8
    XButton2                 : MouseButton = ... # 0x10
    BackButton               : MouseButton = ... # 0x8
    ForwardButton            : MouseButton = ... # 0x10
    ExtraButton20            : MouseButton = ... # 0x400000
    MidButton                : MouseButton = ... # 0x4
    ExtraButton18            : MouseButton = ... # 0x100000
    AllButtons               : MouseButton = ... # 0x7ffffff
    ExtraButton10            : MouseButton = ... # 0x1000
    ExtraButton11            : MouseButton = ... # 0x2000
    ExtraButton12            : MouseButton = ... # 0x4000
    ExtraButton13            : MouseButton = ... # 0x8000
    ExtraButton14            : MouseButton = ... # 0x10000
    NoButton                 : MouseButton = ... # 0x0
    ExtraButton16            : MouseButton = ... # 0x40000
    LeftButton               : MouseButton = ... # 0x1
    MouseButtonMask          : MouseButton = ... # -0x1
    ExtraButton17            : MouseButton = ... # 0x80000
    RightButton              : MouseButton = ... # 0x2
    ExtraButton8             : MouseButton = ... # 0x400
    ExtraButton9             : MouseButton = ... # 0x800
    MiddleButton             : MouseButton = ... # 0x4
    ExtraButton2             : MouseButton = ... # 0x10
    ExtraButton3             : MouseButton = ... # 0x20
    ExtraButton1             : MouseButton = ... # 0x8
    ExtraButton6             : MouseButton = ... # 0x100
    ExtraButton7             : MouseButton = ... # 0x200
    ExtraButton4             : MouseButton = ... # 0x40
    ExtraButton5             : MouseButton = ... # 0x80
    MaxMouseButton           : MouseButton = ... # 0x4000000
    ExtraButton15            : MouseButton = ... # 0x20000
    ExtraButton24            : MouseButton = ... # 0x4000000

    class MouseButtons(object): ...

    class MouseEventFlag(object): ...
    MouseEventFlagMask       : MouseEventFlag = ... # 0xff
    MouseEventCreatedDoubleClick: MouseEventFlag = ... # 0x1

    class MouseEventFlags(object): ...

    class MouseEventSource(object): ...
    MouseEventNotSynthesized : MouseEventSource = ... # 0x0
    MouseEventSynthesizedByApplication: MouseEventSource = ... # 0x3
    MouseEventSynthesizedBySystem: MouseEventSource = ... # 0x1
    MouseEventSynthesizedByQt: MouseEventSource = ... # 0x2

    class NativeGestureType(object): ...
    PanNativeGesture         : NativeGestureType = ... # 0x2
    ZoomNativeGesture        : NativeGestureType = ... # 0x3
    SmartZoomNativeGesture   : NativeGestureType = ... # 0x4
    SwipeNativeGesture       : NativeGestureType = ... # 0x6
    RotateNativeGesture      : NativeGestureType = ... # 0x5
    EndNativeGesture         : NativeGestureType = ... # 0x1
    BeginNativeGesture       : NativeGestureType = ... # 0x0

    class NavigationMode(object): ...
    NavigationModeKeypadTabOrder: NavigationMode = ... # 0x1
    NavigationModeKeypadDirectional: NavigationMode = ... # 0x2
    NavigationModeCursorAuto : NavigationMode = ... # 0x3
    NavigationModeNone       : NavigationMode = ... # 0x0
    NavigationModeCursorForceVisible: NavigationMode = ... # 0x4

    class Orientation(object): ...
    Vertical                 : Orientation = ... # 0x2
    Horizontal               : Orientation = ... # 0x1

    class Orientations(object): ...

    class PenCapStyle(object): ...
    SquareCap                : PenCapStyle = ... # 0x10
    RoundCap                 : PenCapStyle = ... # 0x20
    MPenCapStyle             : PenCapStyle = ... # 0x30
    FlatCap                  : PenCapStyle = ... # 0x0

    class PenJoinStyle(object): ...
    MiterJoin                : PenJoinStyle = ... # 0x0
    MPenJoinStyle            : PenJoinStyle = ... # 0x1c0
    RoundJoin                : PenJoinStyle = ... # 0x80
    BevelJoin                : PenJoinStyle = ... # 0x40
    SvgMiterJoin             : PenJoinStyle = ... # 0x100

    class PenStyle(object): ...
    NoPen                    : PenStyle = ... # 0x0
    DashDotLine              : PenStyle = ... # 0x4
    DotLine                  : PenStyle = ... # 0x3
    CustomDashLine           : PenStyle = ... # 0x6
    DashDotDotLine           : PenStyle = ... # 0x5
    DashLine                 : PenStyle = ... # 0x2
    MPenStyle                : PenStyle = ... # 0xf
    SolidLine                : PenStyle = ... # 0x1

    class ScreenOrientation(object): ...
    PortraitOrientation      : ScreenOrientation = ... # 0x1
    InvertedPortraitOrientation: ScreenOrientation = ... # 0x4
    InvertedLandscapeOrientation: ScreenOrientation = ... # 0x8
    LandscapeOrientation     : ScreenOrientation = ... # 0x2
    PrimaryOrientation       : ScreenOrientation = ... # 0x0

    class ScreenOrientations(object): ...

    class ScrollBarPolicy(object): ...
    ScrollBarAlwaysOff       : ScrollBarPolicy = ... # 0x1
    ScrollBarAlwaysOn        : ScrollBarPolicy = ... # 0x2
    ScrollBarAsNeeded        : ScrollBarPolicy = ... # 0x0

    class ScrollPhase(object): ...
    ScrollMomentum           : ScrollPhase = ... # 0x4
    ScrollEnd                : ScrollPhase = ... # 0x3
    ScrollBegin              : ScrollPhase = ... # 0x1
    NoScrollPhase            : ScrollPhase = ... # 0x0
    ScrollUpdate             : ScrollPhase = ... # 0x2

    class ShortcutContext(object): ...
    WidgetShortcut           : ShortcutContext = ... # 0x0
    WindowShortcut           : ShortcutContext = ... # 0x1
    ApplicationShortcut      : ShortcutContext = ... # 0x2
    WidgetWithChildrenShortcut: ShortcutContext = ... # 0x3

    class SizeHint(object): ...
    MinimumSize              : SizeHint = ... # 0x0
    MaximumSize              : SizeHint = ... # 0x2
    PreferredSize            : SizeHint = ... # 0x1
    MinimumDescent           : SizeHint = ... # 0x3
    NSizeHints               : SizeHint = ... # 0x4

    class SizeMode(object): ...
    AbsoluteSize             : SizeMode = ... # 0x0
    RelativeSize             : SizeMode = ... # 0x1

    class SortOrder(object): ...
    AscendingOrder           : SortOrder = ... # 0x0
    DescendingOrder          : SortOrder = ... # 0x1

    class TabFocusBehavior(object): ...
    TabFocusTextControls     : TabFocusBehavior = ... # 0x1
    NoTabFocus               : TabFocusBehavior = ... # 0x0
    TabFocusAllControls      : TabFocusBehavior = ... # 0xff
    TabFocusListControls     : TabFocusBehavior = ... # 0x2

    class TextElideMode(object): ...
    ElideMiddle              : TextElideMode = ... # 0x2
    ElideNone                : TextElideMode = ... # 0x3
    ElideRight               : TextElideMode = ... # 0x1
    ElideLeft                : TextElideMode = ... # 0x0

    class TextFlag(object): ...
    TextDontClip             : TextFlag = ... # 0x200
    TextHideMnemonic         : TextFlag = ... # 0x8000
    TextForceLeftToRight     : TextFlag = ... # 0x20000
    TextDontPrint            : TextFlag = ... # 0x4000
    TextWordWrap             : TextFlag = ... # 0x1000
    TextShowMnemonic         : TextFlag = ... # 0x800
    TextExpandTabs           : TextFlag = ... # 0x400
    TextLongestVariant       : TextFlag = ... # 0x80000
    TextWrapAnywhere         : TextFlag = ... # 0x2000
    TextForceRightToLeft     : TextFlag = ... # 0x40000
    TextBypassShaping        : TextFlag = ... # 0x100000
    TextIncludeTrailingSpaces: TextFlag = ... # 0x8000000
    TextSingleLine           : TextFlag = ... # 0x100
    TextJustificationForced  : TextFlag = ... # 0x10000

    class TextFormat(object): ...
    PlainText                : TextFormat = ... # 0x0
    AutoText                 : TextFormat = ... # 0x2
    RichText                 : TextFormat = ... # 0x1

    class TextInteractionFlag(object): ...
    TextEditable             : TextInteractionFlag = ... # 0x10
    TextSelectableByKeyboard : TextInteractionFlag = ... # 0x2
    TextBrowserInteraction   : TextInteractionFlag = ... # 0xd
    NoTextInteraction        : TextInteractionFlag = ... # 0x0
    LinksAccessibleByMouse   : TextInteractionFlag = ... # 0x4
    TextEditorInteraction    : TextInteractionFlag = ... # 0x13
    LinksAccessibleByKeyboard: TextInteractionFlag = ... # 0x8
    TextSelectableByMouse    : TextInteractionFlag = ... # 0x1

    class TextInteractionFlags(object): ...

    class TileRule(object): ...
    RepeatTile               : TileRule = ... # 0x1
    StretchTile              : TileRule = ... # 0x0
    RoundTile                : TileRule = ... # 0x2

    class TimeSpec(object): ...
    UTC                      : TimeSpec = ... # 0x1
    TimeZone                 : TimeSpec = ... # 0x3
    OffsetFromUTC            : TimeSpec = ... # 0x2
    LocalTime                : TimeSpec = ... # 0x0

    class TimerType(object): ...
    VeryCoarseTimer          : TimerType = ... # 0x2
    CoarseTimer              : TimerType = ... # 0x1
    PreciseTimer             : TimerType = ... # 0x0

    class ToolBarArea(object): ...
    NoToolBarArea            : ToolBarArea = ... # 0x0
    RightToolBarArea         : ToolBarArea = ... # 0x2
    BottomToolBarArea        : ToolBarArea = ... # 0x8
    ToolBarArea_Mask         : ToolBarArea = ... # 0xf
    LeftToolBarArea          : ToolBarArea = ... # 0x1
    AllToolBarAreas          : ToolBarArea = ... # 0xf
    TopToolBarArea           : ToolBarArea = ... # 0x4

    class ToolBarAreaSizes(object): ...
    NToolBarAreas            : ToolBarAreaSizes = ... # 0x4

    class ToolBarAreas(object): ...

    class ToolButtonStyle(object): ...
    ToolButtonIconOnly       : ToolButtonStyle = ... # 0x0
    ToolButtonTextBesideIcon : ToolButtonStyle = ... # 0x2
    ToolButtonTextOnly       : ToolButtonStyle = ... # 0x1
    ToolButtonFollowStyle    : ToolButtonStyle = ... # 0x4
    ToolButtonTextUnderIcon  : ToolButtonStyle = ... # 0x3

    class TouchPointState(object): ...
    TouchPointStationary     : TouchPointState = ... # 0x4
    TouchPointReleased       : TouchPointState = ... # 0x8
    TouchPointMoved          : TouchPointState = ... # 0x2
    TouchPointPressed        : TouchPointState = ... # 0x1

    class TouchPointStates(object): ...

    class TransformationMode(object): ...
    SmoothTransformation     : TransformationMode = ... # 0x1
    FastTransformation       : TransformationMode = ... # 0x0

    class UIEffect(object): ...
    UI_AnimateCombo          : UIEffect = ... # 0x3
    UI_AnimateMenu           : UIEffect = ... # 0x1
    UI_AnimateTooltip        : UIEffect = ... # 0x4
    UI_FadeMenu              : UIEffect = ... # 0x2
    UI_FadeTooltip           : UIEffect = ... # 0x5
    UI_AnimateToolBox        : UIEffect = ... # 0x6
    UI_General               : UIEffect = ... # 0x0

    class WhiteSpaceMode(object): ...
    WhiteSpaceNormal         : WhiteSpaceMode = ... # 0x0
    WhiteSpaceNoWrap         : WhiteSpaceMode = ... # 0x2
    WhiteSpacePre            : WhiteSpaceMode = ... # 0x1
    WhiteSpaceModeUndefined  : WhiteSpaceMode = ... # -0x1

    class WidgetAttribute(object): ...
    WA_CustomWhatsThis       : WidgetAttribute = ... # 0x2f
    WA_SetFont               : WidgetAttribute = ... # 0x25
    WA_NoChildEventsForParent: WidgetAttribute = ... # 0x3a
    WA_NoBackground          : WidgetAttribute = ... # 0x4
    WA_MacBrushedMetal       : WidgetAttribute = ... # 0x2e
    WA_AcceptTouchEvents     : WidgetAttribute = ... # 0x79
    WA_X11NetWmWindowTypeUtility: WidgetAttribute = ... # 0x6c
    WA_Hover                 : WidgetAttribute = ... # 0x4a
    WA_TransparentForMouseEvents: WidgetAttribute = ... # 0x33
    WA_PendingUpdate         : WidgetAttribute = ... # 0x2c
    WA_PaintUnclipped        : WidgetAttribute = ... # 0x34
    WA_MacMiniSize           : WidgetAttribute = ... # 0x5b
    WA_MacOpaqueSizeGrip     : WidgetAttribute = ... # 0x55
    WA_X11NetWmWindowTypeDropDownMenu: WidgetAttribute = ... # 0x6f
    WA_SetLayoutDirection    : WidgetAttribute = ... # 0x39
    WA_AlwaysShowToolTips    : WidgetAttribute = ... # 0x54
    WA_NoMousePropagation    : WidgetAttribute = ... # 0x49
    WA_ContentsMarginsRespectsSafeArea: WidgetAttribute = ... # 0x82
    WA_SetLocale             : WidgetAttribute = ... # 0x57
    WA_QuitOnClose           : WidgetAttribute = ... # 0x4c
    WA_TouchPadAcceptSingleTouchEvents: WidgetAttribute = ... # 0x7b
    WA_MSWindowsUseDirect3D  : WidgetAttribute = ... # 0x5e
    WA_WState_Reparented     : WidgetAttribute = ... # 0x3f
    WA_ForceUpdatesDisabled  : WidgetAttribute = ... # 0x3b
    WA_X11NetWmWindowTypeDND : WidgetAttribute = ... # 0x74
    WA_MacVariableSize       : WidgetAttribute = ... # 0x66
    WA_LayoutUsesWidgetRect  : WidgetAttribute = ... # 0x5c
    WA_WState_DND            : WidgetAttribute = ... # 0x43
    WA_WState_ConfigPending  : WidgetAttribute = ... # 0x40
    WA_ForceAcceptDrops      : WidgetAttribute = ... # 0x4f
    WA_WState_WindowOpacitySet: WidgetAttribute = ... # 0x77
    WA_X11NetWmWindowTypeDesktop: WidgetAttribute = ... # 0x68
    WA_X11NetWmWindowTypeMenu: WidgetAttribute = ... # 0x6b
    WA_StyledBackground      : WidgetAttribute = ... # 0x5d
    WA_InputMethodEnabled    : WidgetAttribute = ... # 0xe
    WA_NoMouseReplay         : WidgetAttribute = ... # 0x36
    WA_X11NetWmWindowTypeDock: WidgetAttribute = ... # 0x69
    WA_SetPalette            : WidgetAttribute = ... # 0x24
    WA_OpaquePaintEvent      : WidgetAttribute = ... # 0x4
    WA_UpdatesDisabled       : WidgetAttribute = ... # 0xa
    WA_MouseTracking         : WidgetAttribute = ... # 0x2
    WA_GroupLeader           : WidgetAttribute = ... # 0x48
    WA_MacSmallSize          : WidgetAttribute = ... # 0x5a
    WA_NoSystemBackground    : WidgetAttribute = ... # 0x9
    WA_Disabled              : WidgetAttribute = ... # 0x0
    WA_InvalidSize           : WidgetAttribute = ... # 0x2d
    WA_WState_InPaintEvent   : WidgetAttribute = ... # 0x3e
    WA_X11BypassTransientForHint: WidgetAttribute = ... # 0x63
    WA_MacMetalStyle         : WidgetAttribute = ... # 0x2e
    WA_X11NetWmWindowTypePopupMenu: WidgetAttribute = ... # 0x70
    WA_NativeWindow          : WidgetAttribute = ... # 0x64
    WA_WState_ExplicitShowHide: WidgetAttribute = ... # 0x45
    WA_OutsideWSRange        : WidgetAttribute = ... # 0x31
    WA_DropSiteRegistered    : WidgetAttribute = ... # 0x4f
    WA_SetCursor             : WidgetAttribute = ... # 0x26
    WA_SetWindowIcon         : WidgetAttribute = ... # 0x35
    WA_X11DoNotAcceptFocus   : WidgetAttribute = ... # 0x7e
    WA_UnderMouse            : WidgetAttribute = ... # 0x1
    WA_ShowModal             : WidgetAttribute = ... # 0x46
    WA_X11NetWmWindowTypeToolBar: WidgetAttribute = ... # 0x6a
    WA_DontShowOnScreen      : WidgetAttribute = ... # 0x67
    WA_InputMethodTransparent: WidgetAttribute = ... # 0x4b
    WA_WState_AcceptedTouchBeginEvent: WidgetAttribute = ... # 0x7a
    WA_X11NetWmWindowTypeToolTip: WidgetAttribute = ... # 0x71
    WA_X11NetWmWindowTypeSplash: WidgetAttribute = ... # 0x6d
    WA_MacShowFocusRect      : WidgetAttribute = ... # 0x58
    WA_StaticContents        : WidgetAttribute = ... # 0x5
    WA_TabletTracking        : WidgetAttribute = ... # 0x81
    WA_NoX11EventCompression : WidgetAttribute = ... # 0x51
    WA_AcceptDrops           : WidgetAttribute = ... # 0x4e
    WA_StyleSheetTarget      : WidgetAttribute = ... # 0x83
    WA_TintedBackground      : WidgetAttribute = ... # 0x52
    WA_Mapped                : WidgetAttribute = ... # 0xb
    WA_MouseNoMask           : WidgetAttribute = ... # 0x47
    WA_TranslucentBackground : WidgetAttribute = ... # 0x78
    WA_KeyboardFocusChange   : WidgetAttribute = ... # 0x4d
    WA_X11NetWmWindowTypeNotification: WidgetAttribute = ... # 0x72
    WA_LaidOut               : WidgetAttribute = ... # 0x7
    WA_WState_OwnSizePolicy  : WidgetAttribute = ... # 0x44
    WA_MacFrameworkScaled    : WidgetAttribute = ... # 0x75
    WA_MacNoClickThrough     : WidgetAttribute = ... # 0xc
    WA_X11OpenGLOverlay      : WidgetAttribute = ... # 0x53
    WA_AttributeCount        : WidgetAttribute = ... # 0x84
    WA_DeleteOnClose         : WidgetAttribute = ... # 0x37
    WA_PaintOnScreen         : WidgetAttribute = ... # 0x8
    WA_X11NetWmWindowTypeCombo: WidgetAttribute = ... # 0x73
    WA_PendingResizeEvent    : WidgetAttribute = ... # 0x23
    WA_MacAlwaysShowToolWindow: WidgetAttribute = ... # 0x60
    WA_ShowWithoutActivating : WidgetAttribute = ... # 0x62
    WA_AlwaysStackOnTop      : WidgetAttribute = ... # 0x80
    WA_WState_CompressKeys   : WidgetAttribute = ... # 0x3d
    WA_WState_Visible        : WidgetAttribute = ... # 0xf
    WA_KeyCompression        : WidgetAttribute = ... # 0x21
    WA_MacNormalSize         : WidgetAttribute = ... # 0x59
    WA_RightToLeft           : WidgetAttribute = ... # 0x38
    WA_ContentsPropagated    : WidgetAttribute = ... # 0x3
    WA_SetWindowModality     : WidgetAttribute = ... # 0x76
    WA_LayoutOnEntireRect    : WidgetAttribute = ... # 0x30
    WA_WindowPropagation     : WidgetAttribute = ... # 0x50
    WA_Moved                 : WidgetAttribute = ... # 0x2b
    WA_MacNoShadow           : WidgetAttribute = ... # 0x7f
    WA_DontCreateNativeAncestors: WidgetAttribute = ... # 0x65
    WA_Resized               : WidgetAttribute = ... # 0x2a
    WA_PendingMoveEvent      : WidgetAttribute = ... # 0x22
    WA_StyleSheet            : WidgetAttribute = ... # 0x61
    WA_WState_Hidden         : WidgetAttribute = ... # 0x10
    WA_GrabbedShortcut       : WidgetAttribute = ... # 0x32
    WA_SetStyle              : WidgetAttribute = ... # 0x56
    WA_WState_Created        : WidgetAttribute = ... # 0x3c
    WA_X11NetWmWindowTypeDialog: WidgetAttribute = ... # 0x6e
    WA_ForceDisabled         : WidgetAttribute = ... # 0x20
    WA_CanHostQMdiSubWindowTitleBar: WidgetAttribute = ... # 0x5f
    WA_NoChildEventsFromChildren: WidgetAttribute = ... # 0x27
    WA_WState_Polished       : WidgetAttribute = ... # 0x42
    WA_WindowModified        : WidgetAttribute = ... # 0x29

    class WindowFlags(object): ...

    class WindowFrameSection(object): ...
    TopRightSection          : WindowFrameSection = ... # 0x4
    BottomRightSection       : WindowFrameSection = ... # 0x6
    TopSection               : WindowFrameSection = ... # 0x3
    RightSection             : WindowFrameSection = ... # 0x5
    LeftSection              : WindowFrameSection = ... # 0x1
    BottomLeftSection        : WindowFrameSection = ... # 0x8
    NoSection                : WindowFrameSection = ... # 0x0
    TopLeftSection           : WindowFrameSection = ... # 0x2
    TitleBarArea             : WindowFrameSection = ... # 0x9
    BottomSection            : WindowFrameSection = ... # 0x7

    class WindowModality(object): ...
    NonModal                 : WindowModality = ... # 0x0
    WindowModal              : WindowModality = ... # 0x1
    ApplicationModal         : WindowModality = ... # 0x2

    class WindowState(object): ...
    WindowActive             : WindowState = ... # 0x8
    WindowMinimized          : WindowState = ... # 0x1
    WindowFullScreen         : WindowState = ... # 0x4
    WindowMaximized          : WindowState = ... # 0x2
    WindowNoState            : WindowState = ... # 0x0

    class WindowStates(object): ...

    class WindowType(object): ...
    SubWindow                : WindowType = ... # 0x12
    Sheet                    : WindowType = ... # 0x5
    WindowContextHelpButtonHint: WindowType = ... # 0x10000
    ForeignWindow            : WindowType = ... # 0x21
    WindowDoesNotAcceptFocus : WindowType = ... # 0x200000
    Desktop                  : WindowType = ... # 0x11
    WindowType_Mask          : WindowType = ... # 0xff
    WindowShadeButtonHint    : WindowType = ... # 0x20000
    Window                   : WindowType = ... # 0x1
    WindowMinimizeButtonHint : WindowType = ... # 0x4000
    CustomizeWindowHint      : WindowType = ... # 0x2000000
    Widget                   : WindowType = ... # 0x0
    Popup                    : WindowType = ... # 0x9
    WindowFullscreenButtonHint: WindowType = ... # -0x80000000
    WindowStaysOnTopHint     : WindowType = ... # 0x40000
    BypassGraphicsProxyWidget: WindowType = ... # 0x20000000
    Tool                     : WindowType = ... # 0xb
    WindowTitleHint          : WindowType = ... # 0x1000
    MaximizeUsingFullscreenGeometryHint: WindowType = ... # 0x400000
    WindowTransparentForInput: WindowType = ... # 0x80000
    X11BypassWindowManagerHint: WindowType = ... # 0x400
    MSWindowsFixedSizeDialogHint: WindowType = ... # 0x100
    WindowMinMaxButtonsHint  : WindowType = ... # 0xc000
    WindowOverridesSystemGestures: WindowType = ... # 0x100000
    MacWindowToolBarButtonHint: WindowType = ... # 0x10000000
    FramelessWindowHint      : WindowType = ... # 0x800
    WindowMaximizeButtonHint : WindowType = ... # 0x8000
    MSWindowsOwnDC           : WindowType = ... # 0x200
    CoverWindow              : WindowType = ... # 0x41
    BypassWindowManagerHint  : WindowType = ... # 0x400
    WindowCloseButtonHint    : WindowType = ... # 0x8000000
    Dialog                   : WindowType = ... # 0x3
    WindowSystemMenuHint     : WindowType = ... # 0x2000
    ToolTip                  : WindowType = ... # 0xd
    Drawer                   : WindowType = ... # 0x7
    WindowStaysOnBottomHint  : WindowType = ... # 0x4000000
    NoDropShadowWindowHint   : WindowType = ... # 0x40000000
    SplashScreen             : WindowType = ... # 0xf


class QtMsgType(object): ...


class Signal(object):

    def __init__(self, *types: type, name: Optional[str]=..., arguments: Optional[str]=...): ...


class SignalInstance(object):
    def connect(self, slot: object, type: Optional[type]=...): ...
    def disconnect(self, slot: object=...): ...
    def emit(self, *args: Any): ...


class Slot(object):

    def __init__(self, *types: type, name: Optional[str]=..., result: Optional[str]=...) -> Callable[..., Optional[str]]: ...

def QT_TRANSLATE_NOOP(arg__1: object, arg__2: object) -> object: ...
def QT_TRANSLATE_NOOP3(arg__1: object, arg__2: object, arg__3: object) -> object: ...
def QT_TRANSLATE_NOOP_UTF8(arg__1: object) -> object: ...
def QT_TR_NOOP(arg__1: object) -> object: ...
def QT_TR_NOOP_UTF8(arg__1: object) -> object: ...
def SIGNAL(arg__1: str) -> str: ...
def SLOT(arg__1: str) -> str: ...
def __moduleShutdown(): ...
def qAbs(arg__1: float) -> float: ...
def qAcos(v: float) -> float: ...
def qAddPostRoutine(arg__1: object): ...
def qAsin(v: float) -> float: ...
def qAtan(v: float) -> float: ...
def qAtan2(y: float, x: float) -> float: ...
def qChecksum(s: str, len: int) -> int: ...
@typing.overload
def qCompress(data: PySide2.QtCore.QByteArray, compressionLevel: int=...) -> PySide2.QtCore.QByteArray: ...
@typing.overload
def qCompress(data: Char, nbytes: int, compressionLevel: int=...) -> PySide2.QtCore.QByteArray: ...
def qCritical(arg__1: str): ...
def qDebug(arg__1: str): ...
def qExp(v: float) -> float: ...
def qFabs(v: float) -> float: ...
def qFastCos(x: float) -> float: ...
def qFastSin(x: float) -> float: ...
def qFatal(arg__1: str): ...
def qFuzzyCompare(p1: float, p2: float) -> bool: ...
def qFuzzyIsNull(d: float) -> bool: ...
def qInstallMessageHandler(arg__1: object) -> object: ...
def qIsFinite(d: float) -> bool: ...
def qIsInf(d: float) -> bool: ...
def qIsNaN(d: float) -> bool: ...
def qIsNull(d: float) -> bool: ...
def qRegisterResourceData(arg__1: int, arg__2: str, arg__3: str, arg__4: str) -> bool: ...
def qTan(v: float) -> float: ...
@typing.overload
def qUncompress(data: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
@typing.overload
def qUncompress(data: Char, nbytes: int) -> PySide2.QtCore.QByteArray: ...
def qUnregisterResourceData(arg__1: int, arg__2: str, arg__3: str, arg__4: str) -> bool: ...
def qVersion() -> str: ...
def qWarning(arg__1: str): ...
def qrand() -> int: ...
def qsrand(seed: int): ...
def qtTrId(id: str, n: int=...) -> str: ...

# eof
