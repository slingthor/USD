# This Python file uses the following encoding: utf-8
#############################################################################
##
## Copyright (C) 2019 The Qt Company Ltd.
## Contact: https://www.qt.io/licensing/
##
## This file is part of Qt for Python.
##
## $QT_BEGIN_LICENSE:LGPL$
## Commercial License Usage
## Licensees holding valid commercial Qt licenses may use this file in
## accordance with the commercial license agreement provided with the
## Software or, alternatively, in accordance with the terms contained in
## a written agreement between you and The Qt Company. For licensing terms
## and conditions see https://www.qt.io/terms-conditions. For further
## information use the contact form at https://www.qt.io/contact-us.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 3 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL3 included in the
## packaging of this file. Please review the following information to
## ensure the GNU Lesser General Public License version 3 requirements
## will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU
## General Public License version 2.0 or (at your option) the GNU General
## Public license version 3 or any later version approved by the KDE Free
## Qt Foundation. The licenses are as published by the Free Software
## Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
## included in the packaging of this file. Please review the following
## information to ensure the GNU General Public License requirements will
## be met: https://www.gnu.org/licenses/gpl-2.0.html and
## https://www.gnu.org/licenses/gpl-3.0.html.
##
## $QT_END_LICENSE$
##
#############################################################################

"""
This file contains the exact signatures for all functions in module
PySide2.QtNetwork, except for defaults which are replaced by "...".
"""

# Module PySide2.QtNetwork
import PySide2
from PySide2.support.signature import typing
from PySide2.support.signature.mapping import (
    Virtual, Missing, Invalid, Default, Instance)

class Object(object): pass

import shiboken2 as Shiboken
Shiboken.Object = Object

import PySide2.QtCore
import PySide2.QtNetwork


class QAbstractNetworkCache(PySide2.QtCore.QObject):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def cacheSize(self) -> int: ...
    def clear(self): ...
    def data(self, url: PySide2.QtCore.QUrl) -> PySide2.QtCore.QIODevice: ...
    def insert(self, device: PySide2.QtCore.QIODevice): ...
    def metaData(self, url: PySide2.QtCore.QUrl) -> PySide2.QtNetwork.QNetworkCacheMetaData: ...
    def prepare(self, metaData: PySide2.QtNetwork.QNetworkCacheMetaData) -> PySide2.QtCore.QIODevice: ...
    def remove(self, url: PySide2.QtCore.QUrl) -> bool: ...
    def updateMetaData(self, metaData: PySide2.QtNetwork.QNetworkCacheMetaData): ...


class QAbstractSocket(PySide2.QtCore.QIODevice):

    class BindFlag(object): ...
    ReuseAddressHint         : BindFlag = ... # 0x4
    DefaultForPlatform       : BindFlag = ... # 0x0
    DontShareAddress         : BindFlag = ... # 0x2
    ShareAddress             : BindFlag = ... # 0x1

    class BindMode(object): ...

    class NetworkLayerProtocol(object): ...
    IPv4Protocol             : NetworkLayerProtocol = ... # 0x0
    IPv6Protocol             : NetworkLayerProtocol = ... # 0x1
    AnyIPProtocol            : NetworkLayerProtocol = ... # 0x2
    UnknownNetworkLayerProtocol: NetworkLayerProtocol = ... # -0x1

    class PauseMode(object): ...
    PauseOnSslErrors         : PauseMode = ... # 0x1
    PauseNever               : PauseMode = ... # 0x0

    class PauseModes(object): ...

    class SocketError(object): ...
    SocketAccessError        : SocketError = ... # 0x3
    ProxyConnectionClosedError: SocketError = ... # 0xf
    TemporaryError           : SocketError = ... # 0x16
    DatagramTooLargeError    : SocketError = ... # 0x6
    OperationError           : SocketError = ... # 0x13
    SslInvalidUserDataError  : SocketError = ... # 0x15
    ProxyNotFoundError       : SocketError = ... # 0x11
    HostNotFoundError        : SocketError = ... # 0x2
    ProxyProtocolError       : SocketError = ... # 0x12
    ProxyConnectionRefusedError: SocketError = ... # 0xe
    SocketAddressNotAvailableError: SocketError = ... # 0x9
    ConnectionRefusedError   : SocketError = ... # 0x0
    RemoteHostClosedError    : SocketError = ... # 0x1
    SocketTimeoutError       : SocketError = ... # 0x5
    UnknownSocketError       : SocketError = ... # -0x1
    AddressInUseError        : SocketError = ... # 0x8
    NetworkError             : SocketError = ... # 0x7
    UnsupportedSocketOperationError: SocketError = ... # 0xa
    UnfinishedSocketOperationError: SocketError = ... # 0xb
    SslHandshakeFailedError  : SocketError = ... # 0xd
    SslInternalError         : SocketError = ... # 0x14
    ProxyConnectionTimeoutError: SocketError = ... # 0x10
    ProxyAuthenticationRequiredError: SocketError = ... # 0xc
    SocketResourceError      : SocketError = ... # 0x4

    class SocketOption(object): ...
    SendBufferSizeSocketOption: SocketOption = ... # 0x5
    TypeOfServiceOption      : SocketOption = ... # 0x4
    MulticastTtlOption       : SocketOption = ... # 0x2
    LowDelayOption           : SocketOption = ... # 0x0
    KeepAliveOption          : SocketOption = ... # 0x1
    MulticastLoopbackOption  : SocketOption = ... # 0x3
    PathMtuSocketOption      : SocketOption = ... # 0x7
    ReceiveBufferSizeSocketOption: SocketOption = ... # 0x6

    class SocketState(object): ...
    ListeningState           : SocketState = ... # 0x5
    HostLookupState          : SocketState = ... # 0x1
    ClosingState             : SocketState = ... # 0x6
    UnconnectedState         : SocketState = ... # 0x0
    ConnectingState          : SocketState = ... # 0x2
    BoundState               : SocketState = ... # 0x4
    ConnectedState           : SocketState = ... # 0x3

    class SocketType(object): ...
    SctpSocket               : SocketType = ... # 0x2
    TcpSocket                : SocketType = ... # 0x0
    UdpSocket                : SocketType = ... # 0x1
    UnknownSocketType        : SocketType = ... # -0x1

    def __init__(self, socketType: PySide2.QtNetwork.QAbstractSocket.SocketType, parent: PySide2.QtCore.QObject): ...

    def abort(self): ...
    def atEnd(self) -> bool: ...
    @typing.overload
    def bind(self, address: PySide2.QtNetwork.QHostAddress, port: int=..., mode: PySide2.QtNetwork.QAbstractSocket.BindMode=...) -> bool: ...
    @typing.overload
    def bind(self, port: int=..., mode: PySide2.QtNetwork.QAbstractSocket.BindMode=...) -> bool: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def canReadLine(self) -> bool: ...
    def close(self): ...
    @typing.overload
    def connectToHost(self, address: PySide2.QtNetwork.QHostAddress, port: int, mode: PySide2.QtCore.QIODevice.OpenMode=...): ...
    @typing.overload
    def connectToHost(self, hostName: str, port: int, mode: PySide2.QtCore.QIODevice.OpenMode=..., protocol: PySide2.QtNetwork.QAbstractSocket.NetworkLayerProtocol=...): ...
    def disconnectFromHost(self): ...
    def error(self) -> PySide2.QtNetwork.QAbstractSocket.SocketError: ...
    def flush(self) -> bool: ...
    def isSequential(self) -> bool: ...
    def isValid(self) -> bool: ...
    def localAddress(self) -> PySide2.QtNetwork.QHostAddress: ...
    def localPort(self) -> int: ...
    def pauseMode(self) -> PySide2.QtNetwork.QAbstractSocket.PauseModes: ...
    def peerAddress(self) -> PySide2.QtNetwork.QHostAddress: ...
    def peerName(self) -> str: ...
    def peerPort(self) -> int: ...
    def protocolTag(self) -> str: ...
    def proxy(self) -> PySide2.QtNetwork.QNetworkProxy: ...
    def readBufferSize(self) -> int: ...
    def readData(self, data: str, maxlen: int) -> int: ...
    def readLineData(self, data: str, maxlen: int) -> int: ...
    def resume(self): ...
    def setLocalAddress(self, address: PySide2.QtNetwork.QHostAddress): ...
    def setLocalPort(self, port: int): ...
    def setPauseMode(self, pauseMode: PySide2.QtNetwork.QAbstractSocket.PauseModes): ...
    def setPeerAddress(self, address: PySide2.QtNetwork.QHostAddress): ...
    def setPeerName(self, name: str): ...
    def setPeerPort(self, port: int): ...
    def setProtocolTag(self, tag: str): ...
    def setProxy(self, networkProxy: PySide2.QtNetwork.QNetworkProxy): ...
    def setReadBufferSize(self, size: int): ...
    def setSocketDescriptor(self, socketDescriptor: int, state: PySide2.QtNetwork.QAbstractSocket.SocketState=..., openMode: PySide2.QtCore.QIODevice.OpenMode=...) -> bool: ...
    def setSocketError(self, socketError: PySide2.QtNetwork.QAbstractSocket.SocketError): ...
    def setSocketOption(self, option: PySide2.QtNetwork.QAbstractSocket.SocketOption, value: Any): ...
    def setSocketState(self, state: PySide2.QtNetwork.QAbstractSocket.SocketState): ...
    def socketDescriptor(self) -> int: ...
    def socketOption(self, option: PySide2.QtNetwork.QAbstractSocket.SocketOption) -> Any: ...
    def socketType(self) -> PySide2.QtNetwork.QAbstractSocket.SocketType: ...
    def state(self) -> PySide2.QtNetwork.QAbstractSocket.SocketState: ...
    def waitForBytesWritten(self, msecs: int=...) -> bool: ...
    def waitForConnected(self, msecs: int=...) -> bool: ...
    def waitForDisconnected(self, msecs: int=...) -> bool: ...
    def waitForReadyRead(self, msecs: int=...) -> bool: ...
    def writeData(self, data: str, len: int) -> int: ...


class QAuthenticator(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QAuthenticator): ...

    def __copy__(self): ...
    def isNull(self) -> bool: ...
    def option(self, opt: str) -> Any: ...
    def options(self) -> Dict: ...
    def password(self) -> str: ...
    def realm(self) -> str: ...
    def setOption(self, opt: str, value: Any): ...
    def setPassword(self, password: str): ...
    def setRealm(self, realm: str): ...
    def setUser(self, user: str): ...
    def user(self) -> str: ...


class QDnsDomainNameRecord(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QDnsDomainNameRecord): ...

    def __copy__(self): ...
    def name(self) -> str: ...
    def swap(self, other: PySide2.QtNetwork.QDnsDomainNameRecord): ...
    def timeToLive(self) -> int: ...
    def value(self) -> str: ...


class QDnsHostAddressRecord(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QDnsHostAddressRecord): ...

    def __copy__(self): ...
    def name(self) -> str: ...
    def swap(self, other: PySide2.QtNetwork.QDnsHostAddressRecord): ...
    def timeToLive(self) -> int: ...
    def value(self) -> PySide2.QtNetwork.QHostAddress: ...


class QDnsLookup(PySide2.QtCore.QObject):

    class Error(object): ...
    NotFoundError            : Error = ... # 0x7
    ServerFailureError       : Error = ... # 0x5
    ServerRefusedError       : Error = ... # 0x6
    InvalidReplyError        : Error = ... # 0x4
    NoError                  : Error = ... # 0x0
    ResolverError            : Error = ... # 0x1
    OperationCancelledError  : Error = ... # 0x2
    InvalidRequestError      : Error = ... # 0x3

    class Type(object): ...
    AAAA                     : Type = ... # 0x1c
    CNAME                    : Type = ... # 0x5
    NS                       : Type = ... # 0x2
    A                        : Type = ... # 0x1
    SRV                      : Type = ... # 0x21
    PTR                      : Type = ... # 0xc
    TXT                      : Type = ... # 0x10
    MX                       : Type = ... # 0xf
    ANY                      : Type = ... # 0xff

    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, type: PySide2.QtNetwork.QDnsLookup.Type, name: str, nameserver: PySide2.QtNetwork.QHostAddress, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, type: PySide2.QtNetwork.QDnsLookup.Type, name: str, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def abort(self): ...
    def canonicalNameRecords(self) -> List[PySide2.QtNetwork.QDnsDomainNameRecord]: ...
    def error(self) -> PySide2.QtNetwork.QDnsLookup.Error: ...
    def errorString(self) -> str: ...
    def hostAddressRecords(self) -> List[PySide2.QtNetwork.QDnsHostAddressRecord]: ...
    def isFinished(self) -> bool: ...
    def lookup(self): ...
    def mailExchangeRecords(self) -> List[PySide2.QtNetwork.QDnsMailExchangeRecord]: ...
    def name(self) -> str: ...
    def nameServerRecords(self) -> List[PySide2.QtNetwork.QDnsDomainNameRecord]: ...
    def nameserver(self) -> PySide2.QtNetwork.QHostAddress: ...
    def pointerRecords(self) -> List[PySide2.QtNetwork.QDnsDomainNameRecord]: ...
    def serviceRecords(self) -> List[PySide2.QtNetwork.QDnsServiceRecord]: ...
    def setName(self, name: str): ...
    def setNameserver(self, nameserver: PySide2.QtNetwork.QHostAddress): ...
    def setType(self, arg__1: PySide2.QtNetwork.QDnsLookup.Type): ...
    def textRecords(self) -> List[PySide2.QtNetwork.QDnsTextRecord]: ...
    def type(self) -> PySide2.QtNetwork.QDnsLookup.Type: ...


class QDnsMailExchangeRecord(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QDnsMailExchangeRecord): ...

    def __copy__(self): ...
    def exchange(self) -> str: ...
    def name(self) -> str: ...
    def preference(self) -> int: ...
    def swap(self, other: PySide2.QtNetwork.QDnsMailExchangeRecord): ...
    def timeToLive(self) -> int: ...


class QDnsServiceRecord(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QDnsServiceRecord): ...

    def __copy__(self): ...
    def name(self) -> str: ...
    def port(self) -> int: ...
    def priority(self) -> int: ...
    def swap(self, other: PySide2.QtNetwork.QDnsServiceRecord): ...
    def target(self) -> str: ...
    def timeToLive(self) -> int: ...
    def weight(self) -> int: ...


class QDnsTextRecord(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QDnsTextRecord): ...

    def __copy__(self): ...
    def name(self) -> str: ...
    def swap(self, other: PySide2.QtNetwork.QDnsTextRecord): ...
    def timeToLive(self) -> int: ...
    def values(self) -> List[PySide2.QtCore.QByteArray]: ...


class QHostAddress(Shiboken.Object):

    class ConversionMode(object): ...

    class ConversionModeFlag(object): ...
    StrictConversion         : ConversionModeFlag = ... # 0x0
    ConvertV4CompatToIPv4    : ConversionModeFlag = ... # 0x2
    ConvertLocalHost         : ConversionModeFlag = ... # 0x8
    ConvertUnspecifiedAddress: ConversionModeFlag = ... # 0x4
    TolerantConversion       : ConversionModeFlag = ... # 0xff
    ConvertV4MappedToIPv4    : ConversionModeFlag = ... # 0x1

    class SpecialAddress(object): ...
    LocalHost                : SpecialAddress = ... # 0x2
    Broadcast                : SpecialAddress = ... # 0x1
    AnyIPv4                  : SpecialAddress = ... # 0x6
    LocalHostIPv6            : SpecialAddress = ... # 0x3
    AnyIPv6                  : SpecialAddress = ... # 0x5
    Null                     : SpecialAddress = ... # 0x0
    Any                      : SpecialAddress = ... # 0x4

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, address: PySide2.QtNetwork.QHostAddress.SpecialAddress): ...
    @typing.overload
    def __init__(self, address: str): ...
    @typing.overload
    def __init__(self, copy: PySide2.QtNetwork.QHostAddress): ...
    @typing.overload
    def __init__(self, ip4Addr: int): ...
    @typing.overload
    def __init__(self, ip6Addr: PySide2.QtNetwork.QIPv6Address): ...

    def __copy__(self): ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def clear(self): ...
    def isBroadcast(self) -> bool: ...
    def isEqual(self, address: PySide2.QtNetwork.QHostAddress, mode: PySide2.QtNetwork.QHostAddress.ConversionMode=...) -> bool: ...
    def isGlobal(self) -> bool: ...
    @typing.overload
    def isInSubnet(self, subnet: PySide2.QtNetwork.QHostAddress, netmask: int) -> bool: ...
    @typing.overload
    def isInSubnet(self, subnet: Tuple) -> bool: ...
    def isLinkLocal(self) -> bool: ...
    def isLoopback(self) -> bool: ...
    def isMulticast(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isSiteLocal(self) -> bool: ...
    def isUniqueLocalUnicast(self) -> bool: ...
    @staticmethod
    def parseSubnet(subnet: str) -> Tuple: ...
    def protocol(self) -> PySide2.QtNetwork.QAbstractSocket.NetworkLayerProtocol: ...
    def scopeId(self) -> str: ...
    @typing.overload
    def setAddress(self, address: PySide2.QtNetwork.QHostAddress.SpecialAddress): ...
    @typing.overload
    def setAddress(self, address: str) -> bool: ...
    @typing.overload
    def setAddress(self, ip4Addr: int): ...
    @typing.overload
    def setAddress(self, ip6Addr: PySide2.QtNetwork.QIPv6Address): ...
    def setScopeId(self, id: str): ...
    def swap(self, other: PySide2.QtNetwork.QHostAddress): ...
    @typing.overload
    def toIPv4Address(self) -> int: ...
    @typing.overload
    def toIPv4Address(self, ok: bool) -> int: ...
    def toIPv6Address(self) -> PySide2.QtNetwork.QIPv6Address: ...
    def toString(self) -> str: ...


class QHostInfo(Shiboken.Object):

    class HostInfoError(object): ...
    UnknownError             : HostInfoError = ... # 0x2
    HostNotFound             : HostInfoError = ... # 0x1
    NoError                  : HostInfoError = ... # 0x0

    @typing.overload
    def __init__(self, d: PySide2.QtNetwork.QHostInfo): ...
    @typing.overload
    def __init__(self, lookupId: int=...): ...

    def __copy__(self): ...
    @staticmethod
    def abortHostLookup(lookupId: int): ...
    def addresses(self) -> List[PySide2.QtNetwork.QHostAddress]: ...
    def error(self) -> PySide2.QtNetwork.QHostInfo.HostInfoError: ...
    def errorString(self) -> str: ...
    @staticmethod
    def fromName(name: str) -> PySide2.QtNetwork.QHostInfo: ...
    def hostName(self) -> str: ...
    @staticmethod
    def localDomainName() -> str: ...
    @staticmethod
    def localHostName() -> str: ...
    def lookupId(self) -> int: ...
    def setAddresses(self, addresses: List[PySide2.QtNetwork.QHostAddress]): ...
    def setError(self, error: PySide2.QtNetwork.QHostInfo.HostInfoError): ...
    def setErrorString(self, errorString: str): ...
    def setHostName(self, name: str): ...
    def setLookupId(self, id: int): ...
    def swap(self, other: PySide2.QtNetwork.QHostInfo): ...


class QHstsPolicy(Shiboken.Object):

    class PolicyFlag(object): ...
    IncludeSubDomains        : PolicyFlag = ... # 0x1

    class PolicyFlags(object): ...

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, expiry: PySide2.QtCore.QDateTime, flags: PySide2.QtNetwork.QHstsPolicy.PolicyFlags, host: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    @typing.overload
    def __init__(self, rhs: PySide2.QtNetwork.QHstsPolicy): ...

    def __copy__(self): ...
    def expiry(self) -> PySide2.QtCore.QDateTime: ...
    def host(self, options: PySide2.QtCore.QUrl.ComponentFormattingOption=...) -> str: ...
    def includesSubDomains(self) -> bool: ...
    def isExpired(self) -> bool: ...
    def setExpiry(self, expiry: PySide2.QtCore.QDateTime): ...
    def setHost(self, host: str, mode: PySide2.QtCore.QUrl.ParsingMode=...): ...
    def setIncludesSubDomains(self, include: bool): ...
    def swap(self, other: PySide2.QtNetwork.QHstsPolicy): ...


class QHttpMultiPart(PySide2.QtCore.QObject):

    class ContentType(object): ...
    RelatedType              : ContentType = ... # 0x1
    FormDataType             : ContentType = ... # 0x2
    MixedType                : ContentType = ... # 0x0
    AlternativeType          : ContentType = ... # 0x3

    @typing.overload
    def __init__(self, contentType: PySide2.QtNetwork.QHttpMultiPart.ContentType, parent: Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def append(self, httpPart: PySide2.QtNetwork.QHttpPart): ...
    def boundary(self) -> PySide2.QtCore.QByteArray: ...
    def setBoundary(self, boundary: PySide2.QtCore.QByteArray): ...
    def setContentType(self, contentType: PySide2.QtNetwork.QHttpMultiPart.ContentType): ...


class QHttpPart(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QHttpPart): ...

    def __copy__(self): ...
    def setBody(self, body: PySide2.QtCore.QByteArray): ...
    def setBodyDevice(self, device: PySide2.QtCore.QIODevice): ...
    def setHeader(self, header: PySide2.QtNetwork.QNetworkRequest.KnownHeaders, value: Any): ...
    def setRawHeader(self, headerName: PySide2.QtCore.QByteArray, headerValue: PySide2.QtCore.QByteArray): ...
    def swap(self, other: PySide2.QtNetwork.QHttpPart): ...


class QIPv6Address(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, QIPv6Address: PySide2.QtNetwork.QIPv6Address): ...

    def __copy__(self): ...


class QLocalServer(PySide2.QtCore.QObject):

    class SocketOption(object): ...
    GroupAccessOption        : SocketOption = ... # 0x2
    UserAccessOption         : SocketOption = ... # 0x1
    WorldAccessOption        : SocketOption = ... # 0x7
    NoOptions                : SocketOption = ... # 0x0
    OtherAccessOption        : SocketOption = ... # 0x4

    class SocketOptions(object): ...

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def close(self): ...
    def errorString(self) -> str: ...
    def fullServerName(self) -> str: ...
    def hasPendingConnections(self) -> bool: ...
    def incomingConnection(self, socketDescriptor: int): ...
    def isListening(self) -> bool: ...
    @typing.overload
    def listen(self, name: str) -> bool: ...
    @typing.overload
    def listen(self, socketDescriptor: int) -> bool: ...
    def maxPendingConnections(self) -> int: ...
    def nextPendingConnection(self) -> PySide2.QtNetwork.QLocalSocket: ...
    @staticmethod
    def removeServer(name: str) -> bool: ...
    def serverError(self) -> PySide2.QtNetwork.QAbstractSocket.SocketError: ...
    def serverName(self) -> str: ...
    def setMaxPendingConnections(self, numConnections: int): ...
    def setSocketOptions(self, options: PySide2.QtNetwork.QLocalServer.SocketOptions): ...
    def socketDescriptor(self) -> int: ...
    def socketOptions(self) -> PySide2.QtNetwork.QLocalServer.SocketOptions: ...
    def waitForNewConnection(self, msec: int, timedOut: bool) -> bool: ...


class QLocalSocket(PySide2.QtCore.QIODevice):

    class LocalSocketError(object): ...
    SocketAccessError        : LocalSocketError = ... # 0x3
    DatagramTooLargeError    : LocalSocketError = ... # 0x6
    OperationError           : LocalSocketError = ... # 0x13
    ConnectionRefusedError   : LocalSocketError = ... # 0x0
    SocketTimeoutError       : LocalSocketError = ... # 0x5
    UnknownSocketError       : LocalSocketError = ... # -0x1
    PeerClosedError          : LocalSocketError = ... # 0x1
    UnsupportedSocketOperationError: LocalSocketError = ... # 0xa
    ConnectionError          : LocalSocketError = ... # 0x7
    ServerNotFoundError      : LocalSocketError = ... # 0x2
    SocketResourceError      : LocalSocketError = ... # 0x4

    class LocalSocketState(object): ...
    ClosingState             : LocalSocketState = ... # 0x6
    UnconnectedState         : LocalSocketState = ... # 0x0
    ConnectingState          : LocalSocketState = ... # 0x2
    ConnectedState           : LocalSocketState = ... # 0x3

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def abort(self): ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def canReadLine(self) -> bool: ...
    def close(self): ...
    @typing.overload
    def connectToServer(self, name: str, openMode: PySide2.QtCore.QIODevice.OpenMode=...): ...
    @typing.overload
    def connectToServer(self, openMode: PySide2.QtCore.QIODevice.OpenMode=...): ...
    def disconnectFromServer(self): ...
    def error(self) -> PySide2.QtNetwork.QLocalSocket.LocalSocketError: ...
    def flush(self) -> bool: ...
    def fullServerName(self) -> str: ...
    def isSequential(self) -> bool: ...
    def isValid(self) -> bool: ...
    def open(self, openMode: PySide2.QtCore.QIODevice.OpenMode=...) -> bool: ...
    def readBufferSize(self) -> int: ...
    def readData(self, arg__1: str, arg__2: int) -> int: ...
    def serverName(self) -> str: ...
    def setReadBufferSize(self, size: int): ...
    def setServerName(self, name: str): ...
    def setSocketDescriptor(self, socketDescriptor: int, socketState: PySide2.QtNetwork.QLocalSocket.LocalSocketState=..., openMode: PySide2.QtCore.QIODevice.OpenMode=...) -> bool: ...
    def socketDescriptor(self) -> int: ...
    def state(self) -> PySide2.QtNetwork.QLocalSocket.LocalSocketState: ...
    def waitForBytesWritten(self, msecs: int=...) -> bool: ...
    def waitForConnected(self, msecs: int=...) -> bool: ...
    def waitForDisconnected(self, msecs: int=...) -> bool: ...
    def waitForReadyRead(self, msecs: int=...) -> bool: ...
    def writeData(self, arg__1: str, arg__2: int) -> int: ...


class QNetworkAccessManager(PySide2.QtCore.QObject):

    class NetworkAccessibility(object): ...
    UnknownAccessibility     : NetworkAccessibility = ... # -0x1
    NotAccessible            : NetworkAccessibility = ... # 0x0
    Accessible               : NetworkAccessibility = ... # 0x1

    class Operation(object): ...
    UnknownOperation         : Operation = ... # 0x0
    CustomOperation          : Operation = ... # 0x6
    GetOperation             : Operation = ... # 0x2
    HeadOperation            : Operation = ... # 0x1
    PutOperation             : Operation = ... # 0x3
    PostOperation            : Operation = ... # 0x4
    DeleteOperation          : Operation = ... # 0x5

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def activeConfiguration(self) -> PySide2.QtNetwork.QNetworkConfiguration: ...
    def addStrictTransportSecurityHosts(self, knownHosts: List[PySide2.QtNetwork.QHstsPolicy]): ...
    def cache(self) -> PySide2.QtNetwork.QAbstractNetworkCache: ...
    def clearAccessCache(self): ...
    def clearConnectionCache(self): ...
    def configuration(self) -> PySide2.QtNetwork.QNetworkConfiguration: ...
    def connectToHost(self, hostName: str, port: int=...): ...
    @typing.overload
    def connectToHostEncrypted(self, hostName: str, port: int, sslConfiguration: PySide2.QtNetwork.QSslConfiguration, peerName: str): ...
    @typing.overload
    def connectToHostEncrypted(self, hostName: str, port: int=..., sslConfiguration: PySide2.QtNetwork.QSslConfiguration=...): ...
    def cookieJar(self) -> PySide2.QtNetwork.QNetworkCookieJar: ...
    def createRequest(self, op: PySide2.QtNetwork.QNetworkAccessManager.Operation, request: PySide2.QtNetwork.QNetworkRequest, outgoingData: Optional[PySide2.QtCore.QIODevice]=...) -> PySide2.QtNetwork.QNetworkReply: ...
    def deleteResource(self, request: PySide2.QtNetwork.QNetworkRequest) -> PySide2.QtNetwork.QNetworkReply: ...
    def enableStrictTransportSecurityStore(self, enabled: bool, storeDir: str=...): ...
    def get(self, request: PySide2.QtNetwork.QNetworkRequest) -> PySide2.QtNetwork.QNetworkReply: ...
    def head(self, request: PySide2.QtNetwork.QNetworkRequest) -> PySide2.QtNetwork.QNetworkReply: ...
    def isStrictTransportSecurityEnabled(self) -> bool: ...
    def isStrictTransportSecurityStoreEnabled(self) -> bool: ...
    def networkAccessible(self) -> PySide2.QtNetwork.QNetworkAccessManager.NetworkAccessibility: ...
    @typing.overload
    def post(self, request: PySide2.QtNetwork.QNetworkRequest, data: PySide2.QtCore.QByteArray) -> PySide2.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide2.QtNetwork.QNetworkRequest, data: PySide2.QtCore.QIODevice) -> PySide2.QtNetwork.QNetworkReply: ...
    @typing.overload
    def post(self, request: PySide2.QtNetwork.QNetworkRequest, multiPart: PySide2.QtNetwork.QHttpMultiPart) -> PySide2.QtNetwork.QNetworkReply: ...
    def proxy(self) -> PySide2.QtNetwork.QNetworkProxy: ...
    def proxyFactory(self) -> PySide2.QtNetwork.QNetworkProxyFactory: ...
    @typing.overload
    def put(self, request: PySide2.QtNetwork.QNetworkRequest, data: PySide2.QtCore.QByteArray) -> PySide2.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide2.QtNetwork.QNetworkRequest, data: PySide2.QtCore.QIODevice) -> PySide2.QtNetwork.QNetworkReply: ...
    @typing.overload
    def put(self, request: PySide2.QtNetwork.QNetworkRequest, multiPart: PySide2.QtNetwork.QHttpMultiPart) -> PySide2.QtNetwork.QNetworkReply: ...
    def redirectPolicy(self) -> PySide2.QtNetwork.QNetworkRequest.RedirectPolicy: ...
    @typing.overload
    def sendCustomRequest(self, request: PySide2.QtNetwork.QNetworkRequest, verb: PySide2.QtCore.QByteArray, data: PySide2.QtCore.QByteArray) -> PySide2.QtNetwork.QNetworkReply: ...
    @typing.overload
    def sendCustomRequest(self, request: PySide2.QtNetwork.QNetworkRequest, verb: PySide2.QtCore.QByteArray, data: Optional[PySide2.QtCore.QIODevice]=...) -> PySide2.QtNetwork.QNetworkReply: ...
    @typing.overload
    def sendCustomRequest(self, request: PySide2.QtNetwork.QNetworkRequest, verb: PySide2.QtCore.QByteArray, multiPart: PySide2.QtNetwork.QHttpMultiPart) -> PySide2.QtNetwork.QNetworkReply: ...
    def setCache(self, cache: PySide2.QtNetwork.QAbstractNetworkCache): ...
    def setConfiguration(self, config: PySide2.QtNetwork.QNetworkConfiguration): ...
    def setCookieJar(self, cookieJar: PySide2.QtNetwork.QNetworkCookieJar): ...
    def setNetworkAccessible(self, accessible: PySide2.QtNetwork.QNetworkAccessManager.NetworkAccessibility): ...
    def setProxy(self, proxy: PySide2.QtNetwork.QNetworkProxy): ...
    def setProxyFactory(self, factory: PySide2.QtNetwork.QNetworkProxyFactory): ...
    def setRedirectPolicy(self, policy: PySide2.QtNetwork.QNetworkRequest.RedirectPolicy): ...
    def setStrictTransportSecurityEnabled(self, enabled: bool): ...
    def strictTransportSecurityHosts(self) -> List[PySide2.QtNetwork.QHstsPolicy]: ...
    def supportedSchemes(self) -> List[str]: ...
    def supportedSchemesImplementation(self) -> List[str]: ...


class QNetworkAddressEntry(Shiboken.Object):

    class DnsEligibilityStatus(object): ...
    DnsEligible              : DnsEligibilityStatus = ... # 0x1
    DnsIneligible            : DnsEligibilityStatus = ... # 0x0
    DnsEligibilityUnknown    : DnsEligibilityStatus = ... # -0x1

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QNetworkAddressEntry): ...

    def __copy__(self): ...
    def broadcast(self) -> PySide2.QtNetwork.QHostAddress: ...
    def clearAddressLifetime(self): ...
    def dnsEligibility(self) -> PySide2.QtNetwork.QNetworkAddressEntry.DnsEligibilityStatus: ...
    def ip(self) -> PySide2.QtNetwork.QHostAddress: ...
    def isLifetimeKnown(self) -> bool: ...
    def isPermanent(self) -> bool: ...
    def isTemporary(self) -> bool: ...
    def netmask(self) -> PySide2.QtNetwork.QHostAddress: ...
    def prefixLength(self) -> int: ...
    def setBroadcast(self, newBroadcast: PySide2.QtNetwork.QHostAddress): ...
    def setDnsEligibility(self, status: PySide2.QtNetwork.QNetworkAddressEntry.DnsEligibilityStatus): ...
    def setIp(self, newIp: PySide2.QtNetwork.QHostAddress): ...
    def setNetmask(self, newNetmask: PySide2.QtNetwork.QHostAddress): ...
    def setPrefixLength(self, length: int): ...
    def swap(self, other: PySide2.QtNetwork.QNetworkAddressEntry): ...


class QNetworkCacheMetaData(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QNetworkCacheMetaData): ...

    def __copy__(self): ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def attributes(self) -> Dict: ...
    def expirationDate(self) -> PySide2.QtCore.QDateTime: ...
    def isValid(self) -> bool: ...
    def lastModified(self) -> PySide2.QtCore.QDateTime: ...
    def rawHeaders(self) -> List[Tuple]: ...
    def saveToDisk(self) -> bool: ...
    def setAttributes(self, attributes: Dict): ...
    def setExpirationDate(self, dateTime: PySide2.QtCore.QDateTime): ...
    def setLastModified(self, dateTime: PySide2.QtCore.QDateTime): ...
    def setRawHeaders(self, headers: List[Tuple]): ...
    def setSaveToDisk(self, allow: bool): ...
    def setUrl(self, url: PySide2.QtCore.QUrl): ...
    def swap(self, other: PySide2.QtNetwork.QNetworkCacheMetaData): ...
    def url(self) -> PySide2.QtCore.QUrl: ...


class QNetworkConfiguration(Shiboken.Object):

    class BearerType(object): ...
    Bearer3G                 : BearerType = ... # 0xb
    BearerUnknown            : BearerType = ... # 0x0
    Bearer2G                 : BearerType = ... # 0x3
    BearerBluetooth          : BearerType = ... # 0x7
    BearerWCDMA              : BearerType = ... # 0x5
    BearerWiMAX              : BearerType = ... # 0x8
    BearerHSPA               : BearerType = ... # 0x6
    BearerCDMA2000           : BearerType = ... # 0x4
    BearerEthernet           : BearerType = ... # 0x1
    BearerEVDO               : BearerType = ... # 0x9
    Bearer4G                 : BearerType = ... # 0xc
    BearerWLAN               : BearerType = ... # 0x2
    BearerLTE                : BearerType = ... # 0xa

    class Purpose(object): ...
    UnknownPurpose           : Purpose = ... # 0x0
    PrivatePurpose           : Purpose = ... # 0x2
    PublicPurpose            : Purpose = ... # 0x1
    ServiceSpecificPurpose   : Purpose = ... # 0x3

    class StateFlag(object): ...
    Discovered               : StateFlag = ... # 0x6
    Active                   : StateFlag = ... # 0xe
    Undefined                : StateFlag = ... # 0x1
    Defined                  : StateFlag = ... # 0x2

    class StateFlags(object): ...

    class Type(object): ...
    Invalid                  : Type = ... # 0x3
    UserChoice               : Type = ... # 0x2
    ServiceNetwork           : Type = ... # 0x1
    InternetAccessPoint      : Type = ... # 0x0

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QNetworkConfiguration): ...

    def __copy__(self): ...
    def bearerType(self) -> PySide2.QtNetwork.QNetworkConfiguration.BearerType: ...
    def bearerTypeFamily(self) -> PySide2.QtNetwork.QNetworkConfiguration.BearerType: ...
    def bearerTypeName(self) -> str: ...
    def children(self) -> List[PySide2.QtNetwork.QNetworkConfiguration]: ...
    def connectTimeout(self) -> int: ...
    def identifier(self) -> str: ...
    def isRoamingAvailable(self) -> bool: ...
    def isValid(self) -> bool: ...
    def name(self) -> str: ...
    def purpose(self) -> PySide2.QtNetwork.QNetworkConfiguration.Purpose: ...
    def setConnectTimeout(self, timeout: int) -> bool: ...
    def state(self) -> PySide2.QtNetwork.QNetworkConfiguration.StateFlags: ...
    def swap(self, other: PySide2.QtNetwork.QNetworkConfiguration): ...
    def type(self) -> PySide2.QtNetwork.QNetworkConfiguration.Type: ...


class QNetworkConfigurationManager(PySide2.QtCore.QObject):

    class Capabilities(object): ...

    class Capability(object): ...
    DirectConnectionRouting  : Capability = ... # 0x2
    ApplicationLevelRoaming  : Capability = ... # 0x8
    SystemSessionSupport     : Capability = ... # 0x4
    DataStatistics           : Capability = ... # 0x20
    CanStartAndStopInterfaces: Capability = ... # 0x1
    NetworkSessionRequired   : Capability = ... # 0x40
    ForcedRoaming            : Capability = ... # 0x10

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def allConfigurations(self, flags: PySide2.QtNetwork.QNetworkConfiguration.StateFlags=...) -> List[PySide2.QtNetwork.QNetworkConfiguration]: ...
    def capabilities(self) -> PySide2.QtNetwork.QNetworkConfigurationManager.Capabilities: ...
    def configurationFromIdentifier(self, identifier: str) -> PySide2.QtNetwork.QNetworkConfiguration: ...
    def defaultConfiguration(self) -> PySide2.QtNetwork.QNetworkConfiguration: ...
    def isOnline(self) -> bool: ...
    def updateConfigurations(self): ...


class QNetworkCookie(Shiboken.Object):

    class RawForm(object): ...
    NameAndValueOnly         : RawForm = ... # 0x0
    Full                     : RawForm = ... # 0x1

    @typing.overload
    def __init__(self, name: PySide2.QtCore.QByteArray=..., value: PySide2.QtCore.QByteArray=...): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QNetworkCookie): ...

    def __copy__(self): ...
    def domain(self) -> str: ...
    def expirationDate(self) -> PySide2.QtCore.QDateTime: ...
    def hasSameIdentifier(self, other: PySide2.QtNetwork.QNetworkCookie) -> bool: ...
    def isHttpOnly(self) -> bool: ...
    def isSecure(self) -> bool: ...
    def isSessionCookie(self) -> bool: ...
    def name(self) -> PySide2.QtCore.QByteArray: ...
    def normalize(self, url: PySide2.QtCore.QUrl): ...
    @staticmethod
    def parseCookies(cookieString: PySide2.QtCore.QByteArray) -> List[PySide2.QtNetwork.QNetworkCookie]: ...
    def path(self) -> str: ...
    def setDomain(self, domain: str): ...
    def setExpirationDate(self, date: PySide2.QtCore.QDateTime): ...
    def setHttpOnly(self, enable: bool): ...
    def setName(self, cookieName: PySide2.QtCore.QByteArray): ...
    def setPath(self, path: str): ...
    def setSecure(self, enable: bool): ...
    def setValue(self, value: PySide2.QtCore.QByteArray): ...
    def swap(self, other: PySide2.QtNetwork.QNetworkCookie): ...
    def toRawForm(self, form: PySide2.QtNetwork.QNetworkCookie.RawForm=...) -> PySide2.QtCore.QByteArray: ...
    def value(self) -> PySide2.QtCore.QByteArray: ...


class QNetworkCookieJar(PySide2.QtCore.QObject):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def allCookies(self) -> List[PySide2.QtNetwork.QNetworkCookie]: ...
    def cookiesForUrl(self, url: PySide2.QtCore.QUrl) -> List[PySide2.QtNetwork.QNetworkCookie]: ...
    def deleteCookie(self, cookie: PySide2.QtNetwork.QNetworkCookie) -> bool: ...
    def insertCookie(self, cookie: PySide2.QtNetwork.QNetworkCookie) -> bool: ...
    def setAllCookies(self, cookieList: List[PySide2.QtNetwork.QNetworkCookie]): ...
    def setCookiesFromUrl(self, cookieList: List[PySide2.QtNetwork.QNetworkCookie], url: PySide2.QtCore.QUrl) -> bool: ...
    def updateCookie(self, cookie: PySide2.QtNetwork.QNetworkCookie) -> bool: ...
    def validateCookie(self, cookie: PySide2.QtNetwork.QNetworkCookie, url: PySide2.QtCore.QUrl) -> bool: ...


class QNetworkDatagram(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, data: PySide2.QtCore.QByteArray, destinationAddress: PySide2.QtNetwork.QHostAddress=..., port: int=...): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QNetworkDatagram): ...

    def __copy__(self): ...
    def clear(self): ...
    def data(self) -> PySide2.QtCore.QByteArray: ...
    def destinationAddress(self) -> PySide2.QtNetwork.QHostAddress: ...
    def destinationPort(self) -> int: ...
    def hopLimit(self) -> int: ...
    def interfaceIndex(self) -> int: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    def makeReply(self, payload: PySide2.QtCore.QByteArray) -> PySide2.QtNetwork.QNetworkDatagram: ...
    def senderAddress(self) -> PySide2.QtNetwork.QHostAddress: ...
    def senderPort(self) -> int: ...
    def setData(self, data: PySide2.QtCore.QByteArray): ...
    def setDestination(self, address: PySide2.QtNetwork.QHostAddress, port: int): ...
    def setHopLimit(self, count: int): ...
    def setInterfaceIndex(self, index: int): ...
    def setSender(self, address: PySide2.QtNetwork.QHostAddress, port: int=...): ...
    def swap(self, other: PySide2.QtNetwork.QNetworkDatagram): ...


class QNetworkDiskCache(PySide2.QtNetwork.QAbstractNetworkCache):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def cacheDirectory(self) -> str: ...
    def cacheSize(self) -> int: ...
    def clear(self): ...
    def data(self, url: PySide2.QtCore.QUrl) -> PySide2.QtCore.QIODevice: ...
    def expire(self) -> int: ...
    def fileMetaData(self, fileName: str) -> PySide2.QtNetwork.QNetworkCacheMetaData: ...
    def insert(self, device: PySide2.QtCore.QIODevice): ...
    def maximumCacheSize(self) -> int: ...
    def metaData(self, url: PySide2.QtCore.QUrl) -> PySide2.QtNetwork.QNetworkCacheMetaData: ...
    def prepare(self, metaData: PySide2.QtNetwork.QNetworkCacheMetaData) -> PySide2.QtCore.QIODevice: ...
    def remove(self, url: PySide2.QtCore.QUrl) -> bool: ...
    def setCacheDirectory(self, cacheDir: str): ...
    def setMaximumCacheSize(self, size: int): ...
    def updateMetaData(self, metaData: PySide2.QtNetwork.QNetworkCacheMetaData): ...


class QNetworkInterface(Shiboken.Object):

    class InterfaceFlag(object): ...
    IsRunning                : InterfaceFlag = ... # 0x2
    IsPointToPoint           : InterfaceFlag = ... # 0x10
    IsLoopBack               : InterfaceFlag = ... # 0x8
    IsUp                     : InterfaceFlag = ... # 0x1
    CanMulticast             : InterfaceFlag = ... # 0x20
    CanBroadcast             : InterfaceFlag = ... # 0x4

    class InterfaceFlags(object): ...

    class InterfaceType(object): ...
    Loopback                 : InterfaceType = ... # 0x1
    Unknown                  : InterfaceType = ... # 0x0
    Virtual                  : InterfaceType = ... # 0x2
    Ieee802154               : InterfaceType = ... # 0xa
    CanBus                   : InterfaceType = ... # 0x5
    Ppp                      : InterfaceType = ... # 0x6
    Ieee80216                : InterfaceType = ... # 0xc
    Wifi                     : InterfaceType = ... # 0x8
    Ieee80211                : InterfaceType = ... # 0x8
    Ethernet                 : InterfaceType = ... # 0x3
    Ieee1394                 : InterfaceType = ... # 0xd
    SixLoWPAN                : InterfaceType = ... # 0xb
    Phonet                   : InterfaceType = ... # 0x9
    Slip                     : InterfaceType = ... # 0x4
    Fddi                     : InterfaceType = ... # 0x7

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QNetworkInterface): ...

    def __copy__(self): ...
    def addressEntries(self) -> List[PySide2.QtNetwork.QNetworkAddressEntry]: ...
    @staticmethod
    def allAddresses() -> List[PySide2.QtNetwork.QHostAddress]: ...
    @staticmethod
    def allInterfaces() -> List[PySide2.QtNetwork.QNetworkInterface]: ...
    def flags(self) -> PySide2.QtNetwork.QNetworkInterface.InterfaceFlags: ...
    def hardwareAddress(self) -> str: ...
    def humanReadableName(self) -> str: ...
    def index(self) -> int: ...
    @staticmethod
    def interfaceFromIndex(index: int) -> PySide2.QtNetwork.QNetworkInterface: ...
    @staticmethod
    def interfaceFromName(name: str) -> PySide2.QtNetwork.QNetworkInterface: ...
    @staticmethod
    def interfaceIndexFromName(name: str) -> int: ...
    @staticmethod
    def interfaceNameFromIndex(index: int) -> str: ...
    def isValid(self) -> bool: ...
    def maximumTransmissionUnit(self) -> int: ...
    def name(self) -> str: ...
    def swap(self, other: PySide2.QtNetwork.QNetworkInterface): ...
    def type(self) -> PySide2.QtNetwork.QNetworkInterface.InterfaceType: ...


class QNetworkProxy(Shiboken.Object):

    class Capabilities(object): ...

    class Capability(object): ...
    HostNameLookupCapability : Capability = ... # 0x10
    SctpListeningCapability  : Capability = ... # 0x40
    TunnelingCapability      : Capability = ... # 0x1
    UdpTunnelingCapability   : Capability = ... # 0x4
    CachingCapability        : Capability = ... # 0x8
    SctpTunnelingCapability  : Capability = ... # 0x20
    ListeningCapability      : Capability = ... # 0x2

    class ProxyType(object): ...
    HttpProxy                : ProxyType = ... # 0x3
    FtpCachingProxy          : ProxyType = ... # 0x5
    HttpCachingProxy         : ProxyType = ... # 0x4
    NoProxy                  : ProxyType = ... # 0x2
    Socks5Proxy              : ProxyType = ... # 0x1
    DefaultProxy             : ProxyType = ... # 0x0

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QNetworkProxy): ...
    @typing.overload
    def __init__(self, type: PySide2.QtNetwork.QNetworkProxy.ProxyType, hostName: str=..., port: int=..., user: str=..., password: str=...): ...

    def __copy__(self): ...
    @staticmethod
    def applicationProxy() -> PySide2.QtNetwork.QNetworkProxy: ...
    def capabilities(self) -> PySide2.QtNetwork.QNetworkProxy.Capabilities: ...
    def hasRawHeader(self, headerName: PySide2.QtCore.QByteArray) -> bool: ...
    def header(self, header: PySide2.QtNetwork.QNetworkRequest.KnownHeaders) -> Any: ...
    def hostName(self) -> str: ...
    def isCachingProxy(self) -> bool: ...
    def isTransparentProxy(self) -> bool: ...
    def password(self) -> str: ...
    def port(self) -> int: ...
    def rawHeader(self, headerName: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    def rawHeaderList(self) -> List[PySide2.QtCore.QByteArray]: ...
    @staticmethod
    def setApplicationProxy(proxy: PySide2.QtNetwork.QNetworkProxy): ...
    def setCapabilities(self, capab: PySide2.QtNetwork.QNetworkProxy.Capabilities): ...
    def setHeader(self, header: PySide2.QtNetwork.QNetworkRequest.KnownHeaders, value: Any): ...
    def setHostName(self, hostName: str): ...
    def setPassword(self, password: str): ...
    def setPort(self, port: int): ...
    def setRawHeader(self, headerName: PySide2.QtCore.QByteArray, value: PySide2.QtCore.QByteArray): ...
    def setType(self, type: PySide2.QtNetwork.QNetworkProxy.ProxyType): ...
    def setUser(self, userName: str): ...
    def swap(self, other: PySide2.QtNetwork.QNetworkProxy): ...
    def type(self) -> PySide2.QtNetwork.QNetworkProxy.ProxyType: ...
    def user(self) -> str: ...


class QNetworkProxyFactory(Shiboken.Object):

    def __init__(self): ...

    @staticmethod
    def proxyForQuery(query: PySide2.QtNetwork.QNetworkProxyQuery) -> List[PySide2.QtNetwork.QNetworkProxy]: ...
    def queryProxy(self, query: PySide2.QtNetwork.QNetworkProxyQuery=...) -> List[PySide2.QtNetwork.QNetworkProxy]: ...
    @staticmethod
    def setApplicationProxyFactory(factory: PySide2.QtNetwork.QNetworkProxyFactory): ...
    @staticmethod
    def setUseSystemConfiguration(enable: bool): ...
    @staticmethod
    def systemProxyForQuery(query: PySide2.QtNetwork.QNetworkProxyQuery=...) -> List[PySide2.QtNetwork.QNetworkProxy]: ...
    @staticmethod
    def usesSystemConfiguration() -> bool: ...


class QNetworkProxyQuery(Shiboken.Object):

    class QueryType(object): ...
    UrlRequest               : QueryType = ... # 0x65
    SctpSocket               : QueryType = ... # 0x2
    TcpSocket                : QueryType = ... # 0x0
    SctpServer               : QueryType = ... # 0x66
    UdpSocket                : QueryType = ... # 0x1
    TcpServer                : QueryType = ... # 0x64

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, bindPort: int, protocolTag: str=..., queryType: PySide2.QtNetwork.QNetworkProxyQuery.QueryType=...): ...
    @typing.overload
    def __init__(self, hostname: str, port: int, protocolTag: str=..., queryType: PySide2.QtNetwork.QNetworkProxyQuery.QueryType=...): ...
    @typing.overload
    def __init__(self, networkConfiguration: PySide2.QtNetwork.QNetworkConfiguration, bindPort: int, protocolTag: str=..., queryType: PySide2.QtNetwork.QNetworkProxyQuery.QueryType=...): ...
    @typing.overload
    def __init__(self, networkConfiguration: PySide2.QtNetwork.QNetworkConfiguration, hostname: str, port: int, protocolTag: str=..., queryType: PySide2.QtNetwork.QNetworkProxyQuery.QueryType=...): ...
    @typing.overload
    def __init__(self, networkConfiguration: PySide2.QtNetwork.QNetworkConfiguration, requestUrl: PySide2.QtCore.QUrl, queryType: PySide2.QtNetwork.QNetworkProxyQuery.QueryType=...): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QNetworkProxyQuery): ...
    @typing.overload
    def __init__(self, requestUrl: PySide2.QtCore.QUrl, queryType: PySide2.QtNetwork.QNetworkProxyQuery.QueryType=...): ...

    def __copy__(self): ...
    def localPort(self) -> int: ...
    def networkConfiguration(self) -> PySide2.QtNetwork.QNetworkConfiguration: ...
    def peerHostName(self) -> str: ...
    def peerPort(self) -> int: ...
    def protocolTag(self) -> str: ...
    def queryType(self) -> PySide2.QtNetwork.QNetworkProxyQuery.QueryType: ...
    def setLocalPort(self, port: int): ...
    def setNetworkConfiguration(self, networkConfiguration: PySide2.QtNetwork.QNetworkConfiguration): ...
    def setPeerHostName(self, hostname: str): ...
    def setPeerPort(self, port: int): ...
    def setProtocolTag(self, protocolTag: str): ...
    def setQueryType(self, type: PySide2.QtNetwork.QNetworkProxyQuery.QueryType): ...
    def setUrl(self, url: PySide2.QtCore.QUrl): ...
    def swap(self, other: PySide2.QtNetwork.QNetworkProxyQuery): ...
    def url(self) -> PySide2.QtCore.QUrl: ...


class QNetworkReply(PySide2.QtCore.QIODevice):

    class NetworkError(object): ...
    UnknownServerError       : NetworkError = ... # 0x1f3
    ProtocolUnknownError     : NetworkError = ... # 0x12d
    BackgroundRequestNotAllowedError: NetworkError = ... # 0x9
    ContentAccessDenied      : NetworkError = ... # 0xc9
    ProxyConnectionClosedError: NetworkError = ... # 0x66
    ContentGoneError         : NetworkError = ... # 0xcf
    ProtocolInvalidOperationError: NetworkError = ... # 0x12e
    ServiceUnavailableError  : NetworkError = ... # 0x193
    ProtocolFailure          : NetworkError = ... # 0x18f
    ContentReSendError       : NetworkError = ... # 0xcd
    ProxyNotFoundError       : NetworkError = ... # 0x67
    HostNotFoundError        : NetworkError = ... # 0x3
    UnknownProxyError        : NetworkError = ... # 0xc7
    ProxyTimeoutError        : NetworkError = ... # 0x68
    ProxyConnectionRefusedError: NetworkError = ... # 0x65
    ContentOperationNotPermittedError: NetworkError = ... # 0xca
    OperationCanceledError   : NetworkError = ... # 0x5
    ConnectionRefusedError   : NetworkError = ... # 0x1
    RemoteHostClosedError    : NetworkError = ... # 0x2
    AuthenticationRequiredError: NetworkError = ... # 0xcc
    OperationNotImplementedError: NetworkError = ... # 0x192
    TimeoutError             : NetworkError = ... # 0x4
    ContentConflictError     : NetworkError = ... # 0xce
    UnknownContentError      : NetworkError = ... # 0x12b
    NoError                  : NetworkError = ... # 0x0
    InternalServerError      : NetworkError = ... # 0x191
    UnknownNetworkError      : NetworkError = ... # 0x63
    SslHandshakeFailedError  : NetworkError = ... # 0x6
    InsecureRedirectError    : NetworkError = ... # 0xb
    TooManyRedirectsError    : NetworkError = ... # 0xa
    NetworkSessionFailedError: NetworkError = ... # 0x8
    ContentNotFoundError     : NetworkError = ... # 0xcb
    ProxyAuthenticationRequiredError: NetworkError = ... # 0x69
    TemporaryNetworkFailureError: NetworkError = ... # 0x7

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def abort(self): ...
    def attribute(self, code: PySide2.QtNetwork.QNetworkRequest.Attribute) -> Any: ...
    def close(self): ...
    def error(self) -> PySide2.QtNetwork.QNetworkReply.NetworkError: ...
    def hasRawHeader(self, headerName: PySide2.QtCore.QByteArray) -> bool: ...
    def header(self, header: PySide2.QtNetwork.QNetworkRequest.KnownHeaders) -> Any: ...
    @typing.overload
    def ignoreSslErrors(self): ...
    @typing.overload
    def ignoreSslErrors(self, errors: List[PySide2.QtNetwork.QSslError]): ...
    def ignoreSslErrorsImplementation(self, arg__1: List[PySide2.QtNetwork.QSslError]): ...
    def isFinished(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def isSequential(self) -> bool: ...
    def manager(self) -> PySide2.QtNetwork.QNetworkAccessManager: ...
    def operation(self) -> PySide2.QtNetwork.QNetworkAccessManager.Operation: ...
    def rawHeader(self, headerName: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    def rawHeaderList(self) -> List[PySide2.QtCore.QByteArray]: ...
    def rawHeaderPairs(self) -> List[Tuple]: ...
    def readBufferSize(self) -> int: ...
    def request(self) -> PySide2.QtNetwork.QNetworkRequest: ...
    def setAttribute(self, code: PySide2.QtNetwork.QNetworkRequest.Attribute, value: Any): ...
    def setError(self, errorCode: PySide2.QtNetwork.QNetworkReply.NetworkError, errorString: str): ...
    def setFinished(self, arg__1: bool): ...
    def setHeader(self, header: PySide2.QtNetwork.QNetworkRequest.KnownHeaders, value: Any): ...
    def setOperation(self, operation: PySide2.QtNetwork.QNetworkAccessManager.Operation): ...
    def setRawHeader(self, headerName: PySide2.QtCore.QByteArray, value: PySide2.QtCore.QByteArray): ...
    def setReadBufferSize(self, size: int): ...
    def setRequest(self, request: PySide2.QtNetwork.QNetworkRequest): ...
    def setSslConfiguration(self, configuration: PySide2.QtNetwork.QSslConfiguration): ...
    def setSslConfigurationImplementation(self, arg__1: PySide2.QtNetwork.QSslConfiguration): ...
    def setUrl(self, url: PySide2.QtCore.QUrl): ...
    def sslConfiguration(self) -> PySide2.QtNetwork.QSslConfiguration: ...
    def sslConfigurationImplementation(self, arg__1: PySide2.QtNetwork.QSslConfiguration): ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def writeData(self, data: str, len: int) -> int: ...


class QNetworkRequest(Shiboken.Object):

    class Attribute(object): ...
    SpdyWasUsedAttribute     : Attribute = ... # 0x13
    ConnectionEncryptedAttribute: Attribute = ... # 0x3
    BackgroundRequestAttribute: Attribute = ... # 0x11
    UserMax                  : Attribute = ... # 0x7fff
    AuthenticationReuseAttribute: Attribute = ... # 0xc
    HTTP2WasUsedAttribute    : Attribute = ... # 0x17
    CustomVerbAttribute      : Attribute = ... # 0xa
    HttpStatusCodeAttribute  : Attribute = ... # 0x0
    FollowRedirectsAttribute : Attribute = ... # 0x15
    CacheSaveControlAttribute: Attribute = ... # 0x5
    MaximumDownloadBufferSizeAttribute: Attribute = ... # 0xe
    RedirectionTargetAttribute: Attribute = ... # 0x2
    User                     : Attribute = ... # 0x3e8
    HttpPipeliningWasUsedAttribute: Attribute = ... # 0x9
    EmitAllUploadProgressSignalsAttribute: Attribute = ... # 0x14
    CookieLoadControlAttribute: Attribute = ... # 0xb
    HTTP2AllowedAttribute    : Attribute = ... # 0x16
    ResourceTypeAttribute    : Attribute = ... # 0x1b
    OriginalContentLengthAttribute: Attribute = ... # 0x18
    Http2DirectAttribute     : Attribute = ... # 0x1a
    HttpPipeliningAllowedAttribute: Attribute = ... # 0x8
    HttpReasonPhraseAttribute: Attribute = ... # 0x1
    CookieSaveControlAttribute: Attribute = ... # 0xd
    CacheLoadControlAttribute: Attribute = ... # 0x4
    SynchronousRequestAttribute: Attribute = ... # 0x10
    SpdyAllowedAttribute     : Attribute = ... # 0x12
    SourceIsFromCacheAttribute: Attribute = ... # 0x6
    DoNotBufferUploadDataAttribute: Attribute = ... # 0x7
    RedirectPolicyAttribute  : Attribute = ... # 0x19
    DownloadBufferAttribute  : Attribute = ... # 0xf

    class CacheLoadControl(object): ...
    AlwaysNetwork            : CacheLoadControl = ... # 0x0
    AlwaysCache              : CacheLoadControl = ... # 0x3
    PreferNetwork            : CacheLoadControl = ... # 0x1
    PreferCache              : CacheLoadControl = ... # 0x2

    class KnownHeaders(object): ...
    UserAgentHeader          : KnownHeaders = ... # 0x7
    ETagHeader               : KnownHeaders = ... # 0xa
    LastModifiedHeader       : KnownHeaders = ... # 0x3
    ContentDispositionHeader : KnownHeaders = ... # 0x6
    IfModifiedSinceHeader    : KnownHeaders = ... # 0x9
    LocationHeader           : KnownHeaders = ... # 0x2
    ServerHeader             : KnownHeaders = ... # 0x8
    CookieHeader             : KnownHeaders = ... # 0x4
    ContentTypeHeader        : KnownHeaders = ... # 0x0
    SetCookieHeader          : KnownHeaders = ... # 0x5
    ContentLengthHeader      : KnownHeaders = ... # 0x1
    IfNoneMatchHeader        : KnownHeaders = ... # 0xc
    IfMatchHeader            : KnownHeaders = ... # 0xb

    class LoadControl(object): ...
    Automatic                : LoadControl = ... # 0x0
    Manual                   : LoadControl = ... # 0x1

    class Priority(object): ...
    NormalPriority           : Priority = ... # 0x3
    HighPriority             : Priority = ... # 0x1
    LowPriority              : Priority = ... # 0x5

    class RedirectPolicy(object): ...
    SameOriginRedirectPolicy : RedirectPolicy = ... # 0x2
    NoLessSafeRedirectPolicy : RedirectPolicy = ... # 0x1
    ManualRedirectPolicy     : RedirectPolicy = ... # 0x0
    UserVerifiedRedirectPolicy: RedirectPolicy = ... # 0x3

    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QNetworkRequest): ...
    @typing.overload
    def __init__(self, url: PySide2.QtCore.QUrl=...): ...

    def __copy__(self): ...
    def attribute(self, code: PySide2.QtNetwork.QNetworkRequest.Attribute, defaultValue: Any=...) -> Any: ...
    def hasRawHeader(self, headerName: PySide2.QtCore.QByteArray) -> bool: ...
    def header(self, header: PySide2.QtNetwork.QNetworkRequest.KnownHeaders) -> Any: ...
    def maximumRedirectsAllowed(self) -> int: ...
    def originatingObject(self) -> PySide2.QtCore.QObject: ...
    def peerVerifyName(self) -> str: ...
    def priority(self) -> PySide2.QtNetwork.QNetworkRequest.Priority: ...
    def rawHeader(self, headerName: PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...
    def rawHeaderList(self) -> List[PySide2.QtCore.QByteArray]: ...
    def setAttribute(self, code: PySide2.QtNetwork.QNetworkRequest.Attribute, value: Any): ...
    def setHeader(self, header: PySide2.QtNetwork.QNetworkRequest.KnownHeaders, value: Any): ...
    def setMaximumRedirectsAllowed(self, maximumRedirectsAllowed: int): ...
    def setOriginatingObject(self, object: PySide2.QtCore.QObject): ...
    def setPeerVerifyName(self, peerName: str): ...
    def setPriority(self, priority: PySide2.QtNetwork.QNetworkRequest.Priority): ...
    def setRawHeader(self, headerName: PySide2.QtCore.QByteArray, value: PySide2.QtCore.QByteArray): ...
    def setSslConfiguration(self, configuration: PySide2.QtNetwork.QSslConfiguration): ...
    def setUrl(self, url: PySide2.QtCore.QUrl): ...
    def sslConfiguration(self) -> PySide2.QtNetwork.QSslConfiguration: ...
    def swap(self, other: PySide2.QtNetwork.QNetworkRequest): ...
    def url(self) -> PySide2.QtCore.QUrl: ...


class QNetworkSession(PySide2.QtCore.QObject):

    class SessionError(object): ...
    InvalidConfigurationError: SessionError = ... # 0x4
    SessionAbortedError      : SessionError = ... # 0x1
    RoamingError             : SessionError = ... # 0x2
    UnknownSessionError      : SessionError = ... # 0x0
    OperationNotSupportedError: SessionError = ... # 0x3

    class State(object): ...
    Invalid                  : State = ... # 0x0
    Connected                : State = ... # 0x3
    Connecting               : State = ... # 0x2
    Roaming                  : State = ... # 0x6
    Disconnected             : State = ... # 0x5
    NotAvailable             : State = ... # 0x1
    Closing                  : State = ... # 0x4

    class UsagePolicies(object): ...

    class UsagePolicy(object): ...
    NoPolicy                 : UsagePolicy = ... # 0x0
    NoBackgroundTrafficPolicy: UsagePolicy = ... # 0x1

    def __init__(self, connConfig: PySide2.QtNetwork.QNetworkConfiguration, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def accept(self): ...
    def activeTime(self) -> int: ...
    def bytesReceived(self) -> int: ...
    def bytesWritten(self) -> int: ...
    def close(self): ...
    def configuration(self) -> PySide2.QtNetwork.QNetworkConfiguration: ...
    def connectNotify(self, signal: PySide2.QtCore.QMetaMethod): ...
    def disconnectNotify(self, signal: PySide2.QtCore.QMetaMethod): ...
    def error(self) -> PySide2.QtNetwork.QNetworkSession.SessionError: ...
    def errorString(self) -> str: ...
    def ignore(self): ...
    def interface(self) -> PySide2.QtNetwork.QNetworkInterface: ...
    def isOpen(self) -> bool: ...
    def migrate(self): ...
    def open(self): ...
    def reject(self): ...
    def sessionProperty(self, key: str) -> Any: ...
    def setSessionProperty(self, key: str, value: Any): ...
    def state(self) -> PySide2.QtNetwork.QNetworkSession.State: ...
    def stop(self): ...
    def usagePolicies(self) -> PySide2.QtNetwork.QNetworkSession.UsagePolicies: ...
    def waitForOpened(self, msecs: int=...) -> bool: ...


class QOcspCertificateStatus(object): ...


class QOcspResponse(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QOcspResponse): ...

    def __copy__(self): ...
    def certificateStatus(self) -> PySide2.QtNetwork.QOcspCertificateStatus: ...
    def revocationReason(self) -> PySide2.QtNetwork.QOcspRevocationReason: ...
    def subject(self) -> PySide2.QtNetwork.QSslCertificate: ...
    def swap(self, other: PySide2.QtNetwork.QOcspResponse): ...


class QOcspRevocationReason(object): ...


class QPasswordDigestor(Shiboken.Object):
    @staticmethod
    def deriveKeyPbkdf1(algorithm: PySide2.QtCore.QCryptographicHash.Algorithm, password: PySide2.QtCore.QByteArray, salt: PySide2.QtCore.QByteArray, iterations: int, dkLen: int) -> PySide2.QtCore.QByteArray: ...
    @staticmethod
    def deriveKeyPbkdf2(algorithm: PySide2.QtCore.QCryptographicHash.Algorithm, password: PySide2.QtCore.QByteArray, salt: PySide2.QtCore.QByteArray, iterations: int, dkLen: int) -> PySide2.QtCore.QByteArray: ...


class QSsl(Shiboken.Object):

    class AlternativeNameEntryType(object): ...
    EmailEntry               : AlternativeNameEntryType = ... # 0x0
    DnsEntry                 : AlternativeNameEntryType = ... # 0x1
    IpAddressEntry           : AlternativeNameEntryType = ... # 0x2

    class EncodingFormat(object): ...
    Der                      : EncodingFormat = ... # 0x1
    Pem                      : EncodingFormat = ... # 0x0

    class KeyAlgorithm(object): ...
    Opaque                   : KeyAlgorithm = ... # 0x0
    Dsa                      : KeyAlgorithm = ... # 0x2
    Dh                       : KeyAlgorithm = ... # 0x4
    Rsa                      : KeyAlgorithm = ... # 0x1
    Ec                       : KeyAlgorithm = ... # 0x3

    class KeyType(object): ...
    PrivateKey               : KeyType = ... # 0x0
    PublicKey                : KeyType = ... # 0x1

    class SslOption(object): ...
    SslOptionDisableLegacyRenegotiation: SslOption = ... # 0x10
    SslOptionDisableCompression: SslOption = ... # 0x4
    SslOptionDisableServerCipherPreference: SslOption = ... # 0x80
    SslOptionDisableSessionPersistence: SslOption = ... # 0x40
    SslOptionDisableServerNameIndication: SslOption = ... # 0x8
    SslOptionDisableSessionSharing: SslOption = ... # 0x20
    SslOptionDisableEmptyFragments: SslOption = ... # 0x1
    SslOptionDisableSessionTickets: SslOption = ... # 0x2

    class SslOptions(object): ...

    class SslProtocol(object): ...
    TlsV1_2OrLater           : SslProtocol = ... # 0xa
    DtlsV1_2                 : SslProtocol = ... # 0xd
    DtlsV1_0OrLater          : SslProtocol = ... # 0xc
    TlsV1_2                  : SslProtocol = ... # 0x4
    TlsV1_0                  : SslProtocol = ... # 0x2
    TlsV1_1                  : SslProtocol = ... # 0x3
    DtlsV1_2OrLater          : SslProtocol = ... # 0xe
    TlsV1_3OrLater           : SslProtocol = ... # 0x10
    TlsV1SslV3               : SslProtocol = ... # 0x6
    TlsV1_0OrLater           : SslProtocol = ... # 0x8
    AnyProtocol              : SslProtocol = ... # 0x5
    TlsV1_3                  : SslProtocol = ... # 0xf
    TlsV1_1OrLater           : SslProtocol = ... # 0x9
    UnknownProtocol          : SslProtocol = ... # -0x1
    SecureProtocols          : SslProtocol = ... # 0x7
    SslV3                    : SslProtocol = ... # 0x0
    SslV2                    : SslProtocol = ... # 0x1
    DtlsV1_0                 : SslProtocol = ... # 0xb


class QSslCertificate(Shiboken.Object):

    class SubjectInfo(object): ...
    OrganizationalUnitName   : SubjectInfo = ... # 0x3
    SerialNumber             : SubjectInfo = ... # 0x7
    StateOrProvinceName      : SubjectInfo = ... # 0x5
    CountryName              : SubjectInfo = ... # 0x4
    LocalityName             : SubjectInfo = ... # 0x2
    EmailAddress             : SubjectInfo = ... # 0x8
    CommonName               : SubjectInfo = ... # 0x1
    DistinguishedNameQualifier: SubjectInfo = ... # 0x6
    Organization             : SubjectInfo = ... # 0x0

    @typing.overload
    def __init__(self, data: PySide2.QtCore.QByteArray=..., format: PySide2.QtNetwork.QSsl.EncodingFormat=...): ...
    @typing.overload
    def __init__(self, device: PySide2.QtCore.QIODevice, format: PySide2.QtNetwork.QSsl.EncodingFormat=...): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QSslCertificate): ...

    def __copy__(self): ...
    def clear(self): ...
    def digest(self, algorithm: PySide2.QtCore.QCryptographicHash.Algorithm=...) -> PySide2.QtCore.QByteArray: ...
    def effectiveDate(self) -> PySide2.QtCore.QDateTime: ...
    def expiryDate(self) -> PySide2.QtCore.QDateTime: ...
    def extensions(self) -> List[PySide2.QtNetwork.QSslCertificateExtension]: ...
    @staticmethod
    def fromData(data: PySide2.QtCore.QByteArray, format: PySide2.QtNetwork.QSsl.EncodingFormat=...) -> List[PySide2.QtNetwork.QSslCertificate]: ...
    @staticmethod
    def fromDevice(device: PySide2.QtCore.QIODevice, format: PySide2.QtNetwork.QSsl.EncodingFormat=...) -> List[PySide2.QtNetwork.QSslCertificate]: ...
    @staticmethod
    def fromPath(path: str, format: PySide2.QtNetwork.QSsl.EncodingFormat=..., syntax: PySide2.QtCore.QRegExp.PatternSyntax=...) -> List[PySide2.QtNetwork.QSslCertificate]: ...
    def handle(self) -> int: ...
    @staticmethod
    def importPkcs12(device: PySide2.QtCore.QIODevice, key: PySide2.QtNetwork.QSslKey, cert: PySide2.QtNetwork.QSslCertificate, caCertificates: Optional[List[PySide2.QtNetwork.QSslCertificate]]=..., passPhrase: PySide2.QtCore.QByteArray=...) -> bool: ...
    def isBlacklisted(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isSelfSigned(self) -> bool: ...
    def issuerDisplayName(self) -> str: ...
    @typing.overload
    def issuerInfo(self, attribute: PySide2.QtCore.QByteArray) -> List[str]: ...
    @typing.overload
    def issuerInfo(self, info: PySide2.QtNetwork.QSslCertificate.SubjectInfo) -> List[str]: ...
    def issuerInfoAttributes(self) -> List[PySide2.QtCore.QByteArray]: ...
    def publicKey(self) -> PySide2.QtNetwork.QSslKey: ...
    def serialNumber(self) -> PySide2.QtCore.QByteArray: ...
    def subjectAlternativeNames(self) -> DefaultDict[str, List[str]]: ...
    def subjectDisplayName(self) -> str: ...
    @typing.overload
    def subjectInfo(self, attribute: PySide2.QtCore.QByteArray) -> List[str]: ...
    @typing.overload
    def subjectInfo(self, info: PySide2.QtNetwork.QSslCertificate.SubjectInfo) -> List[str]: ...
    def subjectInfoAttributes(self) -> List[PySide2.QtCore.QByteArray]: ...
    def swap(self, other: PySide2.QtNetwork.QSslCertificate): ...
    def toDer(self) -> PySide2.QtCore.QByteArray: ...
    def toPem(self) -> PySide2.QtCore.QByteArray: ...
    def toText(self) -> str: ...
    @staticmethod
    def verify(certificateChain: List[PySide2.QtNetwork.QSslCertificate], hostName: str=...) -> List[PySide2.QtNetwork.QSslError]: ...
    def version(self) -> PySide2.QtCore.QByteArray: ...


class QSslCertificateExtension(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QSslCertificateExtension): ...

    def __copy__(self): ...
    def isCritical(self) -> bool: ...
    def isSupported(self) -> bool: ...
    def name(self) -> str: ...
    def oid(self) -> str: ...
    def swap(self, other: PySide2.QtNetwork.QSslCertificateExtension): ...
    def value(self) -> Any: ...


class QSslCipher(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, name: str): ...
    @typing.overload
    def __init__(self, name: str, protocol: PySide2.QtNetwork.QSsl.SslProtocol): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QSslCipher): ...

    def __copy__(self): ...
    def authenticationMethod(self) -> str: ...
    def encryptionMethod(self) -> str: ...
    def isNull(self) -> bool: ...
    def keyExchangeMethod(self) -> str: ...
    def name(self) -> str: ...
    def protocol(self) -> PySide2.QtNetwork.QSsl.SslProtocol: ...
    def protocolString(self) -> str: ...
    def supportedBits(self) -> int: ...
    def swap(self, other: PySide2.QtNetwork.QSslCipher): ...
    def usedBits(self) -> int: ...


class QSslConfiguration(Shiboken.Object):

    class NextProtocolNegotiationStatus(object): ...
    NextProtocolNegotiationNone: NextProtocolNegotiationStatus = ... # 0x0
    NextProtocolNegotiationNegotiated: NextProtocolNegotiationStatus = ... # 0x1
    NextProtocolNegotiationUnsupported: NextProtocolNegotiationStatus = ... # 0x2

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QSslConfiguration): ...

    def __copy__(self): ...
    def allowedNextProtocols(self) -> List[PySide2.QtCore.QByteArray]: ...
    def backendConfiguration(self) -> Dict: ...
    def caCertificates(self) -> List[PySide2.QtNetwork.QSslCertificate]: ...
    def ciphers(self) -> List[PySide2.QtNetwork.QSslCipher]: ...
    @staticmethod
    def defaultConfiguration() -> PySide2.QtNetwork.QSslConfiguration: ...
    def diffieHellmanParameters(self) -> PySide2.QtNetwork.QSslDiffieHellmanParameters: ...
    def ephemeralServerKey(self) -> PySide2.QtNetwork.QSslKey: ...
    def isNull(self) -> bool: ...
    def localCertificate(self) -> PySide2.QtNetwork.QSslCertificate: ...
    def localCertificateChain(self) -> List[PySide2.QtNetwork.QSslCertificate]: ...
    def nextNegotiatedProtocol(self) -> PySide2.QtCore.QByteArray: ...
    def nextProtocolNegotiationStatus(self) -> PySide2.QtNetwork.QSslConfiguration.NextProtocolNegotiationStatus: ...
    def ocspStaplingEnabled(self) -> bool: ...
    def peerCertificate(self) -> PySide2.QtNetwork.QSslCertificate: ...
    def peerCertificateChain(self) -> List[PySide2.QtNetwork.QSslCertificate]: ...
    def peerVerifyDepth(self) -> int: ...
    def peerVerifyMode(self) -> PySide2.QtNetwork.QSslSocket.PeerVerifyMode: ...
    def preSharedKeyIdentityHint(self) -> PySide2.QtCore.QByteArray: ...
    def privateKey(self) -> PySide2.QtNetwork.QSslKey: ...
    def protocol(self) -> PySide2.QtNetwork.QSsl.SslProtocol: ...
    def sessionCipher(self) -> PySide2.QtNetwork.QSslCipher: ...
    def sessionProtocol(self) -> PySide2.QtNetwork.QSsl.SslProtocol: ...
    def sessionTicket(self) -> PySide2.QtCore.QByteArray: ...
    def sessionTicketLifeTimeHint(self) -> int: ...
    def setAllowedNextProtocols(self, protocols: List[PySide2.QtCore.QByteArray]): ...
    def setBackendConfiguration(self, backendConfiguration: Dict=...): ...
    def setBackendConfigurationOption(self, name: PySide2.QtCore.QByteArray, value: Any): ...
    def setCaCertificates(self, certificates: List[PySide2.QtNetwork.QSslCertificate]): ...
    def setCiphers(self, ciphers: List[PySide2.QtNetwork.QSslCipher]): ...
    @staticmethod
    def setDefaultConfiguration(configuration: PySide2.QtNetwork.QSslConfiguration): ...
    def setDiffieHellmanParameters(self, dhparams: PySide2.QtNetwork.QSslDiffieHellmanParameters): ...
    def setLocalCertificate(self, certificate: PySide2.QtNetwork.QSslCertificate): ...
    def setLocalCertificateChain(self, localChain: List[PySide2.QtNetwork.QSslCertificate]): ...
    def setOcspStaplingEnabled(self, enable: bool): ...
    def setPeerVerifyDepth(self, depth: int): ...
    def setPeerVerifyMode(self, mode: PySide2.QtNetwork.QSslSocket.PeerVerifyMode): ...
    def setPreSharedKeyIdentityHint(self, hint: PySide2.QtCore.QByteArray): ...
    def setPrivateKey(self, key: PySide2.QtNetwork.QSslKey): ...
    def setProtocol(self, protocol: PySide2.QtNetwork.QSsl.SslProtocol): ...
    def setSessionTicket(self, sessionTicket: PySide2.QtCore.QByteArray): ...
    def setSslOption(self, option: PySide2.QtNetwork.QSsl.SslOption, on: bool): ...
    @staticmethod
    def supportedCiphers() -> List[PySide2.QtNetwork.QSslCipher]: ...
    def swap(self, other: PySide2.QtNetwork.QSslConfiguration): ...
    @staticmethod
    def systemCaCertificates() -> List[PySide2.QtNetwork.QSslCertificate]: ...
    def testSslOption(self, option: PySide2.QtNetwork.QSsl.SslOption) -> bool: ...


class QSslDiffieHellmanParameters(Shiboken.Object):

    class Error(object): ...
    InvalidInputDataError    : Error = ... # 0x1
    UnsafeParametersError    : Error = ... # 0x2
    NoError                  : Error = ... # 0x0

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QSslDiffieHellmanParameters): ...

    def __copy__(self): ...
    @staticmethod
    def defaultParameters() -> PySide2.QtNetwork.QSslDiffieHellmanParameters: ...
    def error(self) -> PySide2.QtNetwork.QSslDiffieHellmanParameters.Error: ...
    def errorString(self) -> str: ...
    @typing.overload
    @staticmethod
    def fromEncoded(device: PySide2.QtCore.QIODevice, format: PySide2.QtNetwork.QSsl.EncodingFormat=...) -> PySide2.QtNetwork.QSslDiffieHellmanParameters: ...
    @typing.overload
    @staticmethod
    def fromEncoded(encoded: PySide2.QtCore.QByteArray, format: PySide2.QtNetwork.QSsl.EncodingFormat=...) -> PySide2.QtNetwork.QSslDiffieHellmanParameters: ...
    def isEmpty(self) -> bool: ...
    def isValid(self) -> bool: ...
    def swap(self, other: PySide2.QtNetwork.QSslDiffieHellmanParameters): ...


class QSslError(Shiboken.Object):

    class SslError(object): ...
    CertificateRejected      : SslError = ... # 0x12
    OcspInternalError        : SslError = ... # 0x1d
    CertificateRevoked       : SslError = ... # 0xd
    AuthorityIssuerSerialNumberMismatch: SslError = ... # 0x14
    OcspResponseCannotBeTrusted: SslError = ... # 0x21
    OcspNoResponseFound      : SslError = ... # 0x1a
    InvalidPurpose           : SslError = ... # 0x10
    InvalidCaCertificate     : SslError = ... # 0xe
    CertificateBlacklisted   : SslError = ... # 0x18
    UnableToGetIssuerCertificate: SslError = ... # 0x1
    SubjectIssuerMismatch    : SslError = ... # 0x13
    NoPeerCertificate        : SslError = ... # 0x15
    UnableToVerifyFirstCertificate: SslError = ... # 0xc
    UnableToGetLocalIssuerCertificate: SslError = ... # 0xb
    OcspUnauthorized         : SslError = ... # 0x20
    CertificateExpired       : SslError = ... # 0x6
    SelfSignedCertificate    : SslError = ... # 0x9
    InvalidNotAfterField     : SslError = ... # 0x8
    UnspecifiedError         : SslError = ... # -0x1
    InvalidNotBeforeField    : SslError = ... # 0x7
    CertificateStatusUnknown : SslError = ... # 0x19
    SelfSignedCertificateInChain: SslError = ... # 0xa
    CertificateNotYetValid   : SslError = ... # 0x5
    UnableToDecodeIssuerPublicKey: SslError = ... # 0x3
    OcspStatusUnknown        : SslError = ... # 0x24
    CertificateSignatureFailed: SslError = ... # 0x4
    NoError                  : SslError = ... # 0x0
    OcspTryLater             : SslError = ... # 0x1e
    OcspResponseExpired      : SslError = ... # 0x23
    HostNameMismatch         : SslError = ... # 0x16
    OcspResponseCertIdUnknown: SslError = ... # 0x22
    UnableToDecryptCertificateSignature: SslError = ... # 0x2
    OcspMalformedResponse    : SslError = ... # 0x1c
    NoSslSupport             : SslError = ... # 0x17
    OcspMalformedRequest     : SslError = ... # 0x1b
    OcspSigRequred           : SslError = ... # 0x1f
    PathLengthExceeded       : SslError = ... # 0xf
    CertificateUntrusted     : SslError = ... # 0x11

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, error: PySide2.QtNetwork.QSslError.SslError): ...
    @typing.overload
    def __init__(self, error: PySide2.QtNetwork.QSslError.SslError, certificate: PySide2.QtNetwork.QSslCertificate): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QSslError): ...

    def __copy__(self): ...
    def certificate(self) -> PySide2.QtNetwork.QSslCertificate: ...
    def error(self) -> PySide2.QtNetwork.QSslError.SslError: ...
    def errorString(self) -> str: ...
    def swap(self, other: PySide2.QtNetwork.QSslError): ...


class QSslKey(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, device: PySide2.QtCore.QIODevice, algorithm: PySide2.QtNetwork.QSsl.KeyAlgorithm, format: PySide2.QtNetwork.QSsl.EncodingFormat=..., type: PySide2.QtNetwork.QSsl.KeyType=..., passPhrase: PySide2.QtCore.QByteArray=...): ...
    @typing.overload
    def __init__(self, encoded: PySide2.QtCore.QByteArray, algorithm: PySide2.QtNetwork.QSsl.KeyAlgorithm, format: PySide2.QtNetwork.QSsl.EncodingFormat=..., type: PySide2.QtNetwork.QSsl.KeyType=..., passPhrase: PySide2.QtCore.QByteArray=...): ...
    @typing.overload
    def __init__(self, handle: int, type: PySide2.QtNetwork.QSsl.KeyType=...): ...
    @typing.overload
    def __init__(self, other: PySide2.QtNetwork.QSslKey): ...

    def __copy__(self): ...
    def algorithm(self) -> PySide2.QtNetwork.QSsl.KeyAlgorithm: ...
    def clear(self): ...
    def handle(self) -> int: ...
    def isNull(self) -> bool: ...
    def length(self) -> int: ...
    def swap(self, other: PySide2.QtNetwork.QSslKey): ...
    def toDer(self, passPhrase: PySide2.QtCore.QByteArray=...) -> PySide2.QtCore.QByteArray: ...
    def toPem(self, passPhrase: PySide2.QtCore.QByteArray=...) -> PySide2.QtCore.QByteArray: ...
    def type(self) -> PySide2.QtNetwork.QSsl.KeyType: ...


class QSslPreSharedKeyAuthenticator(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, authenticator: PySide2.QtNetwork.QSslPreSharedKeyAuthenticator): ...

    def __copy__(self): ...
    def identity(self) -> PySide2.QtCore.QByteArray: ...
    def identityHint(self) -> PySide2.QtCore.QByteArray: ...
    def maximumIdentityLength(self) -> int: ...
    def maximumPreSharedKeyLength(self) -> int: ...
    def preSharedKey(self) -> PySide2.QtCore.QByteArray: ...
    def setIdentity(self, identity: PySide2.QtCore.QByteArray): ...
    def setPreSharedKey(self, preSharedKey: PySide2.QtCore.QByteArray): ...
    def swap(self, other: PySide2.QtNetwork.QSslPreSharedKeyAuthenticator): ...


class QSslSocket(PySide2.QtNetwork.QTcpSocket):

    class PeerVerifyMode(object): ...
    QueryPeer                : PeerVerifyMode = ... # 0x1
    VerifyPeer               : PeerVerifyMode = ... # 0x2
    AutoVerifyPeer           : PeerVerifyMode = ... # 0x3
    VerifyNone               : PeerVerifyMode = ... # 0x0

    class SslMode(object): ...
    SslServerMode            : SslMode = ... # 0x2
    SslClientMode            : SslMode = ... # 0x1
    UnencryptedMode          : SslMode = ... # 0x0

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def abort(self): ...
    def addCaCertificate(self, certificate: PySide2.QtNetwork.QSslCertificate): ...
    @typing.overload
    def addCaCertificates(self, certificates: List[PySide2.QtNetwork.QSslCertificate]): ...
    @typing.overload
    def addCaCertificates(self, path: str, format: PySide2.QtNetwork.QSsl.EncodingFormat=..., syntax: PySide2.QtCore.QRegExp.PatternSyntax=...) -> bool: ...
    @staticmethod
    def addDefaultCaCertificate(certificate: PySide2.QtNetwork.QSslCertificate): ...
    @typing.overload
    @staticmethod
    def addDefaultCaCertificates(certificates: List[PySide2.QtNetwork.QSslCertificate]): ...
    @typing.overload
    @staticmethod
    def addDefaultCaCertificates(path: str, format: PySide2.QtNetwork.QSsl.EncodingFormat=..., syntax: PySide2.QtCore.QRegExp.PatternSyntax=...) -> bool: ...
    def atEnd(self) -> bool: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def caCertificates(self) -> List[PySide2.QtNetwork.QSslCertificate]: ...
    def canReadLine(self) -> bool: ...
    def ciphers(self) -> List[PySide2.QtNetwork.QSslCipher]: ...
    def close(self): ...
    @typing.overload
    def connectToHost(self, address: PySide2.QtNetwork.QHostAddress, port: int, mode: PySide2.QtCore.QIODevice.OpenMode=...): ...
    @typing.overload
    def connectToHost(self, hostName: str, port: int, openMode: PySide2.QtCore.QIODevice.OpenMode=..., protocol: PySide2.QtNetwork.QAbstractSocket.NetworkLayerProtocol=...): ...
    @typing.overload
    def connectToHostEncrypted(self, hostName: str, port: int, mode: PySide2.QtCore.QIODevice.OpenMode=..., protocol: PySide2.QtNetwork.QAbstractSocket.NetworkLayerProtocol=...): ...
    @typing.overload
    def connectToHostEncrypted(self, hostName: str, port: int, sslPeerName: str, mode: PySide2.QtCore.QIODevice.OpenMode=..., protocol: PySide2.QtNetwork.QAbstractSocket.NetworkLayerProtocol=...): ...
    @staticmethod
    def defaultCaCertificates() -> List[PySide2.QtNetwork.QSslCertificate]: ...
    @staticmethod
    def defaultCiphers() -> List[PySide2.QtNetwork.QSslCipher]: ...
    def disconnectFromHost(self): ...
    def encryptedBytesAvailable(self) -> int: ...
    def encryptedBytesToWrite(self) -> int: ...
    def flush(self) -> bool: ...
    @typing.overload
    def ignoreSslErrors(self): ...
    @typing.overload
    def ignoreSslErrors(self, errors: List[PySide2.QtNetwork.QSslError]): ...
    def isEncrypted(self) -> bool: ...
    def localCertificate(self) -> PySide2.QtNetwork.QSslCertificate: ...
    def localCertificateChain(self) -> List[PySide2.QtNetwork.QSslCertificate]: ...
    def mode(self) -> PySide2.QtNetwork.QSslSocket.SslMode: ...
    def ocspResponses(self) -> List[PySide2.QtNetwork.QOcspResponse]: ...
    def peerCertificate(self) -> PySide2.QtNetwork.QSslCertificate: ...
    def peerCertificateChain(self) -> List[PySide2.QtNetwork.QSslCertificate]: ...
    def peerVerifyDepth(self) -> int: ...
    def peerVerifyMode(self) -> PySide2.QtNetwork.QSslSocket.PeerVerifyMode: ...
    def peerVerifyName(self) -> str: ...
    def privateKey(self) -> PySide2.QtNetwork.QSslKey: ...
    def protocol(self) -> PySide2.QtNetwork.QSsl.SslProtocol: ...
    def readData(self, data: str, maxlen: int) -> int: ...
    def resume(self): ...
    def sessionCipher(self) -> PySide2.QtNetwork.QSslCipher: ...
    def sessionProtocol(self) -> PySide2.QtNetwork.QSsl.SslProtocol: ...
    def setCaCertificates(self, certificates: List[PySide2.QtNetwork.QSslCertificate]): ...
    @typing.overload
    def setCiphers(self, ciphers: List[PySide2.QtNetwork.QSslCipher]): ...
    @typing.overload
    def setCiphers(self, ciphers: str): ...
    @staticmethod
    def setDefaultCaCertificates(certificates: List[PySide2.QtNetwork.QSslCertificate]): ...
    @staticmethod
    def setDefaultCiphers(ciphers: List[PySide2.QtNetwork.QSslCipher]): ...
    @typing.overload
    def setLocalCertificate(self, certificate: PySide2.QtNetwork.QSslCertificate): ...
    @typing.overload
    def setLocalCertificate(self, fileName: str, format: PySide2.QtNetwork.QSsl.EncodingFormat=...): ...
    def setLocalCertificateChain(self, localChain: List[PySide2.QtNetwork.QSslCertificate]): ...
    def setPeerVerifyDepth(self, depth: int): ...
    def setPeerVerifyMode(self, mode: PySide2.QtNetwork.QSslSocket.PeerVerifyMode): ...
    def setPeerVerifyName(self, hostName: str): ...
    @typing.overload
    def setPrivateKey(self, fileName: str, algorithm: PySide2.QtNetwork.QSsl.KeyAlgorithm=..., format: PySide2.QtNetwork.QSsl.EncodingFormat=..., passPhrase: PySide2.QtCore.QByteArray=...): ...
    @typing.overload
    def setPrivateKey(self, key: PySide2.QtNetwork.QSslKey): ...
    def setProtocol(self, protocol: PySide2.QtNetwork.QSsl.SslProtocol): ...
    def setReadBufferSize(self, size: int): ...
    def setSocketDescriptor(self, socketDescriptor: int, state: PySide2.QtNetwork.QAbstractSocket.SocketState=..., openMode: PySide2.QtCore.QIODevice.OpenMode=...) -> bool: ...
    def setSocketOption(self, option: PySide2.QtNetwork.QAbstractSocket.SocketOption, value: Any): ...
    def setSslConfiguration(self, config: PySide2.QtNetwork.QSslConfiguration): ...
    def socketOption(self, option: PySide2.QtNetwork.QAbstractSocket.SocketOption) -> Any: ...
    def sslConfiguration(self) -> PySide2.QtNetwork.QSslConfiguration: ...
    def sslErrors(self) -> List[PySide2.QtNetwork.QSslError]: ...
    @staticmethod
    def sslLibraryBuildVersionNumber() -> int: ...
    @staticmethod
    def sslLibraryBuildVersionString() -> str: ...
    @staticmethod
    def sslLibraryVersionNumber() -> int: ...
    @staticmethod
    def sslLibraryVersionString() -> str: ...
    def startClientEncryption(self): ...
    def startServerEncryption(self): ...
    @staticmethod
    def supportedCiphers() -> List[PySide2.QtNetwork.QSslCipher]: ...
    @staticmethod
    def supportsSsl() -> bool: ...
    @staticmethod
    def systemCaCertificates() -> List[PySide2.QtNetwork.QSslCertificate]: ...
    def waitForBytesWritten(self, msecs: int=...) -> bool: ...
    def waitForConnected(self, msecs: int=...) -> bool: ...
    def waitForDisconnected(self, msecs: int=...) -> bool: ...
    def waitForEncrypted(self, msecs: int=...) -> bool: ...
    def waitForReadyRead(self, msecs: int=...) -> bool: ...
    def writeData(self, data: str, len: int) -> int: ...


class QTcpServer(PySide2.QtCore.QObject):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def addPendingConnection(self, socket: PySide2.QtNetwork.QTcpSocket): ...
    def close(self): ...
    def errorString(self) -> str: ...
    def hasPendingConnections(self) -> bool: ...
    def incomingConnection(self, handle: int): ...
    def isListening(self) -> bool: ...
    def listen(self, address: PySide2.QtNetwork.QHostAddress=..., port: int=...) -> bool: ...
    def maxPendingConnections(self) -> int: ...
    def nextPendingConnection(self) -> PySide2.QtNetwork.QTcpSocket: ...
    def pauseAccepting(self): ...
    def proxy(self) -> PySide2.QtNetwork.QNetworkProxy: ...
    def resumeAccepting(self): ...
    def serverAddress(self) -> PySide2.QtNetwork.QHostAddress: ...
    def serverError(self) -> PySide2.QtNetwork.QAbstractSocket.SocketError: ...
    def serverPort(self) -> int: ...
    def setMaxPendingConnections(self, numConnections: int): ...
    def setProxy(self, networkProxy: PySide2.QtNetwork.QNetworkProxy): ...
    def setSocketDescriptor(self, socketDescriptor: int) -> bool: ...
    def socketDescriptor(self) -> int: ...
    def waitForNewConnection(self, msec: int, timedOut: bool) -> bool: ...


class QTcpSocket(PySide2.QtNetwork.QAbstractSocket):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...


class QUdpSocket(PySide2.QtNetwork.QAbstractSocket):

    def __init__(self, parent: Optional[PySide2.QtCore.QObject]=...): ...

    def hasPendingDatagrams(self) -> bool: ...
    @typing.overload
    def joinMulticastGroup(self, groupAddress: PySide2.QtNetwork.QHostAddress) -> bool: ...
    @typing.overload
    def joinMulticastGroup(self, groupAddress: PySide2.QtNetwork.QHostAddress, iface: PySide2.QtNetwork.QNetworkInterface) -> bool: ...
    @typing.overload
    def leaveMulticastGroup(self, groupAddress: PySide2.QtNetwork.QHostAddress) -> bool: ...
    @typing.overload
    def leaveMulticastGroup(self, groupAddress: PySide2.QtNetwork.QHostAddress, iface: PySide2.QtNetwork.QNetworkInterface) -> bool: ...
    def multicastInterface(self) -> PySide2.QtNetwork.QNetworkInterface: ...
    def pendingDatagramSize(self) -> int: ...
    def readDatagram(self, data: str, maxlen: int, host: PySide2.QtNetwork.QHostAddress, port: int) -> int: ...
    def receiveDatagram(self, maxSize: int=...) -> PySide2.QtNetwork.QNetworkDatagram: ...
    def setMulticastInterface(self, iface: PySide2.QtNetwork.QNetworkInterface): ...
    @typing.overload
    def writeDatagram(self, datagram: PySide2.QtCore.QByteArray, host: PySide2.QtNetwork.QHostAddress, port: int) -> int: ...
    @typing.overload
    def writeDatagram(self, datagram: PySide2.QtNetwork.QNetworkDatagram) -> int: ...

# eof
